// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {ArcaTestnetV1} from "../vaults/ArcaTestnetV1.sol";
import {ArcaRewardClaimerV1} from "../vaults/ArcaRewardClaimerV1.sol";
import {ArcaQueueHandlerV1} from "../vaults/ArcaQueueHandlerV1.sol";
import {ArcaFeeManagerV1} from "../ArcaFeeManagerV1.sol";
import {IArcaRewardClaimerV1} from "../interfaces/IArcaRewardClaimerV1.sol";
import {IArcaQueueHandlerV1} from "../interfaces/IArcaQueueHandlerV1.sol";
import {IArcaFeeManagerV1} from "../interfaces/IArcaFeeManagerV1.sol";

/**
 * @title VaultDeployer
 * @dev Atomic deployment and setup of vault system with proper ownership transfer
 * Follows OpenZeppelin best practices for deployment and access control
 */
contract VaultDeployer is Ownable {
    event VaultSystemDeployed(address indexed vault);
    event OwnershipTransferCompleted(address indexed vault);

    struct VaultConfig {
        address tokenX;
        address tokenY;
        uint16 binStep;
        uint256 amountXMin;
        uint256 amountYMin;
        string name;
        string symbol;
        address lbRouter;
        address lbpAMM;
        address lbpContract;
    }

    struct RewardClaimerConfig {
        address rewarder;
        address rewardToken;
        address nativeToken;
        address lbpContractUSD;
        address lpAMM;
        uint256 idSlippage;
    }

    // State variables to store deployed contract addresses
    address private _vault;
    address private _rewardClaimer;
    address private _queueHandler;
    address private _feeManager;

    constructor() Ownable(msg.sender) {}

    /**
     * @dev Atomically deploy and configure the entire vault system
     * Ensures proper ownership transfer in correct order
     */
    function deployVaultSystem(
        VaultConfig calldata vaultConfig,
        RewardClaimerConfig calldata rewardConfig,
        address feeRecipient
    ) external onlyOwner {
        // Step 1: Deploy all components
        _deployContracts(vaultConfig, rewardConfig, feeRecipient);

        // Step 2: Initialize vault
        _initializeVault(vaultConfig);

        // Step 3: Transfer ownership
        _transferSystemOwnership();
    }

    /**
     * @dev Get deployed vault address
     */
    function getVault() external view returns (address) {
        return _vault;
    }

    /**
     * @dev Get deployed reward claimer address
     */
    function getRewardClaimer() external view returns (address) {
        return _rewardClaimer;
    }

    /**
     * @dev Get deployed queue handler address
     */
    function getQueueHandler() external view returns (address) {
        return _queueHandler;
    }

    /**
     * @dev Get deployed fee manager address
     */
    function getFeeManager() external view returns (address) {
        return _feeManager;
    }

    /**
     * @dev Internal function to deploy all contracts
     */
    function _deployContracts(
        VaultConfig calldata vaultConfig,
        RewardClaimerConfig calldata rewardConfig,
        address feeRecipient
    ) private {
        // Deploy supporting contracts first
        ArcaFeeManagerV1 feeManager = new ArcaFeeManagerV1(feeRecipient);
        _feeManager = address(feeManager);
        
        ArcaQueueHandlerV1 queueHandler = new ArcaQueueHandlerV1();
        _queueHandler = address(queueHandler);
        
        // Deploy reward claimer
        _deployRewardClaimer(vaultConfig, rewardConfig, feeManager);
        
        // Deploy main vault
        ArcaTestnetV1 vault = new ArcaTestnetV1();
        _vault = address(vault);

        emit VaultSystemDeployed(_vault);
    }

    /**
     * @dev Internal function to deploy reward claimer with optimized stack usage
     */
    function _deployRewardClaimer(
        VaultConfig calldata vaultConfig,
        RewardClaimerConfig calldata rewardConfig,
        ArcaFeeManagerV1 feeManager
    ) private {
        ArcaRewardClaimerV1 rewardClaimer = new ArcaRewardClaimerV1(
            rewardConfig.rewarder,
            rewardConfig.rewardToken,
            feeManager,
            rewardConfig.nativeToken,
            vaultConfig.lbpContract,
            rewardConfig.lpAMM,
            rewardConfig.lbpContractUSD,
            vaultConfig.lbRouter,
            rewardConfig.idSlippage,
            vaultConfig.tokenX,
            vaultConfig.tokenY
        );
        _rewardClaimer = address(rewardClaimer);
    }

    /**
     * @dev Internal function to initialize vault
     */
    function _initializeVault(VaultConfig calldata vaultConfig) private {
        ArcaTestnetV1(_vault).initialize(
            vaultConfig.tokenX,
            vaultConfig.tokenY,
            vaultConfig.binStep,
            vaultConfig.amountXMin,
            vaultConfig.amountYMin,
            vaultConfig.name,
            vaultConfig.symbol,
            vaultConfig.lbRouter,
            vaultConfig.lbpAMM,
            vaultConfig.lbpContract,
            IArcaRewardClaimerV1(_rewardClaimer),
            IArcaQueueHandlerV1(_queueHandler),
            IArcaFeeManagerV1(_feeManager)
        );
    }

    /**
     * @dev Transfer ownership of all components to the vault using two-step process
     * Must be done in specific order to ensure proper access control
     */
    function _transferSystemOwnership() private {
        address vaultAddress = _vault;

        // Step 1: Transfer ownership to vault (two-step for reward claimer)
        ArcaRewardClaimerV1(_rewardClaimer).transferOwnership(vaultAddress);
        ArcaQueueHandlerV1(_queueHandler).transferOwnership(vaultAddress);
        ArcaFeeManagerV1(_feeManager).transferOwnership(vaultAddress);

        // Step 2: Accept ownership from vault side for two-step components
        // Note: RewardClaimer uses Ownable2Step, vault needs to accept
        // This would require vault to implement acceptOwnership calls

        // For now, using direct transfer (can be upgraded to two-step later)
        // Verify all transfers completed successfully
        require(
            ArcaRewardClaimerV1(_rewardClaimer).owner() == vaultAddress,
            "VaultDeployer: RewardClaimer ownership transfer failed"
        );
        require(
            ArcaQueueHandlerV1(_queueHandler).owner() == vaultAddress,
            "VaultDeployer: QueueHandler ownership transfer failed"
        );
        require(
            ArcaFeeManagerV1(_feeManager).owner() == vaultAddress,
            "VaultDeployer: FeeManager ownership transfer failed"
        );

        emit OwnershipTransferCompleted(vaultAddress);
    }

    /**
     * @dev Emergency function to transfer ownership if deployment fails
     * Only callable by deployer before vault system is fully configured
     */
    function emergencyTransferOwnership(
        address component,
        address newOwner
    ) external onlyOwner {
        require(component != address(0), "VaultDeployer: Invalid component");
        require(newOwner != address(0), "VaultDeployer: Invalid new owner");

        Ownable(component).transferOwnership(newOwner);
    }
}
