{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "477729e550b0364b844926fc70144ef0936ba101c55c79516c0d7998520c0567",
          "withoutMetadata": "e0e788a962031637d971d4e7efcedf0ea44e59de93f0d2f988859de247e45cc3",
          "linkedWithoutMetadata": "e0e788a962031637d971d4e7efcedf0ea44e59de93f0d2f988859de247e45cc3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "b96126ddee2e4474f993f6956161eb57e866657e4e8fac7650ce8fe93774af0f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "2c52b5ee1bc1aaca99921935111c8d676f2cb0472cacab9507714015b7735f4f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "f0352b411e740e32d7caae0c41b8ef2b9c7a808859dd2080951f2c775dc42dd7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "904c645e195a9de1cb34f91cf5c50ec04b8e5f45b099ad8eef1e8d37ab5229c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "c205426c040814f700239516664fbf1648912e9d22df6bfdaf0cf585acadbfb7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c5637c31f0423d939ecd9e25a8babcf25d7dd8806056544ccff25689f1412938",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/BaseVault.sol:BaseVault": {
        "src": "contracts-metropolis/src/BaseVault.sol:32",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "()",
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVault",
            "src": "contracts-metropolis/src/BaseVault.sol:123"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/BaseVault.sol:40"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/BaseVault.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IMetropolisStrategy)14916",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:44"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:46"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:49"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:52"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IMetropolisStrategy)14916": {
              "label": "contract IMetropolisStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)14485_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:19",
        "version": {
          "withMetadata": "e4f09b2170b41c9fc8c3e68967b8fecc7c5696dcadeafd87d0e6a916b2d6c848",
          "withoutMetadata": "fecb8c44f1521cf1e426a77a7ef5b8b8bd8f4d0b4e79a00c0a4765de19329b5f",
          "linkedWithoutMetadata": "fecb8c44f1521cf1e426a77a7ef5b8b8bd8f4d0b4e79a00c0a4765de19329b5f"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)6493_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:46"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)6477": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)6493_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)6493_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)6477",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/MetropolisStrategy.sol:MetropolisStrategy": {
        "src": "contracts-metropolis/src/MetropolisStrategy.sol:51",
        "version": {
          "withMetadata": "99e5b0738e7e5a831b26157cccd6f81ddf81c77ebe4fdaad69363924be419e2d",
          "withoutMetadata": "17c5aeed3530a9b3be6205a03aab064f032d9ea6cacbf058e27b9edb5219faf4",
          "linkedWithoutMetadata": "17c5aeed3530a9b3be6205a03aab064f032d9ea6cacbf058e27b9edb5219faf4"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IMetropolisStrategy.sol:IMetropolisStrategy",
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "forge-std/console.sol:console",
          "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations",
          "contracts-metropolis/src/libraries/Hooks.sol:Hooks"
        ],
        "methods": [
          "()",
          "()",
          "(address,uint256)",
          "initialize()",
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "getRewardTokens()",
          "getPendingAumAnnualFee()",
          "getMaxRange()",
          "getStrategyType()",
          "withdrawAll()",
          "emergencyWidthdrawRange(uint24,uint24)",
          "rebalance(int32,int32,int32,int32,uint256,uint256,bytes)",
          "harvestRewards()",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "setRebalanceCoolDown(uint256)",
          "hasRewards()",
          "hasExtraRewards()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MetropolisStrategy",
            "src": "contracts-metropolis/src/MetropolisStrategy.sol:142"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_MAX_RANGE",
            "src": "contracts-metropolis/src/MetropolisStrategy.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/MetropolisStrategy.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_lowerRange",
              "offset": 0,
              "slot": "51",
              "type": "t_uint24",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:80"
            },
            {
              "label": "_upperRange",
              "offset": 3,
              "slot": "51",
              "type": "t_uint24",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:81"
            },
            {
              "label": "_aumAnnualFee",
              "offset": 6,
              "slot": "51",
              "type": "t_uint16",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:82"
            },
            {
              "label": "_lastRebalance",
              "offset": 8,
              "slot": "51",
              "type": "t_uint64",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:83"
            },
            {
              "label": "_pendingAumAnnualFee",
              "offset": 16,
              "slot": "51",
              "type": "t_uint16",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:84"
            },
            {
              "label": "_pendingAumAnnualFeeSet",
              "offset": 18,
              "slot": "51",
              "type": "t_bool",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:85"
            },
            {
              "label": "_rebalanceCoolDown",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:86"
            },
            {
              "label": "_operator",
              "offset": 0,
              "slot": "53",
              "type": "t_address",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleHelper.sol:OracleHelper": {
        "src": "contracts-metropolis/src/OracleHelper.sol:11",
        "version": {
          "withMetadata": "7fd0272b2d471a3150a5161f073f4225f69eab4e2492e545db35cc5ba12a6a4e",
          "withoutMetadata": "5695c0e9d92c31131b99919f565bd22bd7c2799420b76d36ef27deb75a86ba57",
          "linkedWithoutMetadata": "5695c0e9d92c31131b99919f565bd22bd7c2799420b76d36ef27deb75a86ba57"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address,address,address,address,uint8,uint8)",
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setSequencerUptimeFeed(address)",
          "getOracleParameters()",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setTwapParams(bool,uint40,uint256)",
          "getDataFeedX()",
          "getDataFeedY()",
          "getSequencerUptimeFeed()",
          "getPrice()",
          "getValueInY(uint256,uint256,uint256)",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleHelper",
            "src": "contracts-metropolis/src/OracleHelper.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pair",
            "src": "contracts-metropolis/src/OracleHelper.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedX",
            "src": "contracts-metropolis/src/OracleHelper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedY",
            "src": "contracts-metropolis/src/OracleHelper.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsX",
            "src": "contracts-metropolis/src/OracleHelper.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsY",
            "src": "contracts-metropolis/src/OracleHelper.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/OracleHelper.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:36"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:39"
            },
            {
              "label": "_oracleParameters",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(OracleParameters)15010_storage",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:42"
            },
            {
              "label": "_sequencerUptimeFeed",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IAggregatorV3)14399",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAggregatorV3)14399": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_struct(OracleParameters)15010_storage": {
              "label": "struct IOracleHelper.OracleParameters",
              "members": [
                {
                  "label": "minPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "heartbeatX",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "heartbeatY",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "2"
                },
                {
                  "label": "deviationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "twapPriceCheckEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "twapInterval",
                  "type": "t_uint40",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleHelperFactory.sol:OracleHelperFactory": {
        "src": "contracts-metropolis/src/OracleHelperFactory.sol:11",
        "version": {
          "withMetadata": "6dc535d132f098e2bbfe2be3b0e4ab7d2fd5b37dabdc29eb99d4771d5d783f6b",
          "withoutMetadata": "9aec63042828eb9390812696cb1d324d3910ccee3142cfd547c74b75149942df",
          "linkedWithoutMetadata": "9aec63042828eb9390812696cb1d324d3910ccee3142cfd547c74b75149942df"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelperFactory.sol:IOracleHelperFactory"
        ],
        "libraries": [],
        "methods": [
          "createOracleHelper(address,address,address,address,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleRewardVault.sol:OracleRewardVault": {
        "src": "contracts-metropolis/src/OracleRewardVault.sol:25",
        "version": {
          "withMetadata": "c22854fae64b08459cbbee1d5d145d801c6add2817388a4461b3e6881a93c2c6",
          "withoutMetadata": "c9caf02d83c81178ad6f3d8dafdd3915ef5e0ec3b8ddcfe6555efbb8c50a89eb",
          "linkedWithoutMetadata": "c9caf02d83c81178ad6f3d8dafdd3915ef5e0ec3b8ddcfe6555efbb8c50a89eb"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault",
          "contracts-metropolis/src/OracleVault.sol:OracleVault",
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/Precision.sol:Precision",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper"
        ],
        "methods": [
          "(address)",
          "getVaultType()",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleRewardVault",
            "src": "contracts-metropolis/src/OracleRewardVault.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IMetropolisStrategy)14916",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:44"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:46"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:49"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:52"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:55"
            },
            {
              "label": "_phantomShareSupply",
              "offset": 0,
              "slot": "157",
              "type": "t_uint256",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:33"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "158",
              "type": "t_mapping(t_address,t_struct(User)15147_storage)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:36"
            },
            {
              "label": "tokenCached",
              "offset": 0,
              "slot": "159",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:38"
            },
            {
              "label": "cachedRewardTokens",
              "offset": 0,
              "slot": "160",
              "type": "t_array(t_struct(Reward)15155_storage)dyn_storage",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Reward)15155_storage)dyn_storage": {
              "label": "struct IOracleRewardVault.Reward[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)3068": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMetropolisStrategy)14916": {
              "label": "contract IMetropolisStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)15147_storage)": {
              "label": "mapping(address => struct IOracleRewardVault.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)14485_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Reward)15155_storage": {
              "label": "struct IOracleRewardVault.Reward",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)3068",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "accRewardsPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)15147_storage": {
              "label": "struct IOracleRewardVault.User",
              "members": [
                {
                  "label": "phantomAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebtPerToken",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleVault.sol:OracleVault": {
        "src": "contracts-metropolis/src/OracleVault.sol:31",
        "version": {
          "withMetadata": "8cc6c04c5c01016476c44fd47ba35b5edf2277a5d13d35951056836b89b4b562",
          "withoutMetadata": "c5b19e08ebd7bc570bd9e34ed99c4592e918e40e6e8a2e53a200fcaedcff10f4",
          "linkedWithoutMetadata": "c5b19e08ebd7bc570bd9e34ed99c4592e918e40e6e8a2e53a200fcaedcff10f4"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address)",
          "getPrice()",
          "getOracleParameters()",
          "getOracleHelper()",
          "getVaultType()",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleVault",
            "src": "contracts-metropolis/src/OracleVault.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IMetropolisStrategy)14916",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:44"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:46"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:49"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:52"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IMetropolisStrategy)14916": {
              "label": "contract IMetropolisStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)14485_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/VaultFactory.sol:VaultFactory": {
        "src": "contracts-metropolis/src/VaultFactory.sol:57",
        "version": {
          "withMetadata": "3702b5da3b7b07b671cdd99e82fb879c2e8fc971fbe4633c01e8407942ee022a",
          "withoutMetadata": "c6ab914dc804a576151c1096a97ed200514acc37dc71a33b00d6488ae6bc2ba5",
          "linkedWithoutMetadata": "c6ab914dc804a576151c1096a97ed200514acc37dc71a33b00d6488ae6bc2ba5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "joe-v2/libraries/ImmutableClone.sol:ImmutableClone"
        ],
        "methods": [
          "(address,address)",
          "initialize4(address,uint256)",
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "isPairWhitelisted(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "getShadowNonfungiblePositionManager()",
          "getShadowVoter()",
          "isTransferIgnored(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "getOracleHelperFactory()",
          "setOracleHelperFactory(address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setPairWhitelist(address[],bool)",
          "setTransferIgnoreList(address[])",
          "createMarketMakerShadowOracleRewardVault(address,uint16,uint32)",
          "createMarketMakerOracleVault(address,uint16)",
          "getCreationFee()",
          "getPriceLens()",
          "getVaultsByMarketMaker(address)",
          "getDefaultMarketMakerAumFee()",
          "getTransferIgnoreList()",
          "setPriceLens(address)",
          "linkVaultToStrategy(address,address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequencerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "setRebalanceCoolDown(address,uint256)",
          "recoverERC20(address,address,address,uint256)",
          "setCreationFee(uint256)",
          "setDepositToWithdrawCooldown(uint16)",
          "setShadowNonfungiblePositionManager(address)",
          "setShadowVoter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultFactory",
            "src": "contracts-metropolis/src/VaultFactory.sol:128"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/VaultFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            },
            {
              "label": "_vaults",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_enum(VaultType)15506,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:63"
            },
            {
              "label": "_strategies",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_enum(StrategyType)15510,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:64"
            },
            {
              "label": "_vaultType",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_enum(VaultType)15506)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:66"
            },
            {
              "label": "_strategyType",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_address,t_enum(StrategyType)15510)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:67"
            },
            {
              "label": "_vaultImplementation",
              "offset": 0,
              "slot": "155",
              "type": "t_mapping(t_enum(VaultType)15506,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:69"
            },
            {
              "label": "_strategyImplementation",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_enum(StrategyType)15510,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:70"
            },
            {
              "label": "_feeRecipient",
              "offset": 0,
              "slot": "157",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:72"
            },
            {
              "label": "_defaultOperator",
              "offset": 0,
              "slot": "158",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:73"
            },
            {
              "label": "_priceLens",
              "offset": 0,
              "slot": "159",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:75"
            },
            {
              "label": "_creationFee",
              "offset": 0,
              "slot": "160",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:77"
            },
            {
              "label": "_vaultsByMarketMaker",
              "offset": 0,
              "slot": "161",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:80"
            },
            {
              "label": "_marketMakerByVaults",
              "offset": 0,
              "slot": "162",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:83"
            },
            {
              "label": "_vaultSettings",
              "offset": 0,
              "slot": "163",
              "type": "t_mapping(t_address,t_struct(RebalanceSetting)15525_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:86"
            },
            {
              "label": "_makerVaults",
              "offset": 0,
              "slot": "164",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:89"
            },
            {
              "label": "_defaultMMAumFee",
              "offset": 0,
              "slot": "165",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:92"
            },
            {
              "label": "_transferIgnoreList",
              "offset": 0,
              "slot": "166",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:96"
            },
            {
              "label": "_defaultSequencerUptimeFeed",
              "offset": 0,
              "slot": "167",
              "type": "t_contract(IAggregatorV3)14399",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:99"
            },
            {
              "label": "_pairWhitelist",
              "offset": 0,
              "slot": "168",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:102"
            },
            {
              "label": "_depositToWithdrawCooldown",
              "offset": 0,
              "slot": "169",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:105"
            },
            {
              "label": "_shadowNonfungiblePositionManager",
              "offset": 2,
              "slot": "169",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:108"
            },
            {
              "label": "_shadowVoter",
              "offset": 0,
              "slot": "170",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:109"
            },
            {
              "label": "_oracleHelperFactory",
              "offset": 0,
              "slot": "171",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:112"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "172",
              "type": "t_array(t_uint256)34_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:1179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)34_storage": {
              "label": "uint256[34]",
              "numberOfBytes": "1088"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IAggregatorV3)14399": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_enum(StrategyType)15510": {
              "label": "enum IVaultFactory.StrategyType",
              "members": [
                "None",
                "Default",
                "Shadow"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(VaultType)15506": {
              "label": "enum IVaultFactory.VaultType",
              "members": [
                "None",
                "Simple",
                "Oracle",
                "OracleReward",
                "ShadowOracleReward"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(StrategyType)15510)": {
              "label": "mapping(address => enum IVaultFactory.StrategyType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(VaultType)15506)": {
              "label": "mapping(address => enum IVaultFactory.VaultType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RebalanceSetting)15525_storage)": {
              "label": "mapping(address => struct IVaultFactory.RebalanceSetting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)15510,t_address)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)15510,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)15506,t_address)": {
              "label": "mapping(enum IVaultFactory.VaultType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)15506,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.VaultType => address[])",
              "numberOfBytes": "32"
            },
            "t_struct(RebalanceSetting)15525_storage": {
              "label": "struct IVaultFactory.RebalanceSetting",
              "members": [
                {
                  "label": "newLower",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "newUpper",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "desiredActiveId",
                  "type": "t_uint24",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "slippageActiveId",
                  "type": "t_uint24",
                  "offset": 9,
                  "slot": "0"
                },
                {
                  "label": "amountX",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountY",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "distributions",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault": {
        "src": "contracts-metropolis/src/interfaces/IBaseVault.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "initialize(string,string)",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IHooksRewarder.sol:IHooksRewarder": {
        "src": "contracts-metropolis/src/interfaces/IHooksRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "getExtraHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/ILBPairHooks.sol:ILBPairHooks": {
        "src": "contracts-metropolis/src/interfaces/ILBPairHooks.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IMetropolisStrategy.sol:IMetropolisStrategy": {
        "src": "contracts-metropolis/src/interfaces/IMetropolisStrategy.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon"
        ],
        "libraries": [],
        "methods": [
          "getPair()",
          "getRange()",
          "getMaxRange()",
          "rebalance(int32,int32,int32,int32,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault": {
        "src": "contracts-metropolis/src/interfaces/IMinimalVault.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultType()",
          "getStrategy()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOneInchRouter.sol:IOneInchRouter": {
        "src": "contracts-metropolis/src/interfaces/IOneInchRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,(address,address,address payable,address payable,uint256,uint256,uint256),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelper.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setSequencerUptimeFeed(address)",
          "setTwapParams(bool,uint40,uint256)",
          "checkPriceInDeviation()",
          "getPrice()",
          "getDataFeedX()",
          "getDataFeedY()",
          "getValueInY(uint256,uint256,uint256)",
          "getOracleParameters()",
          "getSequencerUptimeFeed()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleHelperFactory.sol:IOracleHelperFactory": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelperFactory.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createOracleHelper(address,address,address,address,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "claim()",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleVault.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "getPrice()",
          "getOracleParameters()",
          "checkPriceInDeviation()",
          "getOracleHelper()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon": {
        "src": "contracts-metropolis/src/interfaces/IStrategyCommon.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getVault()",
          "getTokenX()",
          "getTokenY()",
          "getOperator()",
          "getStrategyType()",
          "getAumAnnualFee()",
          "getPendingAumAnnualFee()",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "getBalances()",
          "getIdleBalances()",
          "getRewardTokens()",
          "hasRewards()",
          "hasExtraRewards()",
          "harvestRewards()",
          "getLastRebalance()",
          "setRebalanceCoolDown(uint256)",
          "initialize()",
          "withdrawAll()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts-metropolis/src/interfaces/IVaultFactory.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "createMarketMakerShadowOracleRewardVault(address,uint16,uint32)",
          "createMarketMakerOracleVault(address,uint16)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "getTransferIgnoreList()",
          "isPairWhitelisted(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequencerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setPairWhitelist(address[],bool)",
          "linkVaultToStrategy(address,address)",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "recoverERC20(address,address,address,uint256)",
          "setTransferIgnoreList(address[])",
          "setRebalanceCoolDown(address,uint256)",
          "getShadowNonfungiblePositionManager()",
          "getShadowVoter()",
          "setShadowNonfungiblePositionManager(address)",
          "setShadowVoter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Constants.sol:Constants": {
        "src": "contracts-metropolis/src/libraries/Constants.sol:8",
        "version": {
          "withMetadata": "0d1cbda92696422c712c399ca72080cf40ff4a9e6647c3ec1da9e1d97ff96daf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "81825fe740bd0d471b31c327d585a47e0800c09c420b278710a68cf80d66f05b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Math.sol:Math": {
        "src": "contracts-metropolis/src/libraries/Math.sol:10",
        "version": {
          "withMetadata": "951f3bb12702647bc52a317ba4a48b4432b175724b2688430b2a0e1e5c7d1202",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Precision.sol:Precision": {
        "src": "contracts-metropolis/src/libraries/Precision.sol:6",
        "version": {
          "withMetadata": "3cba467598a5d28ab1a8c746c31d2de617576d52bc1b6f03729bd7f0acf3522b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts-metropolis/src/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper": {
        "src": "contracts-metropolis/src/libraries/TokenHelper.sol:10",
        "version": {
          "withMetadata": "d3376f26f6e148e482c05c87e752bd12a4e6a20e18948e2c7314e9208d43daf4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/utils/OracleLensAggregator.sol:OracleLensAggregator": {
        "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:9",
        "version": {
          "withMetadata": "ef66c55a12d62f4ff5e7d354cfed122aa52bb78563c1cf73a84754e756168c05",
          "withoutMetadata": "97857cc475690cc9ceb6a24dcd07920e6a013844345c2c51969cff4a0e07c318",
          "linkedWithoutMetadata": "97857cc475690cc9ceb6a24dcd07920e6a013844345c2c51969cff4a0e07c318"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleLensAggregator",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lens",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:IRamsesV3Pool": {
        "src": "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:16",
        "inherit": [
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [
          "_advancePeriod()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,uint256,int24,int24,uint128,bytes)",
          "collect(address,uint256,int24,int24,uint128,uint128)",
          "burn(uint256,int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol()",
          "collectProtocol(address,uint128,uint128)",
          "setFee(uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)",
          "positionPeriodSecondsInRange(uint256,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint128.sol:FixedPoint128": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint128.sol:6",
        "version": {
          "withMetadata": "ed71e040a55ba033e04aafdb2af99c980d99e9be714fa6962d3af2646c3d4eaa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "997bdf410edf2e7515a2e7859592991c848809cab9903831a4c9d1509b1c02f9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath": {
        "src": "contracts-shadow/CL/core/libraries/FullMath.sol:7",
        "version": {
          "withMetadata": "d7e036812c391f3a60fb37e68f0cd9f7ccace63046848920231b101a207d43ba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath": {
        "src": "contracts-shadow/CL/core/libraries/TickMath.sol:7",
        "version": {
          "withMetadata": "fe0dd7be5bb436ac792ae331034551f4583da2ed85cf0aa8aaf3c217132e85ac",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:19",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))",
          "collect((uint256,address,uint128,uint128))",
          "burn(uint256)",
          "getReward(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployer()",
          "WETH9()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createAndInitializePoolIfNecessary(address,address,int24,uint160)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:9",
        "version": {
          "withMetadata": "4261b60ef8211b200eadc7f3870ae770ec2b813bcc4d17ff95a22c2a685ebe75",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96",
          "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "17db61552e016463088f8394a91864841262e10c1abf8dd90160d4c6ca41a355",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/OracleRewardShadowVault.sol:OracleRewardShadowVault": {
        "src": "contracts-shadow/src/OracleRewardShadowVault.sol:57",
        "version": {
          "withMetadata": "166cec364f6fd25b71cd88c4ce3b1bcf76d25a7b1b85a26d8d48574192bafa85",
          "withoutMetadata": "a221bc0ac9685ea4216b8a61b3186ac168da8c3f8567329d177c36053b930a77",
          "linkedWithoutMetadata": "a221bc0ac9685ea4216b8a61b3186ac168da8c3f8567329d177c36053b930a77"
        },
        "inherit": [
          "contracts-shadow/src/interfaces/IOracleRewardShadowVault.sol:IOracleRewardShadowVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "contracts-metropolis/src/libraries/Precision.sol:Precision",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "contracts-shadow/src/libraries/ShadowPriceHelper.sol:ShadowPriceHelper",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper"
        ],
        "methods": [
          "(address)",
          "()",
          "()",
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getVaultType()",
          "getPool()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getTwapInterval()",
          "setTwapInterval(uint32)",
          "getAumAnnualFee()",
          "getOperators()",
          "getBalances()",
          "isDepositsPaused()",
          "isFlaggedForShutdown()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "submitShutdown()",
          "cancelShutdown()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [
          {
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol",
            "name": "ShadowPriceHelper",
            "length": 20,
            "start": 20521,
            "placeholder": "__$e67ebb1140e1d2c9349fff613462444575$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleRewardShadowVault",
            "src": "contracts-shadow/src/OracleRewardShadowVault.sol:146"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-shadow/src/OracleRewardShadowVault.sol:75"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-shadow/src/OracleRewardShadowVault.sol:76"
          },
          {
            "kind": "external-library-linking",
            "name": "ShadowPriceHelper",
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_twapInterval",
              "offset": 0,
              "slot": "151",
              "type": "t_uint32",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:79"
            },
            {
              "label": "_strategy",
              "offset": 4,
              "slot": "151",
              "type": "t_contract(IStrategyCommon)15453",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:81"
            },
            {
              "label": "_depositsPaused",
              "offset": 24,
              "slot": "151",
              "type": "t_bool",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:82"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 25,
              "slot": "151",
              "type": "t_bool",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:83"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)25034_storage)dyn_storage",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:85"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:87"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:88"
            },
            {
              "label": "_phantomShareSupply",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:89"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_struct(User)25041_storage)",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:91"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:92"
            },
            {
              "label": "tokenCached",
              "offset": 0,
              "slot": "158",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:93"
            },
            {
              "label": "cachedRewardTokens",
              "offset": 0,
              "slot": "159",
              "type": "t_array(t_struct(Reward)25049_storage)dyn_storage",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)25034_storage)dyn_storage": {
              "label": "struct IOracleRewardShadowVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Reward)25049_storage)dyn_storage": {
              "label": "struct IOracleRewardShadowVault.Reward[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)3068": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategyCommon)15453": {
              "label": "contract IStrategyCommon",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)25041_storage)": {
              "label": "mapping(address => struct IOracleRewardShadowVault.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)25034_storage": {
              "label": "struct IOracleRewardShadowVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Reward)25049_storage": {
              "label": "struct IOracleRewardShadowVault.Reward",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)3068",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "accRewardsPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)25041_storage": {
              "label": "struct IOracleRewardShadowVault.User",
              "members": [
                {
                  "label": "phantomAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebtPerToken",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/ShadowPriceHelperWrapper.sol:ShadowPriceHelperWrapper": {
        "src": "contracts-shadow/src/ShadowPriceHelperWrapper.sol:13",
        "version": {
          "withMetadata": "b13fc5daad244cc682f6996501fda76b8cc7c113514c31c68e40c28170200694",
          "withoutMetadata": "32827f827d87ab8fe9dd34c84f164e21428e58e80bb15131c5cf3992d6de7bf8",
          "linkedWithoutMetadata": "32827f827d87ab8fe9dd34c84f164e21428e58e80bb15131c5cf3992d6de7bf8"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/src/libraries/ShadowPriceHelper.sol:ShadowPriceHelper"
        ],
        "methods": [
          "getOraclePrice(address,bool,uint32,uint8,uint8)",
          "getPoolSpotPrice(address,bool,uint8,uint8)",
          "getPoolTWAPPrice(address,bool,uint32,uint8,uint8)"
        ],
        "linkReferences": [
          {
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol",
            "name": "ShadowPriceHelper",
            "length": 20,
            "start": 246,
            "placeholder": "__$e67ebb1140e1d2c9349fff613462444575$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "ShadowPriceHelper",
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/ShadowStrategy.sol:ShadowStrategy": {
        "src": "contracts-shadow/src/ShadowStrategy.sol:60",
        "version": {
          "withMetadata": "6f3e8a4a8a9455cc9b4162b18694a3027eb9729418a281a16bf7d37dfed8641e",
          "withoutMetadata": "e284db185bcde8d49bcdcae16b90c0944e5a11365caabc8ddff2162ea8d2c58e",
          "linkedWithoutMetadata": "e284db185bcde8d49bcdcae16b90c0944e5a11365caabc8ddff2162ea8d2c58e"
        },
        "inherit": [
          "contracts-shadow/src/interfaces/IShadowStrategy.sol:IShadowStrategy",
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath",
          "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:LiquidityAmounts"
        ],
        "methods": [
          "(address,uint256)",
          "()",
          "()",
          "initialize()",
          "getFactory()",
          "getVault()",
          "getPool()",
          "getTokenX()",
          "getTokenY()",
          "getOperator()",
          "getRange()",
          "getStrategyType()",
          "getAumAnnualFee()",
          "getPendingAumAnnualFee()",
          "getBalances()",
          "getIdleBalances()",
          "getLastRebalance()",
          "getMaxRange()",
          "setOperator(address)",
          "setRebalanceCoolDown(uint256)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "getPosition()",
          "getShadowNonfungiblePositionManager()",
          "getRewardTokens()",
          "hasRewards()",
          "hasExtraRewards()",
          "harvestRewards()",
          "withdrawAll()",
          "rebalance(int32,int32,int32,int32)",
          "getRewardStatus()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ShadowStrategy",
            "src": "contracts-shadow/src/ShadowStrategy.sol:157"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-shadow/src/ShadowStrategy.sol:91"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_MAX_RANGE",
            "src": "contracts-shadow/src/ShadowStrategy.sol:92"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_positionTokenId",
              "offset": 0,
              "slot": "51",
              "type": "t_uint256",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:95"
            },
            {
              "label": "_currentTickLower",
              "offset": 0,
              "slot": "52",
              "type": "t_int24",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:96"
            },
            {
              "label": "_currentTickUpper",
              "offset": 3,
              "slot": "52",
              "type": "t_int24",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:97"
            },
            {
              "label": "_aumAnnualFee",
              "offset": 6,
              "slot": "52",
              "type": "t_uint16",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:100"
            },
            {
              "label": "_lastRebalance",
              "offset": 8,
              "slot": "52",
              "type": "t_uint64",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:101"
            },
            {
              "label": "_pendingAumAnnualFee",
              "offset": 16,
              "slot": "52",
              "type": "t_uint16",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:102"
            },
            {
              "label": "_pendingAumAnnualFeeSet",
              "offset": 18,
              "slot": "52",
              "type": "t_bool",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:103"
            },
            {
              "label": "_rebalanceCoolDown",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:106"
            },
            {
              "label": "_operator",
              "offset": 0,
              "slot": "54",
              "type": "t_address",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int24": {
              "label": "int24",
              "numberOfBytes": "3"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IMinimalGauge.sol:IMinimalGauge": {
        "src": "contracts-shadow/src/interfaces/IMinimalGauge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "rewardsList()",
          "earned(address,address)",
          "getReward(address,address[])",
          "getRewardAndExit(address,address[])",
          "rewardData(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IMinimalVoter.sol:IMinimalVoter": {
        "src": "contracts-shadow/src/interfaces/IMinimalVoter.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gaugeForPool(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IOracleRewardShadowVault.sol:IOracleRewardShadowVault": {
        "src": "contracts-shadow/src/interfaces/IOracleRewardShadowVault.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getVaultType()",
          "getPool()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getTwapInterval()",
          "setTwapInterval(uint32)",
          "getAumAnnualFee()",
          "getOperators()",
          "getBalances()",
          "isDepositsPaused()",
          "isFlaggedForShutdown()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "submitShutdown()",
          "cancelShutdown()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IShadowStrategy.sol:IShadowStrategy": {
        "src": "contracts-shadow/src/interfaces/IShadowStrategy.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon"
        ],
        "libraries": [],
        "methods": [
          "getPosition()",
          "getShadowNonfungiblePositionManager()",
          "getPool()",
          "rebalance(int32,int32,int32,int32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IShadowVault.sol:IShadowVault": {
        "src": "contracts-shadow/src/interfaces/IShadowVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "getPool()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/libraries/ShadowPriceHelper.sol:ShadowPriceHelper": {
        "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol:13",
        "version": {
          "withMetadata": "2e45b216a2618908b7aa7d5e80ae5969a4bac87563f0a3a8be397bdb456ad6cf",
          "withoutMetadata": "6b6faacf7eb29d97a3799aa37be62b36f013c1dc00db5c16ca3aac92ff317735",
          "linkedWithoutMetadata": "6b6faacf7eb29d97a3799aa37be62b36f013c1dc00db5c16ca3aac92ff317735"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath",
          "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath"
        ],
        "methods": [
          "getOraclePrice(address,bool,uint32,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "7df4c04ee36474978e6f2d8af28f292815d38d6d0c17410fb4735e8969d40ff4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "aae9025c7ab538e5df127f65290407a2b0f4d6fc1b89e2b1a38996a10d0b33eb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "f87ad62d41ff4aae2afc46c7b6f1b75bb69aefba725c6341ed0e5e69c146b85f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "6cd42c635cbbcd2748459e22b56f29e9e175343ba0c4c42db46537b6f967c642",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "080efc7318e74ff3996c7e85bfa6bd43d8b40befb45b32330e1bd02afdfad036",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "8dd55ac3910b16722a9029b79589f6d308f262eb30a6c2576ec2e6ac7ed901d2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "f520feffc0f2727085108446ee674867e44a9c6964fa15289174a446e5877d62",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "161b27ef3b04659bf16811adc04b8f6451fde0ba49b2d68965fb5d8e26a12b64",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "306ac215c2583e054c49bd3899255934f173610eeab09627491a3674c7572a3c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "5ed8c833bcb352e6cae99490b838e1d893f67be29ead5cbd786655e1cde461ad",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "2c245791ffa3e1b6da143a6b06b169b8d13716c6e14652a98900c46d347684bb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "91720875075815b27ac5cba43e1f73bc860552285819014184df9e3295f2e8d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "f6e9a0076b5ab0f0d14f71bd3641b01065e3f5d07d6194e81cd5948aadf94243",
          "withoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b",
          "linkedWithoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "1181af6d71b9f8b83950395623ef4aea525b2dad374c92564f61f2a03a1d6350",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "20fe1724d829d0af22ad7c053875b946e3657dbff9d3be390dd8114c3ff76cdc",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "9540381c9b074af5b2e028e12310c2839bada16a16721339a7ce99277b5f25b4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "e3c03f17db5935f4eebf0b036deb01bf8361ba16a28b2c67f1659dcccf3b975a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "28d0cca7a5d21a4680fc85da8dc81e0d0c1e84dd75b0c4676937b3a956e0e465",
          "withoutMetadata": "e1845d1043978b421de422a70bad43b79a30ce20c759787cd043376a5528356a",
          "linkedWithoutMetadata": "e1845d1043978b421de422a70bad43b79a30ce20c759787cd043376a5528356a"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "18600b12b09c4448c8be62f2b156803071edc14edca3298bce5dbd099d9bdbd2",
          "withoutMetadata": "b132261eaf17e5f96c65cf08f546a19593888ae92b5edbf7ebbf78a829acd2d5",
          "linkedWithoutMetadata": "b132261eaf17e5f96c65cf08f546a19593888ae92b5edbf7ebbf78a829acd2d5"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "9d5b1a4a12a50f49e2bbb8ad36ddda2f461c9c208d9e427dc174db4b3087c533",
          "withoutMetadata": "a3db82fcd0f32346fc7074077ef488c9bed616b2b8fa8a64b65ee61117d7fdf8",
          "linkedWithoutMetadata": "a3db82fcd0f32346fc7074077ef488c9bed616b2b8fa8a64b65ee61117d7fdf8"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "28b82ce406adddbe533e241b38544d57bfb401d54b75dd3df8bcce46e14341c3",
          "withoutMetadata": "688a760ee5a16db72fc6f606ac89fe157064df651e9107cb96a554a1cc72c2ea",
          "linkedWithoutMetadata": "688a760ee5a16db72fc6f606ac89fe157064df651e9107cb96a554a1cc72c2ea"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "d017cd458dc7fbb664ede5bab453751a6f88fb152ae7eaa2ee6d46e2a064326a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "3572df4631c0c9aba9ccb641ab75ae409ba224ce40d132f65e69c09109c7f2cd",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "ca786e81a510938650e04c3e893c978b1d665e0628d463d2171e814ed126006b",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/MockERC20.sol:MockERC20": {
        "src": "contracts-metropolis/src/MockERC20.sol:6",
        "version": {
          "withMetadata": "16671a0e7cf0ea66d5470833a9d7cf811cd75b6ba8219b3921e79890bc7a3441",
          "withoutMetadata": "f41d7cdebca9f2ff279fdc3471c2e413896585c9b9f8747971ed86daeeedbdfd",
          "linkedWithoutMetadata": "f41d7cdebca9f2ff279fdc3471c2e413896585c9b9f8747971ed86daeeedbdfd"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,address)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts-metropolis/src/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts-metropolis/src/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "8de89f3ed8fd459008581b5d7b8f9cc67fed6ad541b9571f3d703d015f72be69",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:IRamsesV3Pool": {
        "src": "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:16",
        "inherit": [
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [
          "_advancePeriod()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,uint256,int24,int24,uint128,bytes)",
          "collect(address,uint256,int24,int24,uint128,uint128)",
          "burn(uint256,int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol()",
          "collectProtocol(address,uint128,uint128)",
          "setFee(uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)",
          "positionPeriodSecondsInRange(uint256,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint128.sol:FixedPoint128": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint128.sol:6",
        "version": {
          "withMetadata": "517af2ac0a4f4002f28feba83264e2d9410b5c78ec9846840bd2e8081234e9ae",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "7e4df6a4172ff071480993fefe50d96c7de3a0b056bd9a567589e37155e15bf4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath": {
        "src": "contracts-shadow/CL/core/libraries/FullMath.sol:7",
        "version": {
          "withMetadata": "ab0e878a5d6f7da491a8a5ab4753742bd8dff887cd7618386740a2a74cb1eb05",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath": {
        "src": "contracts-shadow/CL/core/libraries/TickMath.sol:7",
        "version": {
          "withMetadata": "50c5a5d60bfd6163f784041ef88a97e5ce7ea60229907fcaf8fd973002b24bc5",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:19",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))",
          "collect((uint256,address,uint128,uint128))",
          "burn(uint256)",
          "getReward(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployer()",
          "WETH9()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createAndInitializePoolIfNecessary(address,address,int24,uint160)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:9",
        "version": {
          "withMetadata": "1e540ca3b7130e0a6d8dae7db8ab44570b54250dbdfa28e154380440f6fa9124",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96",
          "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "5834e1ce09bb560e279105a43ee36729cc33c9d3e3b963d2b9bbf545653c7ffb",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2cddd30dd1589b472ba8ad102d2de8cfa79690fdfbe305adc880fde647d69b81",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "9db77934a3a1740335788257d955edf4e3bb7d20fcfbc9609e5cd13458197dcb",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "7ab81492d29bdeda8d25be994ea83ce9692409bd82dc39f16f816a5956dd058e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "36ae28cea8907b972d4b2abb56ea084e392affafab0814d57d68a1eb2480b780",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "d7f01f204c2ba3668cdb41b4d4c0601cdf71b0c4d25b085f2fe980de9f59764d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "dc6ea4f3f50982240964d716942bc0f7fa56054bf46b06907cb65cbcf38a3c8f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "b8d1bec08f899acb8947d02acca94c21236ebcc9e944604484caf0f2e15e29f4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "7019851d09fb231e54134833ce6c4ad6867dabd8e30a38985e5fd4f57db8e924",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "43473962742e4c5d36b1fd3a556053d03839b6481d6079583bdb53c1efe9fe09",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "4acd704fa58734510fc96756d7baf53e621fb738aa6c971ee5da2de1e94bb175",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "dea6c0d13c30ca26cd23518c865c5fae5e1c5d5ede045609a6e2439b6de60b49",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "9bff36686e9bfa56639d842c887cf722d56dcf607ac21498bbd50e7e9ae328e8",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "477729e550b0364b844926fc70144ef0936ba101c55c79516c0d7998520c0567",
          "withoutMetadata": "e0e788a962031637d971d4e7efcedf0ea44e59de93f0d2f988859de247e45cc3",
          "linkedWithoutMetadata": "e0e788a962031637d971d4e7efcedf0ea44e59de93f0d2f988859de247e45cc3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "b96126ddee2e4474f993f6956161eb57e866657e4e8fac7650ce8fe93774af0f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "2c52b5ee1bc1aaca99921935111c8d676f2cb0472cacab9507714015b7735f4f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "f0352b411e740e32d7caae0c41b8ef2b9c7a808859dd2080951f2c775dc42dd7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "904c645e195a9de1cb34f91cf5c50ec04b8e5f45b099ad8eef1e8d37ab5229c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "c205426c040814f700239516664fbf1648912e9d22df6bfdaf0cf585acadbfb7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c5637c31f0423d939ecd9e25a8babcf25d7dd8806056544ccff25689f1412938",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/BaseVault.sol:BaseVault": {
        "src": "contracts-metropolis/src/BaseVault.sol:32",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "()",
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVault",
            "src": "contracts-metropolis/src/BaseVault.sol:123"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/BaseVault.sol:40"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/BaseVault.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IMetropolisStrategy)14916",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:44"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:46"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:49"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:52"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IMetropolisStrategy)14916": {
              "label": "contract IMetropolisStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)14485_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:19",
        "version": {
          "withMetadata": "e4f09b2170b41c9fc8c3e68967b8fecc7c5696dcadeafd87d0e6a916b2d6c848",
          "withoutMetadata": "fecb8c44f1521cf1e426a77a7ef5b8b8bd8f4d0b4e79a00c0a4765de19329b5f",
          "linkedWithoutMetadata": "fecb8c44f1521cf1e426a77a7ef5b8b8bd8f4d0b4e79a00c0a4765de19329b5f"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)6493_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:46"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)6477": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)6493_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)6493_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)6477",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/MetropolisStrategy.sol:MetropolisStrategy": {
        "src": "contracts-metropolis/src/MetropolisStrategy.sol:51",
        "version": {
          "withMetadata": "99e5b0738e7e5a831b26157cccd6f81ddf81c77ebe4fdaad69363924be419e2d",
          "withoutMetadata": "17c5aeed3530a9b3be6205a03aab064f032d9ea6cacbf058e27b9edb5219faf4",
          "linkedWithoutMetadata": "17c5aeed3530a9b3be6205a03aab064f032d9ea6cacbf058e27b9edb5219faf4"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IMetropolisStrategy.sol:IMetropolisStrategy",
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "forge-std/console.sol:console",
          "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations",
          "contracts-metropolis/src/libraries/Hooks.sol:Hooks"
        ],
        "methods": [
          "()",
          "()",
          "(address,uint256)",
          "initialize()",
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "getRewardTokens()",
          "getPendingAumAnnualFee()",
          "getMaxRange()",
          "getStrategyType()",
          "withdrawAll()",
          "emergencyWidthdrawRange(uint24,uint24)",
          "rebalance(int32,int32,int32,int32,uint256,uint256,bytes)",
          "harvestRewards()",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "setRebalanceCoolDown(uint256)",
          "hasRewards()",
          "hasExtraRewards()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MetropolisStrategy",
            "src": "contracts-metropolis/src/MetropolisStrategy.sol:142"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_MAX_RANGE",
            "src": "contracts-metropolis/src/MetropolisStrategy.sol:68"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/MetropolisStrategy.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_lowerRange",
              "offset": 0,
              "slot": "51",
              "type": "t_uint24",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:80"
            },
            {
              "label": "_upperRange",
              "offset": 3,
              "slot": "51",
              "type": "t_uint24",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:81"
            },
            {
              "label": "_aumAnnualFee",
              "offset": 6,
              "slot": "51",
              "type": "t_uint16",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:82"
            },
            {
              "label": "_lastRebalance",
              "offset": 8,
              "slot": "51",
              "type": "t_uint64",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:83"
            },
            {
              "label": "_pendingAumAnnualFee",
              "offset": 16,
              "slot": "51",
              "type": "t_uint16",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:84"
            },
            {
              "label": "_pendingAumAnnualFeeSet",
              "offset": 18,
              "slot": "51",
              "type": "t_bool",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:85"
            },
            {
              "label": "_rebalanceCoolDown",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:86"
            },
            {
              "label": "_operator",
              "offset": 0,
              "slot": "53",
              "type": "t_address",
              "contract": "MetropolisStrategy",
              "src": "contracts-metropolis/src/MetropolisStrategy.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleHelper.sol:OracleHelper": {
        "src": "contracts-metropolis/src/OracleHelper.sol:11",
        "version": {
          "withMetadata": "7fd0272b2d471a3150a5161f073f4225f69eab4e2492e545db35cc5ba12a6a4e",
          "withoutMetadata": "5695c0e9d92c31131b99919f565bd22bd7c2799420b76d36ef27deb75a86ba57",
          "linkedWithoutMetadata": "5695c0e9d92c31131b99919f565bd22bd7c2799420b76d36ef27deb75a86ba57"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address,address,address,address,uint8,uint8)",
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setSequencerUptimeFeed(address)",
          "getOracleParameters()",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setTwapParams(bool,uint40,uint256)",
          "getDataFeedX()",
          "getDataFeedY()",
          "getSequencerUptimeFeed()",
          "getPrice()",
          "getValueInY(uint256,uint256,uint256)",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleHelper",
            "src": "contracts-metropolis/src/OracleHelper.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pair",
            "src": "contracts-metropolis/src/OracleHelper.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedX",
            "src": "contracts-metropolis/src/OracleHelper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedY",
            "src": "contracts-metropolis/src/OracleHelper.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsX",
            "src": "contracts-metropolis/src/OracleHelper.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsY",
            "src": "contracts-metropolis/src/OracleHelper.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/OracleHelper.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:36"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:39"
            },
            {
              "label": "_oracleParameters",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(OracleParameters)15010_storage",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:42"
            },
            {
              "label": "_sequencerUptimeFeed",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IAggregatorV3)14399",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAggregatorV3)14399": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_struct(OracleParameters)15010_storage": {
              "label": "struct IOracleHelper.OracleParameters",
              "members": [
                {
                  "label": "minPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "heartbeatX",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "heartbeatY",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "2"
                },
                {
                  "label": "deviationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "twapPriceCheckEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "twapInterval",
                  "type": "t_uint40",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleHelperFactory.sol:OracleHelperFactory": {
        "src": "contracts-metropolis/src/OracleHelperFactory.sol:11",
        "version": {
          "withMetadata": "6dc535d132f098e2bbfe2be3b0e4ab7d2fd5b37dabdc29eb99d4771d5d783f6b",
          "withoutMetadata": "9aec63042828eb9390812696cb1d324d3910ccee3142cfd547c74b75149942df",
          "linkedWithoutMetadata": "9aec63042828eb9390812696cb1d324d3910ccee3142cfd547c74b75149942df"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelperFactory.sol:IOracleHelperFactory"
        ],
        "libraries": [],
        "methods": [
          "createOracleHelper(address,address,address,address,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleRewardVault.sol:OracleRewardVault": {
        "src": "contracts-metropolis/src/OracleRewardVault.sol:25",
        "version": {
          "withMetadata": "c22854fae64b08459cbbee1d5d145d801c6add2817388a4461b3e6881a93c2c6",
          "withoutMetadata": "c9caf02d83c81178ad6f3d8dafdd3915ef5e0ec3b8ddcfe6555efbb8c50a89eb",
          "linkedWithoutMetadata": "c9caf02d83c81178ad6f3d8dafdd3915ef5e0ec3b8ddcfe6555efbb8c50a89eb"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault",
          "contracts-metropolis/src/OracleVault.sol:OracleVault",
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/Precision.sol:Precision",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper"
        ],
        "methods": [
          "(address)",
          "getVaultType()",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleRewardVault",
            "src": "contracts-metropolis/src/OracleRewardVault.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IMetropolisStrategy)14916",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:44"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:46"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:49"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:52"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:55"
            },
            {
              "label": "_phantomShareSupply",
              "offset": 0,
              "slot": "157",
              "type": "t_uint256",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:33"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "158",
              "type": "t_mapping(t_address,t_struct(User)15147_storage)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:36"
            },
            {
              "label": "tokenCached",
              "offset": 0,
              "slot": "159",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:38"
            },
            {
              "label": "cachedRewardTokens",
              "offset": 0,
              "slot": "160",
              "type": "t_array(t_struct(Reward)15155_storage)dyn_storage",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Reward)15155_storage)dyn_storage": {
              "label": "struct IOracleRewardVault.Reward[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)3068": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMetropolisStrategy)14916": {
              "label": "contract IMetropolisStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)15147_storage)": {
              "label": "mapping(address => struct IOracleRewardVault.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)14485_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Reward)15155_storage": {
              "label": "struct IOracleRewardVault.Reward",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)3068",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "accRewardsPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)15147_storage": {
              "label": "struct IOracleRewardVault.User",
              "members": [
                {
                  "label": "phantomAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebtPerToken",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/OracleVault.sol:OracleVault": {
        "src": "contracts-metropolis/src/OracleVault.sol:31",
        "version": {
          "withMetadata": "8cc6c04c5c01016476c44fd47ba35b5edf2277a5d13d35951056836b89b4b562",
          "withoutMetadata": "c5b19e08ebd7bc570bd9e34ed99c4592e918e40e6e8a2e53a200fcaedcff10f4",
          "linkedWithoutMetadata": "c5b19e08ebd7bc570bd9e34ed99c4592e918e40e6e8a2e53a200fcaedcff10f4"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address)",
          "getPrice()",
          "getOracleParameters()",
          "getOracleHelper()",
          "getVaultType()",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleVault",
            "src": "contracts-metropolis/src/OracleVault.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IMetropolisStrategy)14916",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:44"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:46"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:49"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:52"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)14485_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IMetropolisStrategy)14916": {
              "label": "contract IMetropolisStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)14485_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/VaultFactory.sol:VaultFactory": {
        "src": "contracts-metropolis/src/VaultFactory.sol:57",
        "version": {
          "withMetadata": "3702b5da3b7b07b671cdd99e82fb879c2e8fc971fbe4633c01e8407942ee022a",
          "withoutMetadata": "c6ab914dc804a576151c1096a97ed200514acc37dc71a33b00d6488ae6bc2ba5",
          "linkedWithoutMetadata": "c6ab914dc804a576151c1096a97ed200514acc37dc71a33b00d6488ae6bc2ba5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "joe-v2/libraries/ImmutableClone.sol:ImmutableClone"
        ],
        "methods": [
          "(address,address)",
          "initialize4(address,uint256)",
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "isPairWhitelisted(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "getShadowNonfungiblePositionManager()",
          "getShadowVoter()",
          "isTransferIgnored(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "getOracleHelperFactory()",
          "setOracleHelperFactory(address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setPairWhitelist(address[],bool)",
          "setTransferIgnoreList(address[])",
          "createMarketMakerShadowOracleRewardVault(address,uint16,uint32)",
          "createMarketMakerOracleVault(address,uint16)",
          "getCreationFee()",
          "getPriceLens()",
          "getVaultsByMarketMaker(address)",
          "getDefaultMarketMakerAumFee()",
          "getTransferIgnoreList()",
          "setPriceLens(address)",
          "linkVaultToStrategy(address,address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequencerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "setRebalanceCoolDown(address,uint256)",
          "recoverERC20(address,address,address,uint256)",
          "setCreationFee(uint256)",
          "setDepositToWithdrawCooldown(uint16)",
          "setShadowNonfungiblePositionManager(address)",
          "setShadowVoter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultFactory",
            "src": "contracts-metropolis/src/VaultFactory.sol:128"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/VaultFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            },
            {
              "label": "_vaults",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_enum(VaultType)15506,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:63"
            },
            {
              "label": "_strategies",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_enum(StrategyType)15510,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:64"
            },
            {
              "label": "_vaultType",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_enum(VaultType)15506)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:66"
            },
            {
              "label": "_strategyType",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_address,t_enum(StrategyType)15510)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:67"
            },
            {
              "label": "_vaultImplementation",
              "offset": 0,
              "slot": "155",
              "type": "t_mapping(t_enum(VaultType)15506,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:69"
            },
            {
              "label": "_strategyImplementation",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_enum(StrategyType)15510,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:70"
            },
            {
              "label": "_feeRecipient",
              "offset": 0,
              "slot": "157",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:72"
            },
            {
              "label": "_defaultOperator",
              "offset": 0,
              "slot": "158",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:73"
            },
            {
              "label": "_priceLens",
              "offset": 0,
              "slot": "159",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:75"
            },
            {
              "label": "_creationFee",
              "offset": 0,
              "slot": "160",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:77"
            },
            {
              "label": "_vaultsByMarketMaker",
              "offset": 0,
              "slot": "161",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:80"
            },
            {
              "label": "_marketMakerByVaults",
              "offset": 0,
              "slot": "162",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:83"
            },
            {
              "label": "_vaultSettings",
              "offset": 0,
              "slot": "163",
              "type": "t_mapping(t_address,t_struct(RebalanceSetting)15525_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:86"
            },
            {
              "label": "_makerVaults",
              "offset": 0,
              "slot": "164",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:89"
            },
            {
              "label": "_defaultMMAumFee",
              "offset": 0,
              "slot": "165",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:92"
            },
            {
              "label": "_transferIgnoreList",
              "offset": 0,
              "slot": "166",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:96"
            },
            {
              "label": "_defaultSequencerUptimeFeed",
              "offset": 0,
              "slot": "167",
              "type": "t_contract(IAggregatorV3)14399",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:99"
            },
            {
              "label": "_pairWhitelist",
              "offset": 0,
              "slot": "168",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:102"
            },
            {
              "label": "_depositToWithdrawCooldown",
              "offset": 0,
              "slot": "169",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:105"
            },
            {
              "label": "_shadowNonfungiblePositionManager",
              "offset": 2,
              "slot": "169",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:108"
            },
            {
              "label": "_shadowVoter",
              "offset": 0,
              "slot": "170",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:109"
            },
            {
              "label": "_oracleHelperFactory",
              "offset": 0,
              "slot": "171",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:112"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "172",
              "type": "t_array(t_uint256)34_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:1179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)34_storage": {
              "label": "uint256[34]",
              "numberOfBytes": "1088"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IAggregatorV3)14399": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_enum(StrategyType)15510": {
              "label": "enum IVaultFactory.StrategyType",
              "members": [
                "None",
                "Default",
                "Shadow"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(VaultType)15506": {
              "label": "enum IVaultFactory.VaultType",
              "members": [
                "None",
                "Simple",
                "Oracle",
                "OracleReward",
                "ShadowOracleReward"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(StrategyType)15510)": {
              "label": "mapping(address => enum IVaultFactory.StrategyType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(VaultType)15506)": {
              "label": "mapping(address => enum IVaultFactory.VaultType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RebalanceSetting)15525_storage)": {
              "label": "mapping(address => struct IVaultFactory.RebalanceSetting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)15510,t_address)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)15510,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)15506,t_address)": {
              "label": "mapping(enum IVaultFactory.VaultType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)15506,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.VaultType => address[])",
              "numberOfBytes": "32"
            },
            "t_struct(RebalanceSetting)15525_storage": {
              "label": "struct IVaultFactory.RebalanceSetting",
              "members": [
                {
                  "label": "newLower",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "newUpper",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "desiredActiveId",
                  "type": "t_uint24",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "slippageActiveId",
                  "type": "t_uint24",
                  "offset": 9,
                  "slot": "0"
                },
                {
                  "label": "amountX",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountY",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "distributions",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault": {
        "src": "contracts-metropolis/src/interfaces/IBaseVault.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "initialize(string,string)",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IHooksRewarder.sol:IHooksRewarder": {
        "src": "contracts-metropolis/src/interfaces/IHooksRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "getExtraHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/ILBPairHooks.sol:ILBPairHooks": {
        "src": "contracts-metropolis/src/interfaces/ILBPairHooks.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IMetropolisStrategy.sol:IMetropolisStrategy": {
        "src": "contracts-metropolis/src/interfaces/IMetropolisStrategy.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon"
        ],
        "libraries": [],
        "methods": [
          "getPair()",
          "getRange()",
          "getMaxRange()",
          "rebalance(int32,int32,int32,int32,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault": {
        "src": "contracts-metropolis/src/interfaces/IMinimalVault.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultType()",
          "getStrategy()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOneInchRouter.sol:IOneInchRouter": {
        "src": "contracts-metropolis/src/interfaces/IOneInchRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,(address,address,address payable,address payable,uint256,uint256,uint256),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelper.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setSequencerUptimeFeed(address)",
          "setTwapParams(bool,uint40,uint256)",
          "checkPriceInDeviation()",
          "getPrice()",
          "getDataFeedX()",
          "getDataFeedY()",
          "getValueInY(uint256,uint256,uint256)",
          "getOracleParameters()",
          "getSequencerUptimeFeed()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleHelperFactory.sol:IOracleHelperFactory": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelperFactory.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createOracleHelper(address,address,address,address,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "claim()",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleVault.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "getPrice()",
          "getOracleParameters()",
          "checkPriceInDeviation()",
          "getOracleHelper()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon": {
        "src": "contracts-metropolis/src/interfaces/IStrategyCommon.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getVault()",
          "getTokenX()",
          "getTokenY()",
          "getOperator()",
          "getStrategyType()",
          "getAumAnnualFee()",
          "getPendingAumAnnualFee()",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "getBalances()",
          "getIdleBalances()",
          "getRewardTokens()",
          "hasRewards()",
          "hasExtraRewards()",
          "harvestRewards()",
          "getLastRebalance()",
          "setRebalanceCoolDown(uint256)",
          "initialize()",
          "withdrawAll()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts-metropolis/src/interfaces/IVaultFactory.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "createMarketMakerShadowOracleRewardVault(address,uint16,uint32)",
          "createMarketMakerOracleVault(address,uint16)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "getTransferIgnoreList()",
          "isPairWhitelisted(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequencerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setPairWhitelist(address[],bool)",
          "linkVaultToStrategy(address,address)",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "recoverERC20(address,address,address,uint256)",
          "setTransferIgnoreList(address[])",
          "setRebalanceCoolDown(address,uint256)",
          "getShadowNonfungiblePositionManager()",
          "getShadowVoter()",
          "setShadowNonfungiblePositionManager(address)",
          "setShadowVoter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Constants.sol:Constants": {
        "src": "contracts-metropolis/src/libraries/Constants.sol:8",
        "version": {
          "withMetadata": "0d1cbda92696422c712c399ca72080cf40ff4a9e6647c3ec1da9e1d97ff96daf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "81825fe740bd0d471b31c327d585a47e0800c09c420b278710a68cf80d66f05b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Math.sol:Math": {
        "src": "contracts-metropolis/src/libraries/Math.sol:10",
        "version": {
          "withMetadata": "951f3bb12702647bc52a317ba4a48b4432b175724b2688430b2a0e1e5c7d1202",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/Precision.sol:Precision": {
        "src": "contracts-metropolis/src/libraries/Precision.sol:6",
        "version": {
          "withMetadata": "3cba467598a5d28ab1a8c746c31d2de617576d52bc1b6f03729bd7f0acf3522b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts-metropolis/src/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper": {
        "src": "contracts-metropolis/src/libraries/TokenHelper.sol:10",
        "version": {
          "withMetadata": "d3376f26f6e148e482c05c87e752bd12a4e6a20e18948e2c7314e9208d43daf4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-metropolis/src/utils/OracleLensAggregator.sol:OracleLensAggregator": {
        "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:9",
        "version": {
          "withMetadata": "ef66c55a12d62f4ff5e7d354cfed122aa52bb78563c1cf73a84754e756168c05",
          "withoutMetadata": "97857cc475690cc9ceb6a24dcd07920e6a013844345c2c51969cff4a0e07c318",
          "linkedWithoutMetadata": "97857cc475690cc9ceb6a24dcd07920e6a013844345c2c51969cff4a0e07c318"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleLensAggregator",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lens",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:IRamsesV3Pool": {
        "src": "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:16",
        "inherit": [
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [
          "_advancePeriod()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,uint256,int24,int24,uint128,bytes)",
          "collect(address,uint256,int24,int24,uint128,uint128)",
          "burn(uint256,int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol()",
          "collectProtocol(address,uint128,uint128)",
          "setFee(uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)",
          "positionPeriodSecondsInRange(uint256,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint128.sol:FixedPoint128": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint128.sol:6",
        "version": {
          "withMetadata": "ed71e040a55ba033e04aafdb2af99c980d99e9be714fa6962d3af2646c3d4eaa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "997bdf410edf2e7515a2e7859592991c848809cab9903831a4c9d1509b1c02f9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath": {
        "src": "contracts-shadow/CL/core/libraries/FullMath.sol:7",
        "version": {
          "withMetadata": "d7e036812c391f3a60fb37e68f0cd9f7ccace63046848920231b101a207d43ba",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath": {
        "src": "contracts-shadow/CL/core/libraries/TickMath.sol:7",
        "version": {
          "withMetadata": "fe0dd7be5bb436ac792ae331034551f4583da2ed85cf0aa8aaf3c217132e85ac",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:19",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))",
          "collect((uint256,address,uint128,uint128))",
          "burn(uint256)",
          "getReward(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployer()",
          "WETH9()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createAndInitializePoolIfNecessary(address,address,int24,uint160)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:9",
        "version": {
          "withMetadata": "4261b60ef8211b200eadc7f3870ae770ec2b813bcc4d17ff95a22c2a685ebe75",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96",
          "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "17db61552e016463088f8394a91864841262e10c1abf8dd90160d4c6ca41a355",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/OracleRewardShadowVault.sol:OracleRewardShadowVault": {
        "src": "contracts-shadow/src/OracleRewardShadowVault.sol:57",
        "version": {
          "withMetadata": "166cec364f6fd25b71cd88c4ce3b1bcf76d25a7b1b85a26d8d48574192bafa85",
          "withoutMetadata": "a221bc0ac9685ea4216b8a61b3186ac168da8c3f8567329d177c36053b930a77",
          "linkedWithoutMetadata": "a221bc0ac9685ea4216b8a61b3186ac168da8c3f8567329d177c36053b930a77"
        },
        "inherit": [
          "contracts-shadow/src/interfaces/IOracleRewardShadowVault.sol:IOracleRewardShadowVault",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "contracts-metropolis/src/libraries/Precision.sol:Precision",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "contracts-shadow/src/libraries/ShadowPriceHelper.sol:ShadowPriceHelper",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper"
        ],
        "methods": [
          "(address)",
          "()",
          "()",
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getVaultType()",
          "getPool()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getTwapInterval()",
          "setTwapInterval(uint32)",
          "getAumAnnualFee()",
          "getOperators()",
          "getBalances()",
          "isDepositsPaused()",
          "isFlaggedForShutdown()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "submitShutdown()",
          "cancelShutdown()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [
          {
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol",
            "name": "ShadowPriceHelper",
            "length": 20,
            "start": 20521,
            "placeholder": "__$e67ebb1140e1d2c9349fff613462444575$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleRewardShadowVault",
            "src": "contracts-shadow/src/OracleRewardShadowVault.sol:146"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-shadow/src/OracleRewardShadowVault.sol:75"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-shadow/src/OracleRewardShadowVault.sol:76"
          },
          {
            "kind": "external-library-linking",
            "name": "ShadowPriceHelper",
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_twapInterval",
              "offset": 0,
              "slot": "151",
              "type": "t_uint32",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:79"
            },
            {
              "label": "_strategy",
              "offset": 4,
              "slot": "151",
              "type": "t_contract(IStrategyCommon)15453",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:81"
            },
            {
              "label": "_depositsPaused",
              "offset": 24,
              "slot": "151",
              "type": "t_bool",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:82"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 25,
              "slot": "151",
              "type": "t_bool",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:83"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)25034_storage)dyn_storage",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:85"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:87"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:88"
            },
            {
              "label": "_phantomShareSupply",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:89"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_struct(User)25041_storage)",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:91"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:92"
            },
            {
              "label": "tokenCached",
              "offset": 0,
              "slot": "158",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:93"
            },
            {
              "label": "cachedRewardTokens",
              "offset": 0,
              "slot": "159",
              "type": "t_array(t_struct(Reward)25049_storage)dyn_storage",
              "contract": "OracleRewardShadowVault",
              "src": "contracts-shadow/src/OracleRewardShadowVault.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)25034_storage)dyn_storage": {
              "label": "struct IOracleRewardShadowVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Reward)25049_storage)dyn_storage": {
              "label": "struct IOracleRewardShadowVault.Reward[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)3068": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategyCommon)15453": {
              "label": "contract IStrategyCommon",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)25041_storage)": {
              "label": "mapping(address => struct IOracleRewardShadowVault.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)25034_storage": {
              "label": "struct IOracleRewardShadowVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Reward)25049_storage": {
              "label": "struct IOracleRewardShadowVault.Reward",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)3068",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "accRewardsPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)25041_storage": {
              "label": "struct IOracleRewardShadowVault.User",
              "members": [
                {
                  "label": "phantomAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebtPerToken",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/ShadowPriceHelperWrapper.sol:ShadowPriceHelperWrapper": {
        "src": "contracts-shadow/src/ShadowPriceHelperWrapper.sol:13",
        "version": {
          "withMetadata": "b13fc5daad244cc682f6996501fda76b8cc7c113514c31c68e40c28170200694",
          "withoutMetadata": "32827f827d87ab8fe9dd34c84f164e21428e58e80bb15131c5cf3992d6de7bf8",
          "linkedWithoutMetadata": "32827f827d87ab8fe9dd34c84f164e21428e58e80bb15131c5cf3992d6de7bf8"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/src/libraries/ShadowPriceHelper.sol:ShadowPriceHelper"
        ],
        "methods": [
          "getOraclePrice(address,bool,uint32,uint8,uint8)",
          "getPoolSpotPrice(address,bool,uint8,uint8)",
          "getPoolTWAPPrice(address,bool,uint32,uint8,uint8)"
        ],
        "linkReferences": [
          {
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol",
            "name": "ShadowPriceHelper",
            "length": 20,
            "start": 246,
            "placeholder": "__$e67ebb1140e1d2c9349fff613462444575$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "ShadowPriceHelper",
            "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/ShadowStrategy.sol:ShadowStrategy": {
        "src": "contracts-shadow/src/ShadowStrategy.sol:60",
        "version": {
          "withMetadata": "6f3e8a4a8a9455cc9b4162b18694a3027eb9729418a281a16bf7d37dfed8641e",
          "withoutMetadata": "e284db185bcde8d49bcdcae16b90c0944e5a11365caabc8ddff2162ea8d2c58e",
          "linkedWithoutMetadata": "e284db185bcde8d49bcdcae16b90c0944e5a11365caabc8ddff2162ea8d2c58e"
        },
        "inherit": [
          "contracts-shadow/src/interfaces/IShadowStrategy.sol:IShadowStrategy",
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath",
          "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:LiquidityAmounts"
        ],
        "methods": [
          "(address,uint256)",
          "()",
          "()",
          "initialize()",
          "getFactory()",
          "getVault()",
          "getPool()",
          "getTokenX()",
          "getTokenY()",
          "getOperator()",
          "getRange()",
          "getStrategyType()",
          "getAumAnnualFee()",
          "getPendingAumAnnualFee()",
          "getBalances()",
          "getIdleBalances()",
          "getLastRebalance()",
          "getMaxRange()",
          "setOperator(address)",
          "setRebalanceCoolDown(uint256)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "getPosition()",
          "getShadowNonfungiblePositionManager()",
          "getRewardTokens()",
          "hasRewards()",
          "hasExtraRewards()",
          "harvestRewards()",
          "withdrawAll()",
          "rebalance(int32,int32,int32,int32)",
          "getRewardStatus()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ShadowStrategy",
            "src": "contracts-shadow/src/ShadowStrategy.sol:157"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-shadow/src/ShadowStrategy.sol:91"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_MAX_RANGE",
            "src": "contracts-shadow/src/ShadowStrategy.sol:92"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_positionTokenId",
              "offset": 0,
              "slot": "51",
              "type": "t_uint256",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:95"
            },
            {
              "label": "_currentTickLower",
              "offset": 0,
              "slot": "52",
              "type": "t_int24",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:96"
            },
            {
              "label": "_currentTickUpper",
              "offset": 3,
              "slot": "52",
              "type": "t_int24",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:97"
            },
            {
              "label": "_aumAnnualFee",
              "offset": 6,
              "slot": "52",
              "type": "t_uint16",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:100"
            },
            {
              "label": "_lastRebalance",
              "offset": 8,
              "slot": "52",
              "type": "t_uint64",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:101"
            },
            {
              "label": "_pendingAumAnnualFee",
              "offset": 16,
              "slot": "52",
              "type": "t_uint16",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:102"
            },
            {
              "label": "_pendingAumAnnualFeeSet",
              "offset": 18,
              "slot": "52",
              "type": "t_bool",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:103"
            },
            {
              "label": "_rebalanceCoolDown",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:106"
            },
            {
              "label": "_operator",
              "offset": 0,
              "slot": "54",
              "type": "t_address",
              "contract": "ShadowStrategy",
              "src": "contracts-shadow/src/ShadowStrategy.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int24": {
              "label": "int24",
              "numberOfBytes": "3"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IMinimalGauge.sol:IMinimalGauge": {
        "src": "contracts-shadow/src/interfaces/IMinimalGauge.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "rewardsList()",
          "earned(address,address)",
          "getReward(address,address[])",
          "getRewardAndExit(address,address[])",
          "rewardData(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IMinimalVoter.sol:IMinimalVoter": {
        "src": "contracts-shadow/src/interfaces/IMinimalVoter.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gaugeForPool(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IOracleRewardShadowVault.sol:IOracleRewardShadowVault": {
        "src": "contracts-shadow/src/interfaces/IOracleRewardShadowVault.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getVaultType()",
          "getPool()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getTwapInterval()",
          "setTwapInterval(uint32)",
          "getAumAnnualFee()",
          "getOperators()",
          "getBalances()",
          "isDepositsPaused()",
          "isFlaggedForShutdown()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "submitShutdown()",
          "cancelShutdown()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IShadowStrategy.sol:IShadowStrategy": {
        "src": "contracts-shadow/src/interfaces/IShadowStrategy.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IStrategyCommon.sol:IStrategyCommon"
        ],
        "libraries": [],
        "methods": [
          "getPosition()",
          "getShadowNonfungiblePositionManager()",
          "getPool()",
          "rebalance(int32,int32,int32,int32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/interfaces/IShadowVault.sol:IShadowVault": {
        "src": "contracts-shadow/src/interfaces/IShadowVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "contracts-metropolis/src/interfaces/IMinimalVault.sol:IMinimalVault"
        ],
        "libraries": [],
        "methods": [
          "getPool()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "contracts-shadow/src/libraries/ShadowPriceHelper.sol:ShadowPriceHelper": {
        "src": "contracts-shadow/src/libraries/ShadowPriceHelper.sol:13",
        "version": {
          "withMetadata": "2e45b216a2618908b7aa7d5e80ae5969a4bac87563f0a3a8be397bdb456ad6cf",
          "withoutMetadata": "6b6faacf7eb29d97a3799aa37be62b36f013c1dc00db5c16ca3aac92ff317735",
          "linkedWithoutMetadata": "6b6faacf7eb29d97a3799aa37be62b36f013c1dc00db5c16ca3aac92ff317735"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath",
          "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath"
        ],
        "methods": [
          "getOraclePrice(address,bool,uint32,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "7df4c04ee36474978e6f2d8af28f292815d38d6d0c17410fb4735e8969d40ff4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "aae9025c7ab538e5df127f65290407a2b0f4d6fc1b89e2b1a38996a10d0b33eb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "f87ad62d41ff4aae2afc46c7b6f1b75bb69aefba725c6341ed0e5e69c146b85f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "6cd42c635cbbcd2748459e22b56f29e9e175343ba0c4c42db46537b6f967c642",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "080efc7318e74ff3996c7e85bfa6bd43d8b40befb45b32330e1bd02afdfad036",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "8dd55ac3910b16722a9029b79589f6d308f262eb30a6c2576ec2e6ac7ed901d2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "f520feffc0f2727085108446ee674867e44a9c6964fa15289174a446e5877d62",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "161b27ef3b04659bf16811adc04b8f6451fde0ba49b2d68965fb5d8e26a12b64",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "306ac215c2583e054c49bd3899255934f173610eeab09627491a3674c7572a3c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "5ed8c833bcb352e6cae99490b838e1d893f67be29ead5cbd786655e1cde461ad",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "2c245791ffa3e1b6da143a6b06b169b8d13716c6e14652a98900c46d347684bb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "91720875075815b27ac5cba43e1f73bc860552285819014184df9e3295f2e8d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.26"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "f6e9a0076b5ab0f0d14f71bd3641b01065e3f5d07d6194e81cd5948aadf94243",
          "withoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b",
          "linkedWithoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "1181af6d71b9f8b83950395623ef4aea525b2dad374c92564f61f2a03a1d6350",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "20fe1724d829d0af22ad7c053875b946e3657dbff9d3be390dd8114c3ff76cdc",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "9540381c9b074af5b2e028e12310c2839bada16a16721339a7ce99277b5f25b4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "e3c03f17db5935f4eebf0b036deb01bf8361ba16a28b2c67f1659dcccf3b975a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "28d0cca7a5d21a4680fc85da8dc81e0d0c1e84dd75b0c4676937b3a956e0e465",
          "withoutMetadata": "e1845d1043978b421de422a70bad43b79a30ce20c759787cd043376a5528356a",
          "linkedWithoutMetadata": "e1845d1043978b421de422a70bad43b79a30ce20c759787cd043376a5528356a"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "18600b12b09c4448c8be62f2b156803071edc14edca3298bce5dbd099d9bdbd2",
          "withoutMetadata": "b132261eaf17e5f96c65cf08f546a19593888ae92b5edbf7ebbf78a829acd2d5",
          "linkedWithoutMetadata": "b132261eaf17e5f96c65cf08f546a19593888ae92b5edbf7ebbf78a829acd2d5"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "9d5b1a4a12a50f49e2bbb8ad36ddda2f461c9c208d9e427dc174db4b3087c533",
          "withoutMetadata": "a3db82fcd0f32346fc7074077ef488c9bed616b2b8fa8a64b65ee61117d7fdf8",
          "linkedWithoutMetadata": "a3db82fcd0f32346fc7074077ef488c9bed616b2b8fa8a64b65ee61117d7fdf8"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "28b82ce406adddbe533e241b38544d57bfb401d54b75dd3df8bcce46e14341c3",
          "withoutMetadata": "688a760ee5a16db72fc6f606ac89fe157064df651e9107cb96a554a1cc72c2ea",
          "linkedWithoutMetadata": "688a760ee5a16db72fc6f606ac89fe157064df651e9107cb96a554a1cc72c2ea"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "d017cd458dc7fbb664ede5bab453751a6f88fb152ae7eaa2ee6d46e2a064326a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "3572df4631c0c9aba9ccb641ab75ae409ba224ce40d132f65e69c09109c7f2cd",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "ca786e81a510938650e04c3e893c978b1d665e0628d463d2171e814ed126006b",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/MockERC20.sol:MockERC20": {
        "src": "contracts-metropolis/src/MockERC20.sol:6",
        "version": {
          "withMetadata": "16671a0e7cf0ea66d5470833a9d7cf811cd75b6ba8219b3921e79890bc7a3441",
          "withoutMetadata": "f41d7cdebca9f2ff279fdc3471c2e413896585c9b9f8747971ed86daeeedbdfd",
          "linkedWithoutMetadata": "f41d7cdebca9f2ff279fdc3471c2e413896585c9b9f8747971ed86daeeedbdfd"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,address)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts-metropolis/src/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts-metropolis/src/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "8de89f3ed8fd459008581b5d7b8f9cc67fed6ad541b9571f3d703d015f72be69",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:IRamsesV3Pool": {
        "src": "contracts-shadow/CL/core/interfaces/IRamsesV3Pool.sol:16",
        "inherit": [
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState",
          "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [
          "_advancePeriod()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:IRamsesV3PoolActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,uint256,int24,int24,uint128,bytes)",
          "collect(address,uint256,int24,int24,uint128,uint128)",
          "burn(uint256,int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:IRamsesV3PoolDerivedState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:IRamsesV3PoolErrors": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:IRamsesV3PoolEvents": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:IRamsesV3PoolImmutables": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:IRamsesV3PoolOwnerActions": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol()",
          "collectProtocol(address,uint128,uint128)",
          "setFee(uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:IRamsesV3PoolState": {
        "src": "contracts-shadow/CL/core/interfaces/pool/IRamsesV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)",
          "positionPeriodSecondsInRange(uint256,address,uint256,int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint128.sol:FixedPoint128": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint128.sol:6",
        "version": {
          "withMetadata": "517af2ac0a4f4002f28feba83264e2d9410b5c78ec9846840bd2e8081234e9ae",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "contracts-shadow/CL/core/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "7e4df6a4172ff071480993fefe50d96c7de3a0b056bd9a567589e37155e15bf4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath": {
        "src": "contracts-shadow/CL/core/libraries/FullMath.sol:7",
        "version": {
          "withMetadata": "ab0e878a5d6f7da491a8a5ab4753742bd8dff887cd7618386740a2a74cb1eb05",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/core/libraries/TickMath.sol:TickMath": {
        "src": "contracts-shadow/CL/core/libraries/TickMath.sol:7",
        "version": {
          "withMetadata": "50c5a5d60bfd6163f784041ef88a97e5ce7ea60229907fcaf8fd973002b24bc5",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts-shadow/CL/periphery/interfaces/INonfungiblePositionManager.sol:19",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer",
          "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))",
          "collect((uint256,address,uint128,uint128))",
          "burn(uint256)",
          "getReward(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:IPeripheryErrors": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryErrors.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryImmutableState.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployer()",
          "WETH9()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:IPoolInitializer": {
        "src": "contracts-shadow/CL/periphery/interfaces/IPoolInitializer.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createAndInitializePoolIfNecessary(address,address,int24,uint160)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "contracts-shadow/CL/periphery/libraries/LiquidityAmounts.sol:9",
        "version": {
          "withMetadata": "1e540ca3b7130e0a6d8dae7db8ab44570b54250dbdfa28e154380440f6fa9124",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "contracts-shadow/CL/core/libraries/FixedPoint96.sol:FixedPoint96",
          "contracts-shadow/CL/core/libraries/FullMath.sol:FullMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts-shadow/CL/periphery/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "5834e1ce09bb560e279105a43ee36729cc33c9d3e3b963d2b9bbf545653c7ffb",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2cddd30dd1589b472ba8ad102d2de8cfa79690fdfbe305adc880fde647d69b81",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "9db77934a3a1740335788257d955edf4e3bb7d20fcfbc9609e5cd13458197dcb",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "7ab81492d29bdeda8d25be994ea83ce9692409bd82dc39f16f816a5956dd058e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "36ae28cea8907b972d4b2abb56ea084e392affafab0814d57d68a1eb2480b780",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "d7f01f204c2ba3668cdb41b4d4c0601cdf71b0c4d25b085f2fe980de9f59764d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "dc6ea4f3f50982240964d716942bc0f7fa56054bf46b06907cb65cbcf38a3c8f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "b8d1bec08f899acb8947d02acca94c21236ebcc9e944604484caf0f2e15e29f4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "7019851d09fb231e54134833ce6c4ad6867dabd8e30a38985e5fd4f57db8e924",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "43473962742e4c5d36b1fd3a556053d03839b6481d6079583bdb53c1efe9fe09",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "4acd704fa58734510fc96756d7baf53e621fb738aa6c971ee5da2de1e94bb175",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "dea6c0d13c30ca26cd23518c865c5fae5e1c5d5ede045609a6e2439b6de60b49",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "9bff36686e9bfa56639d842c887cf722d56dcf607ac21498bbd50e7e9ae328e8",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    }
  ]
}