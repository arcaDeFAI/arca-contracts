{
  "version": "3.4",
  "log": [
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:16",
        "version": {
          "withMetadata": "0a1cc70efd21ea8fdda215974afd2c36562854e17d95e43b32af76b6b10ccb45",
          "withoutMetadata": "eee168ff314ff309a9064a99c36a04bfd06f3dd81b92663cb71ea45bf1da7f81",
          "linkedWithoutMetadata": "eee168ff314ff309a9064a99c36a04bfd06f3dd81b92663cb71ea45bf1da7f81"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)48_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:43"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:46"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)32": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)48_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)48_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)32",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "openzeppelin/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBPair.sol:MockLBPair": {
        "src": "contracts/mocks/MockLBPair.sol:6",
        "version": {
          "withMetadata": "cbfff1e3c82a07087c0840f9eb7c289f7520f43ade1287e057743cf51c76d74a",
          "withoutMetadata": "46955ea2012f55d96fb281c177d59f2b123d041944865ce82446032886562add",
          "linkedWithoutMetadata": "46955ea2012f55d96fb281c177d59f2b123d041944865ce82446032886562add"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint16)",
          "getActiveId()",
          "setActiveId(uint24)",
          "getBinStep()",
          "getTokenX()",
          "getTokenY()",
          "getPriceFromId(uint24)",
          "setPrice(uint24,uint256)",
          "setTokens(address,address)",
          "getReserves()",
          "getLBHooksParameters()",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "balanceOf(address,uint256)",
          "totalSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "activeId",
            "src": "contracts/mocks/MockLBPair.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "binStep",
            "src": "contracts/mocks/MockLBPair.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "activeId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:7"
            },
            {
              "label": "binStep",
              "offset": 3,
              "slot": "0",
              "type": "t_uint16",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:8"
            },
            {
              "label": "tokenX",
              "offset": 5,
              "slot": "0",
              "type": "t_contract(IERC20)77",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:9"
            },
            {
              "label": "tokenY",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)77",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:10"
            },
            {
              "label": "reserveX",
              "offset": 0,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:11"
            },
            {
              "label": "reserveY",
              "offset": 16,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:12"
            },
            {
              "label": "binPrices",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint24,t_uint256)",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:15"
            },
            {
              "label": "userLiquidity",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:18"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)77": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint24,t_uint256)": {
              "label": "mapping(uint24 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:16",
        "version": {
          "withMetadata": "26e53f467fe982bc3fd5a02d16dc4e6e7c1b2b93dd88cdd5765db7688b51d10a",
          "withoutMetadata": "e55226e51d1ddcba66288f4a2fa30fb2bfa739686343502357aa5e44ee934e9d",
          "linkedWithoutMetadata": "e55226e51d1ddcba66288f4a2fa30fb2bfa739686343502357aa5e44ee934e9d"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)48_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:43"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:46"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)32": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)48_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)48_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)32",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "openzeppelin/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:16",
        "version": {
          "withMetadata": "b0b9795811234f7b9a0d0e5883a693a51ac499def716df14e8eb7b755581ffb1",
          "withoutMetadata": "8689afa64f7e1e2ad67457624dfffb019d2c85f8ee39f413da223e97fd5cc5bc",
          "linkedWithoutMetadata": "8689afa64f7e1e2ad67457624dfffb019d2c85f8ee39f413da223e97fd5cc5bc"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)48_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:43"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:46"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)32": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)48_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)48_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)32",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "openzeppelin/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "openzeppelin/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "openzeppelin/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:15",
        "version": {
          "withMetadata": "9496ac199714d0a8f8eef0d88578798b8530458259902225201cc2a149696c3e",
          "withoutMetadata": "eee168ff314ff309a9064a99c36a04bfd06f3dd81b92663cb71ea45bf1da7f81",
          "linkedWithoutMetadata": "eee168ff314ff309a9064a99c36a04bfd06f3dd81b92663cb71ea45bf1da7f81"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)46_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:42"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:45"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)30": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)46_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)46_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)30",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:15",
        "version": {
          "withMetadata": "0f279f2200260c46979d7731027030a434f8c949beca97814dcc00083e0aac1d",
          "withoutMetadata": "e864dc224c3bdcabb18d25d93414e537e704b06f4581a2a34bfd9856230f20f2",
          "linkedWithoutMetadata": "e864dc224c3bdcabb18d25d93414e537e704b06f4581a2a34bfd9856230f20f2"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)46_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:42"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:45"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)30": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)46_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)46_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)30",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:15",
        "version": {
          "withMetadata": "0cafa4adab70cb12016aecc99503802a288db9127a870176328cb5c535479387",
          "withoutMetadata": "e0bf6bf337b9580bb59f70b0927ad50edcea7e8b8dbef3f215a61ee6159bf3c2",
          "linkedWithoutMetadata": "e0bf6bf337b9580bb59f70b0927ad50edcea7e8b8dbef3f215a61ee6159bf3c2"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)46_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:42"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:45"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)30": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)46_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)46_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)30",
                  "offset": 24,
                  "slot": "2"
                },
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 26,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:15",
        "version": {
          "withMetadata": "c1c8a32a387f680247746cac34084b788913cf777639aabe39c962953c456186",
          "withoutMetadata": "aa3d99ef84a0676ffe0a4b9151084f215cac33d319836001e647b3877569a5b4",
          "linkedWithoutMetadata": "aa3d99ef84a0676ffe0a4b9151084f215cac33d319836001e647b3877569a5b4"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)40_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:38"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:41"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)24": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)40_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)40_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)24",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 21,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "contracts-metropolis/src/HybridPriceLens.sol:HybridPriceLens": {
        "src": "contracts-metropolis/src/HybridPriceLens.sol:15",
        "version": {
          "withMetadata": "bbd33dbe39b54141c0569a8eada49f5211efbd9975648255a9cbab2e42abbd19",
          "withoutMetadata": "753458157167eef83140b4bade324def907e2e7120f1c3e8f5052925d9d62848",
          "linkedWithoutMetadata": "753458157167eef83140b4bade324def907e2e7120f1c3e8f5052925d9d62848"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setExternalOracle(address,address,uint8,uint32)",
          "setLBPairRoute(address,address,address,bool)",
          "setReferenceToken(address,bool)",
          "setDefaultMaxStaleness(uint32)",
          "removePriceFeed(address)",
          "getPriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HybridPriceLens",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "defaultMaxStaleness",
            "src": "contracts-metropolis/src/HybridPriceLens.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeed)40_storage)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:38"
            },
            {
              "label": "isReferenceToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:41"
            },
            {
              "label": "defaultMaxStaleness",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32",
              "contract": "HybridPriceLens",
              "src": "contracts-metropolis/src/HybridPriceLens.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(OracleType)24": {
              "label": "enum HybridPriceLens.OracleType",
              "members": [
                "None",
                "Chainlink",
                "Pyth"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)40_storage)": {
              "label": "mapping(address => struct HybridPriceLens.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)40_storage": {
              "label": "struct HybridPriceLens.PriceFeed",
              "members": [
                {
                  "label": "useExternal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "oracleType",
                  "type": "t_enum(OracleType)24",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "externalFeed",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "lbPair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referenceToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isTokenX",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint32",
                  "offset": 21,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "contracts-metropolis/src/LBPairPriceLens.sol:LBPairPriceLens": {
        "src": "contracts-metropolis/src/LBPairPriceLens.sol:14",
        "version": {
          "withMetadata": "783b15fc2e3f01faf3857a7083b7250f800f23ea08d5dca996bb559774efc05a",
          "withoutMetadata": "4f83f0b7dab8a671773fe8095c7c5071a0a49683a3e048b52ac29c956fd28cf8",
          "linkedWithoutMetadata": "4f83f0b7dab8a671773fe8095c7c5071a0a49683a3e048b52ac29c956fd28cf8"
        },
        "inherit": [
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context",
          "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getTokenPriceNative(address)",
          "setTokenPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LBPairPriceLens",
            "src": "contracts-metropolis/src/LBPairPriceLens.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wnative",
            "src": "contracts-metropolis/src/LBPairPriceLens.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            },
            {
              "label": "tokenPairs",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "LBPairPriceLens",
              "src": "contracts-metropolis/src/LBPairPriceLens.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleHelper.sol:OracleHelper": {
        "src": "contracts-metropolis/src/OracleHelper.sol:11",
        "version": {
          "withMetadata": "839e4c8e07153e76e34e644e8944441438d06482f758dcdd09c58673db8353d7",
          "withoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612",
          "linkedWithoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address,address,address,address,uint8,uint8)",
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setSequenzerUptimeFeed(address)",
          "getOracleParameters()",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setTwapParams(bool,uint40,uint256)",
          "getDataFeedX()",
          "getDataFeedY()",
          "getSequenzerUptimeFeed()",
          "getPrice()",
          "getValueInY(uint256,uint256,uint256)",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleHelper",
            "src": "contracts-metropolis/src/OracleHelper.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pair",
            "src": "contracts-metropolis/src/OracleHelper.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedX",
            "src": "contracts-metropolis/src/OracleHelper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedY",
            "src": "contracts-metropolis/src/OracleHelper.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsX",
            "src": "contracts-metropolis/src/OracleHelper.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsY",
            "src": "contracts-metropolis/src/OracleHelper.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/OracleHelper.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:36"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:39"
            },
            {
              "label": "_oracleParameters",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(OracleParameters)3301_storage",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:42"
            },
            {
              "label": "_sequencerUptimeFeed",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IAggregatorV3)2781",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAggregatorV3)2781": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_struct(OracleParameters)3301_storage": {
              "label": "struct IOracleHelper.OracleParameters",
              "members": [
                {
                  "label": "minPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "heartbeatX",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "heartbeatY",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "2"
                },
                {
                  "label": "deviationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "twapPriceCheckEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "twapInterval",
                  "type": "t_uint40",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/VaultFactory.sol:VaultFactory": {
        "src": "contracts-metropolis/src/VaultFactory.sol:38",
        "version": {
          "withMetadata": "7c8514e57388624961b0a63af70b3675f9ec04d0e3914532f3835e0aa9027131",
          "withoutMetadata": "52797deec5cdadce178bfe1e5f3941cb52352425ce8fd994d64465368856fcc4",
          "linkedWithoutMetadata": "52797deec5cdadce178bfe1e5f3941cb52352425ce8fd994d64465368856fcc4"
        },
        "inherit": [
          "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [
          "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "joe-v2/libraries/ImmutableClone.sol:ImmutableClone"
        ],
        "methods": [
          "(address)",
          "initialize4(address,uint256)",
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "isPairWhitelisted(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setPairWhitelist(address[],bool)",
          "setTransferIgnoreList(address[])",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createMarketMakerOracleVault(address,uint16)",
          "getCreationFee()",
          "getVaultsByMarketMaker(address)",
          "getDefaultMarketMakerAumFee()",
          "getTransferIgnoreList()",
          "setPriceLens(address)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "setRebalanceCoolDown(address,uint256)",
          "recoverERC20(address,address,address,uint256)",
          "setCreationFee(uint256)",
          "setDepositToWithdrawCooldown(uint16)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultFactory",
            "src": "contracts-metropolis/src/VaultFactory.sol:104"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/VaultFactory.sol:43"
          },
          {
            "kind": "missing-initializer",
            "src": "contracts-metropolis/src/VaultFactory.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            },
            {
              "label": "_vaults",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_enum(VaultType)3804,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:45"
            },
            {
              "label": "_strategies",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_enum(StrategyType)3807,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:46"
            },
            {
              "label": "_vaultType",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_enum(VaultType)3804)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:48"
            },
            {
              "label": "_strategyType",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_address,t_enum(StrategyType)3807)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:49"
            },
            {
              "label": "_vaultImplementation",
              "offset": 0,
              "slot": "155",
              "type": "t_mapping(t_enum(VaultType)3804,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:51"
            },
            {
              "label": "_strategyImplementation",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_enum(StrategyType)3807,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:52"
            },
            {
              "label": "_feeRecipient",
              "offset": 0,
              "slot": "157",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:54"
            },
            {
              "label": "_defaultOperator",
              "offset": 0,
              "slot": "158",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:55"
            },
            {
              "label": "_priceLens",
              "offset": 0,
              "slot": "159",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:57"
            },
            {
              "label": "_creationFee",
              "offset": 0,
              "slot": "160",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:59"
            },
            {
              "label": "_vaultsByMarketMaker",
              "offset": 0,
              "slot": "161",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:62"
            },
            {
              "label": "_marketMakerByVaults",
              "offset": 0,
              "slot": "162",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:65"
            },
            {
              "label": "_vaultSettings",
              "offset": 0,
              "slot": "163",
              "type": "t_mapping(t_address,t_struct(RebalanceSetting)3822_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:68"
            },
            {
              "label": "_makerVaults",
              "offset": 0,
              "slot": "164",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:71"
            },
            {
              "label": "_defaultMMAumFee",
              "offset": 0,
              "slot": "165",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:74"
            },
            {
              "label": "_transferIgnoreList",
              "offset": 0,
              "slot": "166",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:78"
            },
            {
              "label": "_defaultSequencerUptimeFeed",
              "offset": 0,
              "slot": "167",
              "type": "t_contract(IAggregatorV3)2781",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:81"
            },
            {
              "label": "_pairWhitelist",
              "offset": 0,
              "slot": "168",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:84"
            },
            {
              "label": "_depositToWithdrawCooldown",
              "offset": 0,
              "slot": "169",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:87"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "170",
              "type": "t_array(t_uint256)36_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:805"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)36_storage": {
              "label": "uint256[36]",
              "numberOfBytes": "1152"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IAggregatorV3)2781": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_enum(StrategyType)3807": {
              "label": "enum IVaultFactory.StrategyType",
              "members": [
                "None",
                "Default"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(VaultType)3804": {
              "label": "enum IVaultFactory.VaultType",
              "members": [
                "None",
                "Simple",
                "Oracle"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(StrategyType)3807)": {
              "label": "mapping(address => enum IVaultFactory.StrategyType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(VaultType)3804)": {
              "label": "mapping(address => enum IVaultFactory.VaultType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RebalanceSetting)3822_storage)": {
              "label": "mapping(address => struct IVaultFactory.RebalanceSetting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)3807,t_address)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)3807,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)3804,t_address)": {
              "label": "mapping(enum IVaultFactory.VaultType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)3804,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.VaultType => address[])",
              "numberOfBytes": "32"
            },
            "t_struct(RebalanceSetting)3822_storage": {
              "label": "struct IVaultFactory.RebalanceSetting",
              "members": [
                {
                  "label": "newLower",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "newUpper",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "desiredActiveId",
                  "type": "t_uint24",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "slippageActiveId",
                  "type": "t_uint24",
                  "offset": 9,
                  "slot": "0"
                },
                {
                  "label": "amountX",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountY",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "distributions",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault": {
        "src": "contracts-metropolis/src/interfaces/IBaseVault.sol:16",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "initialize(string,string)",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IHooksRewarder.sol:IHooksRewarder": {
        "src": "contracts-metropolis/src/interfaces/IHooksRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "getExtraHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOneInchRouter.sol:IOneInchRouter": {
        "src": "contracts-metropolis/src/interfaces/IOneInchRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,(address,address,address payable,address payable,uint256,uint256,uint256),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelper.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setSequenzerUptimeFeed(address)",
          "setTwapParams(bool,uint40,uint256)",
          "checkPriceInDeviation()",
          "getPrice()",
          "getDataFeedX()",
          "getDataFeedY()",
          "getValueInY(uint256,uint256,uint256)",
          "getOracleParameters()",
          "getSequenzerUptimeFeed()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "claim()",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleVault.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getPrice()",
          "getOracleParameters()",
          "checkPriceInDeviation()",
          "getOracleHelper()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts-metropolis/src/interfaces/IStrategy.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getPendingAumAnnualFee()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "hasRewards()",
          "hasExtraRewards()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getMaxRange()",
          "initialize()",
          "withdrawAll()",
          "rebalance(uint24,uint24,uint24,uint24,uint256,uint256,bytes)",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "harvestRewards()",
          "setRebalanceCoolDown(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts-metropolis/src/interfaces/IVaultFactory.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "getTransferIgnoreList()",
          "isPairWhitelisted(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setPairWhitelist(address[],bool)",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "recoverERC20(address,address,address,uint256)",
          "setTransferIgnoreList(address[])",
          "setRebalanceCoolDown(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper": {
        "src": "contracts-metropolis/src/libraries/TokenHelper.sol:10",
        "version": {
          "withMetadata": "895a70e1d0fa1a4072ae8c7f82b0d68dba82d2c9ebbaa80d67c41e4fd0a7c0b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/utils/OracleLensAggregator.sol:OracleLensAggregator": {
        "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:9",
        "version": {
          "withMetadata": "7900acc47d50582f75fdbb9bc94e569f8266e43169f54d9721886c970a63d11f",
          "withoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50",
          "linkedWithoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3",
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleLensAggregator",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lens",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "f4a7854939b2e7a42626280047f53bfb869e3db784676907a8b4278514bdb99a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "e57896c3ccba1cf2c5c1f6f2114afb51c0f69ee23a3c160c842306b488dacb68",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "22244778d2ca41863fefabae120d4604e5e9805f09721a34cdc3b871a5db7df3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "513e246607ed328f11c6d1a011122f4e4c736120e1f5d4e9da93bc906f2ac511",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "025cd388bece95c86767a1cb2f5d773a161baeffee94866c990c81cacf2937e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4b1cf89a6486894887a976012687b8ebf2da8455b4b415ec04675adf36a446dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "f77559981d0b96d541d2a6580332851281435c7178d4462b27eacc32300840a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "cbfb3c24f8352c0facd6d97dcf4cfba5a6603e7e23fe7c77eab77ce7f1dccabb",
          "withoutMetadata": "7de6916a48e3cb6d5fa8d73f8ee518d1dbdcdb75fc846fa74d832730532e0a5c",
          "linkedWithoutMetadata": "7de6916a48e3cb6d5fa8d73f8ee518d1dbdcdb75fc846fa74d832730532e0a5c"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "65e1935f897247c753735e1c48d0897487a9f52320ebcb0d6e823899b9da3084",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "f0667f91e943252df2968ec7d6a8715b73743cc3248c03e507c48aa1fc5e9a34",
          "withoutMetadata": "0ba4f339294bd32a80fd3db127440693247342bae3621f02d2e5f56235b68608",
          "linkedWithoutMetadata": "0ba4f339294bd32a80fd3db127440693247342bae3621f02d2e5f56235b68608"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:61",
        "version": {
          "withMetadata": "bce3064c690f3b820738b2270bdd792ed181c4f6cc62c59d2a83769ec9dc03ab",
          "withoutMetadata": "fb3f4dde68e0ad55d1be8ebb3dcd7b659a78ad21521e033eff416f0bc6a730c7",
          "linkedWithoutMetadata": "fb3f4dde68e0ad55d1be8ebb3dcd7b659a78ad21521e033eff416f0bc6a730c7"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:78"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:66"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0293c1f81927a4d53228f0a9048ef3dd42e60d2e735f5bc58259a249f78d386a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "f65e829a5f483562c42ccaa4bb29e4ac7b3af82166d8703708b4629e6970301d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "cbfb3c24f8352c0facd6d97dcf4cfba5a6603e7e23fe7c77eab77ce7f1dccabb",
          "withoutMetadata": "7de6916a48e3cb6d5fa8d73f8ee518d1dbdcdb75fc846fa74d832730532e0a5c",
          "linkedWithoutMetadata": "7de6916a48e3cb6d5fa8d73f8ee518d1dbdcdb75fc846fa74d832730532e0a5c"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "65e1935f897247c753735e1c48d0897487a9f52320ebcb0d6e823899b9da3084",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "f0667f91e943252df2968ec7d6a8715b73743cc3248c03e507c48aa1fc5e9a34",
          "withoutMetadata": "0ba4f339294bd32a80fd3db127440693247342bae3621f02d2e5f56235b68608",
          "linkedWithoutMetadata": "0ba4f339294bd32a80fd3db127440693247342bae3621f02d2e5f56235b68608"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:61",
        "version": {
          "withMetadata": "bce3064c690f3b820738b2270bdd792ed181c4f6cc62c59d2a83769ec9dc03ab",
          "withoutMetadata": "fb3f4dde68e0ad55d1be8ebb3dcd7b659a78ad21521e033eff416f0bc6a730c7",
          "linkedWithoutMetadata": "fb3f4dde68e0ad55d1be8ebb3dcd7b659a78ad21521e033eff416f0bc6a730c7"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:78"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:66"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0293c1f81927a4d53228f0a9048ef3dd42e60d2e735f5bc58259a249f78d386a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "f65e829a5f483562c42ccaa4bb29e4ac7b3af82166d8703708b4629e6970301d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "cbfb3c24f8352c0facd6d97dcf4cfba5a6603e7e23fe7c77eab77ce7f1dccabb",
          "withoutMetadata": "7de6916a48e3cb6d5fa8d73f8ee518d1dbdcdb75fc846fa74d832730532e0a5c",
          "linkedWithoutMetadata": "7de6916a48e3cb6d5fa8d73f8ee518d1dbdcdb75fc846fa74d832730532e0a5c"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "65e1935f897247c753735e1c48d0897487a9f52320ebcb0d6e823899b9da3084",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0293c1f81927a4d53228f0a9048ef3dd42e60d2e735f5bc58259a249f78d386a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "f65e829a5f483562c42ccaa4bb29e4ac7b3af82166d8703708b4629e6970301d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "65e1935f897247c753735e1c48d0897487a9f52320ebcb0d6e823899b9da3084",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1ba720802922ae6402adf9cab77ff8e452c5005b9dc6e1138ac3464b37bc076f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0293c1f81927a4d53228f0a9048ef3dd42e60d2e735f5bc58259a249f78d386a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "f65e829a5f483562c42ccaa4bb29e4ac7b3af82166d8703708b4629e6970301d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "8de89f3ed8fd459008581b5d7b8f9cc67fed6ad541b9571f3d703d015f72be69",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ArcaFeeManagerV1.sol:ArcaFeeManagerV1": {
        "src": "contracts/ArcaFeeManagerV1.sol:12",
        "version": {
          "withMetadata": "81f50ef8067e96d3be030a907ab703a486eafa02a1c46bc3024e6540e29dadc7",
          "withoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c",
          "linkedWithoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c"
        },
        "inherit": [
          "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "setFees(uint256,uint256,uint256)",
          "setFeeRecipient(address)",
          "getDepositFee()",
          "getWithdrawFee()",
          "getPerformanceFee()",
          "getFeeRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositFee",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:17"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:18"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:19"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/Staking/MetroShadowStaking.sol:MetroShadowStaking": {
        "src": "contracts/Staking/MetroShadowStaking.sol:15",
        "version": {
          "withMetadata": "99ab9e55560bf8d3ca8c72b1fcf5167b10a22584301464bd9e2bb4e5f6a6a78c",
          "withoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed",
          "linkedWithoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "stakeMetro(uint256,uint256)",
          "emergencyExit(uint256)",
          "unlockMetro(uint256)",
          "stakeX33(uint256)",
          "unstakeX33(uint256)",
          "getUserMetroPositions(address)",
          "getUserX33Positions(address)",
          "calculateCurrentPenalty(address,uint256)",
          "getAvailableExitCapacity()",
          "getPendingRebaseRewards(address)",
          "updateStakingTier(uint256,uint256,uint256,uint256)",
          "triggerRebaseDistribution()",
          "emergencyWithdraw(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MetroShadowStaking",
            "src": "contracts/Staking/MetroShadowStaking.sol:108"
          },
          {
            "kind": "state-variable-immutable",
            "name": "METRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "X33_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NMETRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NSHADOW_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "stakingTiers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:35"
            },
            {
              "label": "userMetroPositions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:57"
            },
            {
              "label": "userX33Positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:58"
            },
            {
              "label": "piggyBankBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:61"
            },
            {
              "label": "totalPendingRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:62"
            },
            {
              "label": "totalMetroStaked",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:65"
            },
            {
              "label": "totalNMetroMinted",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:66"
            },
            {
              "label": "totalX33Staked",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:67"
            },
            {
              "label": "totalNShadowMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:68"
            },
            {
              "label": "userRebaseIndex",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:71"
            },
            {
              "label": "globalRebaseIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:72"
            },
            {
              "label": "rebaseRewardsPerToken",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(X33StakePosition)3734_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.MetroStakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.X33StakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)": {
              "label": "mapping(uint256 => struct MetroShadowStaking.StakingTier)",
              "numberOfBytes": "32"
            },
            "t_struct(MetroStakePosition)3725_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nMetroAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tierId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rebaseRewardsReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(StakingTier)3705_storage": {
              "label": "struct MetroShadowStaking.StakingTier",
              "members": [
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "penaltyRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(X33StakePosition)3734_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nShadowAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/TokenTypes.sol:TokenValidator": {
        "src": "contracts/TokenTypes.sol:5",
        "version": {
          "withMetadata": "a1be82b276d007e36cdbe3561db35a73c8c1eebdae96bab379231a09c75ea397",
          "withoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd",
          "linkedWithoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/deployment/ArcaVaultRegistry.sol:ArcaVaultRegistry": {
        "src": "contracts/deployment/ArcaVaultRegistry.sol:12",
        "version": {
          "withMetadata": "f18d6ba9255a90a55d5bb639de040356eaa208df86b82a2f82348864b569d14b",
          "withoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91",
          "linkedWithoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "registerVault(address,address,address,address,address,address,string,string,uint256,bool)",
          "deactivateVault(address,string)",
          "activateVault(address)",
          "getVaultsByTokenPair(address,address)",
          "getActiveVaults()",
          "getVaultCount()",
          "getVaultInfo(address)",
          "getVaultDetails(address)",
          "getVaultComponents(address)",
          "isActiveVault(address)",
          "getDeploymentInfo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcaVaultRegistry",
            "src": "contracts/deployment/ArcaVaultRegistry.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "vaultInfo",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(VaultInfo)4953_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:29"
            },
            {
              "label": "vaultList",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:30"
            },
            {
              "label": "isRegisteredVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:31"
            },
            {
              "label": "vaultsByTokenPair",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(VaultInfo)4953_storage)": {
              "label": "mapping(address => struct ArcaVaultRegistry.VaultInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
              "label": "mapping(bytes32 => address[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(VaultInfo)4953_storage": {
              "label": "struct ArcaVaultRegistry.VaultInfo",
              "members": [
                {
                  "label": "vault",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardClaimer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "queueHandler",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeManager",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tokenX",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "tokenY",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "deploymentTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deployer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "9"
                },
                {
                  "label": "isProxy",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1": {
        "src": "contracts/interfaces/IArcaFeeManagerV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "BASIS_POINTS()",
          "getDepositFee()",
          "getFeeRecipient()",
          "getPerformanceFee()",
          "getWithdrawFee()",
          "setFeeRecipient(address)",
          "setFees(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1": {
        "src": "contracts/interfaces/IArcaQueueHandlerV1.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositQueueStart()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getDepositQueueTrailingSlice()",
          "getPendingDepositRequests()",
          "getPendingDepositsCount()",
          "getPendingWithdrawRequests()",
          "getPendingWithdrawsCount()",
          "getQueuedToken(uint8)",
          "getWithdrawQueueLength()",
          "getWithdrawQueueTrailingSlice()",
          "reduceQueuedToken(uint256,uint8)",
          "withdrawQueueStart()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1": {
        "src": "contracts/interfaces/IArcaRewardClaimerV1.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimAndCompoundRewards()",
          "claimRewards(uint256[],address)",
          "getExpectedSwapOutput(uint256,address)",
          "getVaultBinIds()",
          "idSlippage()",
          "minSwapAmount()",
          "nativeToken()",
          "setMinSwapAmount(uint256)",
          "setRewarder(address)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible": {
        "src": "contracts/interfaces/IDepositWithdrawCompatible.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:ILBHooksBaseRewarder": {
        "src": "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:11",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks"
        ],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "setDeltaBins(int24,int24)",
          "sweep(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBRouter.sol:ILBRouter": {
        "src": "contracts/interfaces/Metropolis/ILBRouter.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity((address,address,uint16,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/IPair.sol:IPair": {
        "src": "contracts/interfaces/Metropolis/IPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "feeAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:6",
        "version": {
          "withMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "withoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "linkedWithoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,address)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/mocks/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBHooksBaseRewarder.sol:MockLBHooksBaseRewarder": {
        "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:6",
        "version": {
          "withMetadata": "a306dfdd90078adb991ae056fe11ee0d0e049ecd09318d058814d39710d3daf9",
          "withoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef",
          "linkedWithoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setRewardToken(address)",
          "setClaimAmount(uint256)",
          "setShouldFail(bool)",
          "claim(address,uint256[])",
          "pendingRewards(address,uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:7"
            },
            {
              "label": "claimAmount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBPair.sol:MockLBPair": {
        "src": "contracts/mocks/MockLBPair.sol:6",
        "version": {
          "withMetadata": "32abfc4d5ff5d1173883af8afae445a83564c786bc964bc6ea85618bf4647f0c",
          "withoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47",
          "linkedWithoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint16)",
          "getActiveId()",
          "setActiveId(uint24)",
          "getBinStep()",
          "getTokenX()",
          "getTokenY()",
          "getPriceFromId(uint24)",
          "getReserves()",
          "getLBHooksParameters()",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "balanceOf(address,uint256)",
          "totalSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "activeId",
            "src": "contracts/mocks/MockLBPair.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "binStep",
            "src": "contracts/mocks/MockLBPair.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "activeId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:7"
            },
            {
              "label": "binStep",
              "offset": 3,
              "slot": "0",
              "type": "t_uint16",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:8"
            },
            {
              "label": "tokenX",
              "offset": 5,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:9"
            },
            {
              "label": "tokenY",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:10"
            },
            {
              "label": "reserveX",
              "offset": 0,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:11"
            },
            {
              "label": "reserveY",
              "offset": 16,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:12"
            },
            {
              "label": "userLiquidity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:15"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBRouter.sol:MockLBRouter": {
        "src": "contracts/mocks/MockLBRouter.sol:7",
        "version": {
          "withMetadata": "7fec49ead98bc2fe355568292430616d863b3a035adbb870e35257f2dea5876f",
          "withoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0",
          "linkedWithoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setSwapOutputForToken(address,uint256)",
          "setShouldFail(bool)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "tokenSwapOutputs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaQueueHandlerV1.sol:ArcaQueueHandlerV1": {
        "src": "contracts/vaults/ArcaQueueHandlerV1.sol:16",
        "version": {
          "withMetadata": "18f935ccf6fdf6e89890b4014055dc1642dd0220e08461a576db5b0f2729afee",
          "withoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14",
          "linkedWithoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14"
        },
        "inherit": [
          "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "getQueuedToken(uint8)",
          "()",
          "initialize()",
          "reduceQueuedToken(uint256,uint8)",
          "getPendingDepositRequests()",
          "getDepositQueueTrailingSlice()",
          "getPendingWithdrawRequests()",
          "getWithdrawQueueTrailingSlice()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getWithdrawQueueLength()",
          "getPendingDepositsCount()",
          "getPendingWithdrawsCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositQueue",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_struct(DepositRequest)5732_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:24"
            },
            {
              "label": "withdrawQueue",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:25"
            },
            {
              "label": "depositQueueStart",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:26"
            },
            {
              "label": "withdrawQueueStart",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:27"
            },
            {
              "label": "_queuedTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_uint256)40_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:219"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(DepositRequest)5732_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)40_storage": {
              "label": "uint256[40]",
              "numberOfBytes": "1280"
            },
            "t_enum(Type)4917": {
              "label": "enum TokenValidator.Type",
              "members": [
                "TokenX",
                "TokenY"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(DepositRequest)5732_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenType",
                  "type": "t_enum(Type)4917",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(WithdrawRequest)5741_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "shares",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaRewardClaimerV1.sol:ArcaRewardClaimerV1": {
        "src": "contracts/vaults/ArcaRewardClaimerV1.sol:30",
        "version": {
          "withMetadata": "d48a8679ca6b6516cbf77f4cc91e34cf2f2c1aad0fd6321042284d157d674ba2",
          "withoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6",
          "linkedWithoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6"
        },
        "inherit": [
          "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address,address,address,address,address,uint256,address,address)",
          "getTotalCompounded(uint8)",
          "setMinSwapAmount(uint256)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setRewarder(address)",
          "claimAndCompoundRewards()",
          "getVaultBinIds()",
          "getExpectedSwapOutput(uint256,address)",
          "claimRewards(uint256[],address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_rewarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:39"
            },
            {
              "label": "_rewardToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:40"
            },
            {
              "label": "_feeManager",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:41"
            },
            {
              "label": "minSwapAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:42"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_contract(IERC20)2096)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:43"
            },
            {
              "label": "nativeToken",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:46"
            },
            {
              "label": "metroToTokenPaths",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_struct(Path)24970_storage)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:49"
            },
            {
              "label": "metroToNativePath",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Path)24970_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:50"
            },
            {
              "label": "totalCompounded",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:53"
            },
            {
              "label": "_lbpContract",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:55"
            },
            {
              "label": "_lbpContractUSD",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:56"
            },
            {
              "label": "_lpAMM",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:57"
            },
            {
              "label": "_lbRouter",
              "offset": 0,
              "slot": "21",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:58"
            },
            {
              "label": "idSlippage",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:59"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "23",
              "type": "t_array(t_uint256)30_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:434"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)2096)dyn_storage": {
              "label": "contract IERC20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_enum(Version)24920)dyn_storage": {
              "label": "enum ILBRouter.Version[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Path)24970_storage)2_storage": {
              "label": "struct ILBRouter.Path[2]",
              "numberOfBytes": "192"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)30_storage": {
              "label": "uint256[30]",
              "numberOfBytes": "960"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(Version)24920": {
              "label": "enum ILBRouter.Version",
              "members": [
                "V1",
                "V2",
                "V2_1",
                "V2_2"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(Path)24970_storage": {
              "label": "struct ILBRouter.Path",
              "members": [
                {
                  "label": "pairBinSteps",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "versions",
                  "type": "t_array(t_enum(Version)24920)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenPath",
                  "type": "t_array(t_contract(IERC20)2096)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaTestnetV1.sol:ArcaTestnetV1": {
        "src": "contracts/vaults/ArcaTestnetV1.sol:43",
        "version": {
          "withMetadata": "fe5fd3eef9a92873f67b3f9100df1ecfa290b034c1cfc57b26db4d4139f3c61e",
          "withoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd",
          "linkedWithoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd"
        },
        "inherit": [
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint16,uint256,uint256,address,address,address,address,address,address)",
          "tokenBalance(uint8)",
          "totalSupply(uint8)",
          "getPricePerFullShare(uint8)",
          "depositAll(uint8)",
          "depositToken(uint256,uint8)",
          "withdrawAll()",
          "withdrawTokenShares(uint256[2])",
          "withdraw(uint256)",
          "setRewarder(address)",
          "rebalance((int256[],uint256[],uint256[],uint256[],uint256[],uint256,uint256,address,address,uint256,bool))",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setMinSwapAmount(uint256)",
          "inCaseTokensGetStuck(address)",
          "balanceSharesCombined(address)",
          "getShares(address,uint8)",
          "getUserShares(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "vaultConfig",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(VaultConfig)8652_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:74"
            },
            {
              "label": "feeManager",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:75"
            },
            {
              "label": "queueHandler",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IArcaQueueHandlerV1)5646",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:76"
            },
            {
              "label": "rewardClaimer",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IArcaRewardClaimerV1)5718",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:77"
            },
            {
              "label": "lastAddLiquidityBinIds",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:80"
            },
            {
              "label": "totalShares",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:83"
            },
            {
              "label": "shares",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:84"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_uint256)35_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:691"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)35_storage": {
              "label": "uint256[35]",
              "numberOfBytes": "1120"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaQueueHandlerV1)5646": {
              "label": "contract IArcaQueueHandlerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaRewardClaimerV1)5718": {
              "label": "contract IArcaRewardClaimerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_struct(VaultConfig)8652_storage": {
              "label": "struct ArcaTestnetV1.VaultConfig",
              "members": [
                {
                  "label": "tokens",
                  "type": "t_array(t_contract(IERC20)2096)2_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "binStep",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amountMins",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lbRouter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lbpAMM",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "lbpContract",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2cddd30dd1589b472ba8ad102d2de8cfa79690fdfbe305adc880fde647d69b81",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "ef1e676f19969f85a7821c4a06f4a977ca3acbba815ed68ce56e632c2bb74094",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "7ab81492d29bdeda8d25be994ea83ce9692409bd82dc39f16f816a5956dd058e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "36ae28cea8907b972d4b2abb56ea084e392affafab0814d57d68a1eb2480b780",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "d7f01f204c2ba3668cdb41b4d4c0601cdf71b0c4d25b085f2fe980de9f59764d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "dc6ea4f3f50982240964d716942bc0f7fa56054bf46b06907cb65cbcf38a3c8f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "b8d1bec08f899acb8947d02acca94c21236ebcc9e944604484caf0f2e15e29f4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "7019851d09fb231e54134833ce6c4ad6867dabd8e30a38985e5fd4f57db8e924",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "43473962742e4c5d36b1fd3a556053d03839b6481d6079583bdb53c1efe9fe09",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "4acd704fa58734510fc96756d7baf53e621fb738aa6c971ee5da2de1e94bb175",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "dea6c0d13c30ca26cd23518c865c5fae5e1c5d5ede045609a6e2439b6de60b49",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "9bff36686e9bfa56639d842c887cf722d56dcf607ac21498bbd50e7e9ae328e8",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IJoeFactory.sol:IJoeFactory": {
        "src": "lib/joe-v2/src/interfaces/IJoeFactory.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBFactory.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setLBHooksParametersOnPair(address,address,uint16,bytes32,bytes)",
          "removeLBHooksOnPair(address,address,uint16)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks": {
        "src": "lib/joe-v2/src/interfaces/ILBHooks.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBPair()",
          "isLinked()",
          "onHooksSet(bytes32,bytes)",
          "beforeSwap(address,address,bool,bytes32)",
          "afterSwap(address,address,bool,bytes32)",
          "beforeFlashLoan(address,address,bytes32)",
          "afterFlashLoan(address,address,bytes32,bytes32)",
          "beforeMint(address,address,bytes32[],bytes32)",
          "afterMint(address,address,bytes32[],bytes32)",
          "beforeBurn(address,address,address,uint256[],uint256[])",
          "afterBurn(address,address,address,uint256[],uint256[])",
          "beforeBatchTransferFrom(address,address,address,uint256[],uint256[])",
          "afterBatchTransferFrom(address,address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:ILBLegacyFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "MIN_BIN_STEP()",
          "MAX_BIN_STEP()",
          "MAX_PROTOCOL_SHARE()",
          "LBPairImplementation()",
          "getNumberOfQuoteAssets()",
          "getQuoteAsset(uint256)",
          "isQuoteAsset(address)",
          "feeRecipient()",
          "flashLoanFee()",
          "creationUnlocked()",
          "allLBPairs(uint256)",
          "getNumberOfLBPairs()",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint16)",
          "getAllBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint256,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint16)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "setFactoryLockedState(bool)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:ILBLegacyPair": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "tokenX()",
          "tokenY()",
          "factory()",
          "getReservesAndId()",
          "getGlobalFees()",
          "getOracleParameters()",
          "getOracleSampleFrom(uint256)",
          "feeParameters()",
          "findFirstNonEmptyBinId(uint24,bool)",
          "getBin(uint24)",
          "pendingFees(address,uint256[])",
          "swap(bool,address)",
          "flashLoan(address,address,uint256,bytes)",
          "mint(uint256[],uint256[],uint256[],address)",
          "burn(uint256[],uint256[],address)",
          "increaseOracleLength(uint16)",
          "collectFees(address,uint256[])",
          "collectProtocolFees()",
          "setFeesParameters(bytes32)",
          "forceDecay()",
          "initialize(address,address,uint24,uint16,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:ILBLegacyRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "wavax()",
          "oldFactory()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint256,bool)",
          "getSwapOut(address,uint256,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "addLiquidityAVAX((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityAVAX(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapAVAXForExactTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "totalSupply(uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "safeTransferFrom(address,address,uint256,uint256)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBPair.sol:ILBPair": {
        "src": "lib/joe-v2/src/interfaces/ILBPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "implementation()",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getLBHooksParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setHooksParameters(bytes32,bytes)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBRouter.sol:ILBRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBRouter.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getFactoryV2_1()",
          "getLegacyFactory()",
          "getV1Factory()",
          "getLegacyRouter()",
          "getWNATIVE()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint128,bool)",
          "getSwapOut(address,uint128,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapNATIVEForExactTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken": {
        "src": "lib/joe-v2/src/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IWNATIVE.sol:IWNATIVE": {
        "src": "lib/joe-v2/src/interfaces/IWNATIVE.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/libraries/Hooks.sol:Hooks": {
        "src": "lib/joe-v2/src/libraries/Hooks.sol:10",
        "version": {
          "withMetadata": "a779a19a3e24a601b4b68aacc3ca7979573821e23c72ef9241b65486a044e462",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "cfc6a26ea5387b588b31db86bc5806f478ffcb78eb5a7ba6b19b45e8b06f8b2f",
          "withoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b",
          "linkedWithoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b"
        },
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "8294a457a80209145b3b607e80054c4e96b8fafb319f1362deb8f2dc2f37726f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "4fa5b16723fcb33d24077a2a25e310b875a51c394bc6e300f69f779de9e1dd58",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "593e3b251824297aad3f0559c419f900bf6bb70891ed9a7c8de3dc2eeddd1a9f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "91f878e54f9e03c1669e92a975c92a4d194c12a06651b3d4d5c018a032cd6b1e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "d986ca163f34119923cb48da0229f59ecef5cb83010cf14516bff542d51dcabd",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "e8cca26f7a8c70714472a11f5cbd24bc02200e6d26d4ddcd05e509342134beb0",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "contracts-metropolis/src/BaseVault.sol:BaseVault": {
        "src": "contracts-metropolis/src/BaseVault.sol:31",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "()",
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVault",
            "src": "contracts-metropolis/src/BaseVault.sol:122"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/BaseVault.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/BaseVault.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleHelper.sol:OracleHelper": {
        "src": "contracts-metropolis/src/OracleHelper.sol:11",
        "version": {
          "withMetadata": "839e4c8e07153e76e34e644e8944441438d06482f758dcdd09c58673db8353d7",
          "withoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612",
          "linkedWithoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address,address,address,address,uint8,uint8)",
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setSequenzerUptimeFeed(address)",
          "getOracleParameters()",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setTwapParams(bool,uint40,uint256)",
          "getDataFeedX()",
          "getDataFeedY()",
          "getSequenzerUptimeFeed()",
          "getPrice()",
          "getValueInY(uint256,uint256,uint256)",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleHelper",
            "src": "contracts-metropolis/src/OracleHelper.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pair",
            "src": "contracts-metropolis/src/OracleHelper.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedX",
            "src": "contracts-metropolis/src/OracleHelper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedY",
            "src": "contracts-metropolis/src/OracleHelper.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsX",
            "src": "contracts-metropolis/src/OracleHelper.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsY",
            "src": "contracts-metropolis/src/OracleHelper.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/OracleHelper.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:36"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:39"
            },
            {
              "label": "_oracleParameters",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(OracleParameters)9185_storage",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:42"
            },
            {
              "label": "_sequencerUptimeFeed",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IAggregatorV3)8657",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAggregatorV3)8657": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_struct(OracleParameters)9185_storage": {
              "label": "struct IOracleHelper.OracleParameters",
              "members": [
                {
                  "label": "minPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "heartbeatX",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "heartbeatY",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "2"
                },
                {
                  "label": "deviationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "twapPriceCheckEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "twapInterval",
                  "type": "t_uint40",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleRewardVault.sol:OracleRewardVault": {
        "src": "contracts-metropolis/src/OracleRewardVault.sol:23",
        "version": {
          "withMetadata": "38a1a7e9c79589a1f1a0e762ec767b39ad7a4e7fe7762be1635f85bca77aaa4a",
          "withoutMetadata": "3ab9ee75b564e1df3fac9b1ed04fd9292e9125594561c2529fbbd0c8dca23538",
          "linkedWithoutMetadata": "3ab9ee75b564e1df3fac9b1ed04fd9292e9125594561c2529fbbd0c8dca23538"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault",
          "contracts-metropolis/src/OracleVault.sol:OracleVault",
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/Precision.sol:Precision",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper"
        ],
        "methods": [
          "(address)",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleRewardVault",
            "src": "contracts-metropolis/src/OracleRewardVault.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            },
            {
              "label": "_phantomShareSupply",
              "offset": 0,
              "slot": "157",
              "type": "t_uint256",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:31"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "158",
              "type": "t_mapping(t_address,t_struct(User)9276_storage)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:34"
            },
            {
              "label": "tokenCached",
              "offset": 0,
              "slot": "159",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:36"
            },
            {
              "label": "cachedRewardTokens",
              "offset": 0,
              "slot": "160",
              "type": "t_array(t_struct(Reward)9284_storage)dyn_storage",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Reward)9284_storage)dyn_storage": {
              "label": "struct IOracleRewardVault.Reward[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)25800": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)9276_storage)": {
              "label": "mapping(address => struct IOracleRewardVault.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Reward)9284_storage": {
              "label": "struct IOracleRewardVault.Reward",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)25800",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "accRewardsPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)9276_storage": {
              "label": "struct IOracleRewardVault.User",
              "members": [
                {
                  "label": "phantomAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebtPerToken",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleVault.sol:OracleVault": {
        "src": "contracts-metropolis/src/OracleVault.sol:31",
        "version": {
          "withMetadata": "23ca1aa7b3d62c4f82cea522c3d708dd6c13309397df899ee7073b31135aa928",
          "withoutMetadata": "4683b9563170fb7428ed3014778f6a83d43aad4ba76e3999415d28ba9b7de3e0",
          "linkedWithoutMetadata": "4683b9563170fb7428ed3014778f6a83d43aad4ba76e3999415d28ba9b7de3e0"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address)",
          "getPrice()",
          "getOracleParameters()",
          "getOracleHelper()",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleVault",
            "src": "contracts-metropolis/src/OracleVault.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/Strategy.sol:Strategy": {
        "src": "contracts-metropolis/src/Strategy.sol:41",
        "version": {
          "withMetadata": "d226a14edd0cc75ed91a065e30cd8ebe1a3036e4a7fe3d7d5d9b06a8c079927f",
          "withoutMetadata": "963c99035563dea71ca344ade02f63319d2529d055dd1157f07d1b878d50bb71",
          "linkedWithoutMetadata": "963c99035563dea71ca344ade02f63319d2529d055dd1157f07d1b878d50bb71"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IStrategy.sol:IStrategy",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "forge-std/console.sol:console",
          "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations",
          "contracts-metropolis/src/libraries/Hooks.sol:Hooks"
        ],
        "methods": [
          "()",
          "()",
          "(address,uint256)",
          "initialize()",
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "getPendingAumAnnualFee()",
          "getMaxRange()",
          "withdrawAll()",
          "emergencyWidthdrawRange(uint24,uint24)",
          "rebalance(uint24,uint24,uint24,uint24,uint256,uint256,bytes)",
          "harvestRewards()",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "setRebalanceCoolDown(uint256)",
          "hasRewards()",
          "hasExtraRewards()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Strategy",
            "src": "contracts-metropolis/src/Strategy.sol:123"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_MAX_RANGE",
            "src": "contracts-metropolis/src/Strategy.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/Strategy.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_lowerRange",
              "offset": 0,
              "slot": "51",
              "type": "t_uint24",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:66"
            },
            {
              "label": "_upperRange",
              "offset": 3,
              "slot": "51",
              "type": "t_uint24",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:67"
            },
            {
              "label": "_aumAnnualFee",
              "offset": 6,
              "slot": "51",
              "type": "t_uint16",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:68"
            },
            {
              "label": "_lastRebalance",
              "offset": 8,
              "slot": "51",
              "type": "t_uint64",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:69"
            },
            {
              "label": "_pendingAumAnnualFee",
              "offset": 16,
              "slot": "51",
              "type": "t_uint16",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:70"
            },
            {
              "label": "_pendingAumAnnualFeeSet",
              "offset": 18,
              "slot": "51",
              "type": "t_bool",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:71"
            },
            {
              "label": "_rebalanceCoolDown",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:72"
            },
            {
              "label": "_operator",
              "offset": 0,
              "slot": "53",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/VaultFactory.sol:VaultFactory": {
        "src": "contracts-metropolis/src/VaultFactory.sol:38",
        "version": {
          "withMetadata": "478a279d78c47aca115b0d3df1ae29543af20b2435cc90e66399a5874ebe8068",
          "withoutMetadata": "a043617c424f032b62c22800171d9832b697e93c59c2cdf48f44047ec055ad39",
          "linkedWithoutMetadata": "a043617c424f032b62c22800171d9832b697e93c59c2cdf48f44047ec055ad39"
        },
        "inherit": [
          "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [
          "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "joe-v2/libraries/ImmutableClone.sol:ImmutableClone"
        ],
        "methods": [
          "(address)",
          "initialize4(address,uint256)",
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "isPairWhitelisted(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setPairWhitelist(address[],bool)",
          "setTransferIgnoreList(address[])",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createMarketMakerOracleVault(address,uint16)",
          "getCreationFee()",
          "getVaultsByMarketMaker(address)",
          "getDefaultMarketMakerAumFee()",
          "getTransferIgnoreList()",
          "setPriceLens(address)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "setRebalanceCoolDown(address,uint256)",
          "recoverERC20(address,address,address,uint256)",
          "setCreationFee(uint256)",
          "setDepositToWithdrawCooldown(uint16)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultFactory",
            "src": "contracts-metropolis/src/VaultFactory.sol:104"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/VaultFactory.sol:43"
          },
          {
            "kind": "missing-initializer",
            "src": "contracts-metropolis/src/VaultFactory.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            },
            {
              "label": "_vaults",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_enum(VaultType)9688,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:45"
            },
            {
              "label": "_strategies",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_enum(StrategyType)9691,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:46"
            },
            {
              "label": "_vaultType",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_enum(VaultType)9688)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:48"
            },
            {
              "label": "_strategyType",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_address,t_enum(StrategyType)9691)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:49"
            },
            {
              "label": "_vaultImplementation",
              "offset": 0,
              "slot": "155",
              "type": "t_mapping(t_enum(VaultType)9688,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:51"
            },
            {
              "label": "_strategyImplementation",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_enum(StrategyType)9691,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:52"
            },
            {
              "label": "_feeRecipient",
              "offset": 0,
              "slot": "157",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:54"
            },
            {
              "label": "_defaultOperator",
              "offset": 0,
              "slot": "158",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:55"
            },
            {
              "label": "_priceLens",
              "offset": 0,
              "slot": "159",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:57"
            },
            {
              "label": "_creationFee",
              "offset": 0,
              "slot": "160",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:59"
            },
            {
              "label": "_vaultsByMarketMaker",
              "offset": 0,
              "slot": "161",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:62"
            },
            {
              "label": "_marketMakerByVaults",
              "offset": 0,
              "slot": "162",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:65"
            },
            {
              "label": "_vaultSettings",
              "offset": 0,
              "slot": "163",
              "type": "t_mapping(t_address,t_struct(RebalanceSetting)9706_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:68"
            },
            {
              "label": "_makerVaults",
              "offset": 0,
              "slot": "164",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:71"
            },
            {
              "label": "_defaultMMAumFee",
              "offset": 0,
              "slot": "165",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:74"
            },
            {
              "label": "_transferIgnoreList",
              "offset": 0,
              "slot": "166",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:78"
            },
            {
              "label": "_defaultSequencerUptimeFeed",
              "offset": 0,
              "slot": "167",
              "type": "t_contract(IAggregatorV3)8657",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:81"
            },
            {
              "label": "_pairWhitelist",
              "offset": 0,
              "slot": "168",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:84"
            },
            {
              "label": "_depositToWithdrawCooldown",
              "offset": 0,
              "slot": "169",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:87"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "170",
              "type": "t_array(t_uint256)36_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:805"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)36_storage": {
              "label": "uint256[36]",
              "numberOfBytes": "1152"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IAggregatorV3)8657": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_enum(StrategyType)9691": {
              "label": "enum IVaultFactory.StrategyType",
              "members": [
                "None",
                "Default"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(VaultType)9688": {
              "label": "enum IVaultFactory.VaultType",
              "members": [
                "None",
                "Simple",
                "Oracle"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(StrategyType)9691)": {
              "label": "mapping(address => enum IVaultFactory.StrategyType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(VaultType)9688)": {
              "label": "mapping(address => enum IVaultFactory.VaultType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RebalanceSetting)9706_storage)": {
              "label": "mapping(address => struct IVaultFactory.RebalanceSetting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)9691,t_address)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)9691,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)9688,t_address)": {
              "label": "mapping(enum IVaultFactory.VaultType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)9688,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.VaultType => address[])",
              "numberOfBytes": "32"
            },
            "t_struct(RebalanceSetting)9706_storage": {
              "label": "struct IVaultFactory.RebalanceSetting",
              "members": [
                {
                  "label": "newLower",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "newUpper",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "desiredActiveId",
                  "type": "t_uint24",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "slippageActiveId",
                  "type": "t_uint24",
                  "offset": 9,
                  "slot": "0"
                },
                {
                  "label": "amountX",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountY",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "distributions",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault": {
        "src": "contracts-metropolis/src/interfaces/IBaseVault.sol:16",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "initialize(string,string)",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IHooksRewarder.sol:IHooksRewarder": {
        "src": "contracts-metropolis/src/interfaces/IHooksRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "getExtraHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/ILBPairHooks.sol:ILBPairHooks": {
        "src": "contracts-metropolis/src/interfaces/ILBPairHooks.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOneInchRouter.sol:IOneInchRouter": {
        "src": "contracts-metropolis/src/interfaces/IOneInchRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,(address,address,address payable,address payable,uint256,uint256,uint256),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelper.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setSequenzerUptimeFeed(address)",
          "setTwapParams(bool,uint40,uint256)",
          "checkPriceInDeviation()",
          "getPrice()",
          "getDataFeedX()",
          "getDataFeedY()",
          "getValueInY(uint256,uint256,uint256)",
          "getOracleParameters()",
          "getSequenzerUptimeFeed()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "claim()",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleVault.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getPrice()",
          "getOracleParameters()",
          "checkPriceInDeviation()",
          "getOracleHelper()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts-metropolis/src/interfaces/IStrategy.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getPendingAumAnnualFee()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "hasRewards()",
          "hasExtraRewards()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getMaxRange()",
          "initialize()",
          "withdrawAll()",
          "rebalance(uint24,uint24,uint24,uint24,uint256,uint256,bytes)",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "harvestRewards()",
          "setRebalanceCoolDown(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts-metropolis/src/interfaces/IVaultFactory.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "getTransferIgnoreList()",
          "isPairWhitelisted(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setPairWhitelist(address[],bool)",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "recoverERC20(address,address,address,uint256)",
          "setTransferIgnoreList(address[])",
          "setRebalanceCoolDown(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Constants.sol:Constants": {
        "src": "contracts-metropolis/src/libraries/Constants.sol:8",
        "version": {
          "withMetadata": "465cb4f370a23d642fced738e3cc381f61c3699c629f3e3a1dead012cd3cb8c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "eaddac53aa725b14bcae772e734937cc9936b5d4fba4294a3e7707e36f52800a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Math.sol:Math": {
        "src": "contracts-metropolis/src/libraries/Math.sol:10",
        "version": {
          "withMetadata": "3c98cece8c8a46e1abf21ade1a902f8fcf56f8e761047b2faca769aa3e0e2aea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Precision.sol:Precision": {
        "src": "contracts-metropolis/src/libraries/Precision.sol:6",
        "version": {
          "withMetadata": "d68d48650d6962118397fc577feb7142f8b19406e574d4251e9f7699a32ad05c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts-metropolis/src/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper": {
        "src": "contracts-metropolis/src/libraries/TokenHelper.sol:10",
        "version": {
          "withMetadata": "895a70e1d0fa1a4072ae8c7f82b0d68dba82d2c9ebbaa80d67c41e4fd0a7c0b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/utils/OracleLensAggregator.sol:OracleLensAggregator": {
        "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:9",
        "version": {
          "withMetadata": "7900acc47d50582f75fdbb9bc94e569f8266e43169f54d9721886c970a63d11f",
          "withoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50",
          "linkedWithoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3",
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleLensAggregator",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lens",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "d9f824a5d6934bd814e15da2d15cf325324b49d061114ee14cc942e49c620f3c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "e4659fd0c435a789a3df9150d8aacb451558f94bd3a64ba6058a11cb4eaad3ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "fcaa014161ea1d1fe52636e09c1d5a3dc670196ca57eef93cd1d157371518d8d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "f4a7854939b2e7a42626280047f53bfb869e3db784676907a8b4278514bdb99a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "a72a3058f1898729f7626b96ecbdd1a57e81150e0daf34921e03d4560f8384ee",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "6b32caed1e399106b4d28932712dab9e750fffbdb4605c6551450679f11ae65e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "327e9169a8b32c132e0301815a7dedd22ce152e9c4cb97123e4e187208e96e05",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "5fbe0c71f889e77f912cfba608a81bba5bde8150479cf65a86adbdcded3890c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "220ca904f85a0ee099fef8931998653e4f6f26bb0e191f25c02cd66af6d3d343",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "2c6dff62a1184c3dc21f43a2b59e4ab6de6477b68965bce6c12aa72ad9c1c164",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "f2b5fd24abfc28c3d62a171fe5ee1a51771254b076f011b8db17af30fd7c6546",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "e57896c3ccba1cf2c5c1f6f2114afb51c0f69ee23a3c160c842306b488dacb68",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "13f6745e624eec422c812f88c50338fcea76d7c2f7244646bffe9f0b4abbc303",
          "withoutMetadata": "ed5b4de26565da38935df3308174ea9b58934a099d03e12be32a592e9db68757",
          "linkedWithoutMetadata": "ed5b4de26565da38935df3308174ea9b58934a099d03e12be32a592e9db68757"
        },
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "22d8660aef962d2e28d9fda041bfb048bf96fc13c0ed32a12cb0cd16e43cc1ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "22244778d2ca41863fefabae120d4604e5e9805f09721a34cdc3b871a5db7df3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "513e246607ed328f11c6d1a011122f4e4c736120e1f5d4e9da93bc906f2ac511",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "025cd388bece95c86767a1cb2f5d773a161baeffee94866c990c81cacf2937e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4b1cf89a6486894887a976012687b8ebf2da8455b4b415ec04675adf36a446dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "f77559981d0b96d541d2a6580332851281435c7178d4462b27eacc32300840a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "65e1935f897247c753735e1c48d0897487a9f52320ebcb0d6e823899b9da3084",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1ba720802922ae6402adf9cab77ff8e452c5005b9dc6e1138ac3464b37bc076f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0293c1f81927a4d53228f0a9048ef3dd42e60d2e735f5bc58259a249f78d386a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "f65e829a5f483562c42ccaa4bb29e4ac7b3af82166d8703708b4629e6970301d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "8de89f3ed8fd459008581b5d7b8f9cc67fed6ad541b9571f3d703d015f72be69",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ArcaFeeManagerV1.sol:ArcaFeeManagerV1": {
        "src": "contracts/ArcaFeeManagerV1.sol:12",
        "version": {
          "withMetadata": "81f50ef8067e96d3be030a907ab703a486eafa02a1c46bc3024e6540e29dadc7",
          "withoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c",
          "linkedWithoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c"
        },
        "inherit": [
          "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "setFees(uint256,uint256,uint256)",
          "setFeeRecipient(address)",
          "getDepositFee()",
          "getWithdrawFee()",
          "getPerformanceFee()",
          "getFeeRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositFee",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:17"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:18"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:19"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/Staking/MetroShadowStaking.sol:MetroShadowStaking": {
        "src": "contracts/Staking/MetroShadowStaking.sol:15",
        "version": {
          "withMetadata": "99ab9e55560bf8d3ca8c72b1fcf5167b10a22584301464bd9e2bb4e5f6a6a78c",
          "withoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed",
          "linkedWithoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "stakeMetro(uint256,uint256)",
          "emergencyExit(uint256)",
          "unlockMetro(uint256)",
          "stakeX33(uint256)",
          "unstakeX33(uint256)",
          "getUserMetroPositions(address)",
          "getUserX33Positions(address)",
          "calculateCurrentPenalty(address,uint256)",
          "getAvailableExitCapacity()",
          "getPendingRebaseRewards(address)",
          "updateStakingTier(uint256,uint256,uint256,uint256)",
          "triggerRebaseDistribution()",
          "emergencyWithdraw(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MetroShadowStaking",
            "src": "contracts/Staking/MetroShadowStaking.sol:108"
          },
          {
            "kind": "state-variable-immutable",
            "name": "METRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "X33_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NMETRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NSHADOW_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "stakingTiers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:35"
            },
            {
              "label": "userMetroPositions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:57"
            },
            {
              "label": "userX33Positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:58"
            },
            {
              "label": "piggyBankBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:61"
            },
            {
              "label": "totalPendingRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:62"
            },
            {
              "label": "totalMetroStaked",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:65"
            },
            {
              "label": "totalNMetroMinted",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:66"
            },
            {
              "label": "totalX33Staked",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:67"
            },
            {
              "label": "totalNShadowMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:68"
            },
            {
              "label": "userRebaseIndex",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:71"
            },
            {
              "label": "globalRebaseIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:72"
            },
            {
              "label": "rebaseRewardsPerToken",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(X33StakePosition)3734_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.MetroStakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.X33StakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)": {
              "label": "mapping(uint256 => struct MetroShadowStaking.StakingTier)",
              "numberOfBytes": "32"
            },
            "t_struct(MetroStakePosition)3725_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nMetroAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tierId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rebaseRewardsReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(StakingTier)3705_storage": {
              "label": "struct MetroShadowStaking.StakingTier",
              "members": [
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "penaltyRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(X33StakePosition)3734_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nShadowAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/TokenTypes.sol:TokenValidator": {
        "src": "contracts/TokenTypes.sol:5",
        "version": {
          "withMetadata": "a1be82b276d007e36cdbe3561db35a73c8c1eebdae96bab379231a09c75ea397",
          "withoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd",
          "linkedWithoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/deployment/ArcaVaultRegistry.sol:ArcaVaultRegistry": {
        "src": "contracts/deployment/ArcaVaultRegistry.sol:12",
        "version": {
          "withMetadata": "f18d6ba9255a90a55d5bb639de040356eaa208df86b82a2f82348864b569d14b",
          "withoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91",
          "linkedWithoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "registerVault(address,address,address,address,address,address,string,string,uint256,bool)",
          "deactivateVault(address,string)",
          "activateVault(address)",
          "getVaultsByTokenPair(address,address)",
          "getActiveVaults()",
          "getVaultCount()",
          "getVaultInfo(address)",
          "getVaultDetails(address)",
          "getVaultComponents(address)",
          "isActiveVault(address)",
          "getDeploymentInfo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcaVaultRegistry",
            "src": "contracts/deployment/ArcaVaultRegistry.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "vaultInfo",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(VaultInfo)4953_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:29"
            },
            {
              "label": "vaultList",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:30"
            },
            {
              "label": "isRegisteredVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:31"
            },
            {
              "label": "vaultsByTokenPair",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(VaultInfo)4953_storage)": {
              "label": "mapping(address => struct ArcaVaultRegistry.VaultInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
              "label": "mapping(bytes32 => address[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(VaultInfo)4953_storage": {
              "label": "struct ArcaVaultRegistry.VaultInfo",
              "members": [
                {
                  "label": "vault",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardClaimer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "queueHandler",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeManager",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tokenX",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "tokenY",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "deploymentTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deployer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "9"
                },
                {
                  "label": "isProxy",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1": {
        "src": "contracts/interfaces/IArcaFeeManagerV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "BASIS_POINTS()",
          "getDepositFee()",
          "getFeeRecipient()",
          "getPerformanceFee()",
          "getWithdrawFee()",
          "setFeeRecipient(address)",
          "setFees(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1": {
        "src": "contracts/interfaces/IArcaQueueHandlerV1.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositQueueStart()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getDepositQueueTrailingSlice()",
          "getPendingDepositRequests()",
          "getPendingDepositsCount()",
          "getPendingWithdrawRequests()",
          "getPendingWithdrawsCount()",
          "getQueuedToken(uint8)",
          "getWithdrawQueueLength()",
          "getWithdrawQueueTrailingSlice()",
          "reduceQueuedToken(uint256,uint8)",
          "withdrawQueueStart()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1": {
        "src": "contracts/interfaces/IArcaRewardClaimerV1.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimAndCompoundRewards()",
          "claimRewards(uint256[],address)",
          "getExpectedSwapOutput(uint256,address)",
          "getVaultBinIds()",
          "idSlippage()",
          "minSwapAmount()",
          "nativeToken()",
          "setMinSwapAmount(uint256)",
          "setRewarder(address)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible": {
        "src": "contracts/interfaces/IDepositWithdrawCompatible.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:ILBHooksBaseRewarder": {
        "src": "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:11",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks"
        ],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "setDeltaBins(int24,int24)",
          "sweep(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBRouter.sol:ILBRouter": {
        "src": "contracts/interfaces/Metropolis/ILBRouter.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity((address,address,uint16,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/IPair.sol:IPair": {
        "src": "contracts/interfaces/Metropolis/IPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "feeAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:6",
        "version": {
          "withMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "withoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "linkedWithoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,address)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/mocks/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBHooksBaseRewarder.sol:MockLBHooksBaseRewarder": {
        "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:6",
        "version": {
          "withMetadata": "a306dfdd90078adb991ae056fe11ee0d0e049ecd09318d058814d39710d3daf9",
          "withoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef",
          "linkedWithoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setRewardToken(address)",
          "setClaimAmount(uint256)",
          "setShouldFail(bool)",
          "claim(address,uint256[])",
          "pendingRewards(address,uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:7"
            },
            {
              "label": "claimAmount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBPair.sol:MockLBPair": {
        "src": "contracts/mocks/MockLBPair.sol:6",
        "version": {
          "withMetadata": "32abfc4d5ff5d1173883af8afae445a83564c786bc964bc6ea85618bf4647f0c",
          "withoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47",
          "linkedWithoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint16)",
          "getActiveId()",
          "setActiveId(uint24)",
          "getBinStep()",
          "getTokenX()",
          "getTokenY()",
          "getPriceFromId(uint24)",
          "getReserves()",
          "getLBHooksParameters()",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "balanceOf(address,uint256)",
          "totalSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "activeId",
            "src": "contracts/mocks/MockLBPair.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "binStep",
            "src": "contracts/mocks/MockLBPair.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "activeId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:7"
            },
            {
              "label": "binStep",
              "offset": 3,
              "slot": "0",
              "type": "t_uint16",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:8"
            },
            {
              "label": "tokenX",
              "offset": 5,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:9"
            },
            {
              "label": "tokenY",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:10"
            },
            {
              "label": "reserveX",
              "offset": 0,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:11"
            },
            {
              "label": "reserveY",
              "offset": 16,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:12"
            },
            {
              "label": "userLiquidity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:15"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBRouter.sol:MockLBRouter": {
        "src": "contracts/mocks/MockLBRouter.sol:7",
        "version": {
          "withMetadata": "7fec49ead98bc2fe355568292430616d863b3a035adbb870e35257f2dea5876f",
          "withoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0",
          "linkedWithoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setSwapOutputForToken(address,uint256)",
          "setShouldFail(bool)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "tokenSwapOutputs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaQueueHandlerV1.sol:ArcaQueueHandlerV1": {
        "src": "contracts/vaults/ArcaQueueHandlerV1.sol:16",
        "version": {
          "withMetadata": "18f935ccf6fdf6e89890b4014055dc1642dd0220e08461a576db5b0f2729afee",
          "withoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14",
          "linkedWithoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14"
        },
        "inherit": [
          "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "getQueuedToken(uint8)",
          "()",
          "initialize()",
          "reduceQueuedToken(uint256,uint8)",
          "getPendingDepositRequests()",
          "getDepositQueueTrailingSlice()",
          "getPendingWithdrawRequests()",
          "getWithdrawQueueTrailingSlice()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getWithdrawQueueLength()",
          "getPendingDepositsCount()",
          "getPendingWithdrawsCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositQueue",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_struct(DepositRequest)5732_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:24"
            },
            {
              "label": "withdrawQueue",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:25"
            },
            {
              "label": "depositQueueStart",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:26"
            },
            {
              "label": "withdrawQueueStart",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:27"
            },
            {
              "label": "_queuedTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_uint256)40_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:219"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(DepositRequest)5732_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)40_storage": {
              "label": "uint256[40]",
              "numberOfBytes": "1280"
            },
            "t_enum(Type)4917": {
              "label": "enum TokenValidator.Type",
              "members": [
                "TokenX",
                "TokenY"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(DepositRequest)5732_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenType",
                  "type": "t_enum(Type)4917",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(WithdrawRequest)5741_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "shares",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaRewardClaimerV1.sol:ArcaRewardClaimerV1": {
        "src": "contracts/vaults/ArcaRewardClaimerV1.sol:30",
        "version": {
          "withMetadata": "d48a8679ca6b6516cbf77f4cc91e34cf2f2c1aad0fd6321042284d157d674ba2",
          "withoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6",
          "linkedWithoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6"
        },
        "inherit": [
          "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address,address,address,address,address,uint256,address,address)",
          "getTotalCompounded(uint8)",
          "setMinSwapAmount(uint256)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setRewarder(address)",
          "claimAndCompoundRewards()",
          "getVaultBinIds()",
          "getExpectedSwapOutput(uint256,address)",
          "claimRewards(uint256[],address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_rewarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:39"
            },
            {
              "label": "_rewardToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:40"
            },
            {
              "label": "_feeManager",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:41"
            },
            {
              "label": "minSwapAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:42"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_contract(IERC20)2096)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:43"
            },
            {
              "label": "nativeToken",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:46"
            },
            {
              "label": "metroToTokenPaths",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_struct(Path)24970_storage)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:49"
            },
            {
              "label": "metroToNativePath",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Path)24970_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:50"
            },
            {
              "label": "totalCompounded",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:53"
            },
            {
              "label": "_lbpContract",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:55"
            },
            {
              "label": "_lbpContractUSD",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:56"
            },
            {
              "label": "_lpAMM",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:57"
            },
            {
              "label": "_lbRouter",
              "offset": 0,
              "slot": "21",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:58"
            },
            {
              "label": "idSlippage",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:59"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "23",
              "type": "t_array(t_uint256)30_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:434"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)2096)dyn_storage": {
              "label": "contract IERC20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_enum(Version)24920)dyn_storage": {
              "label": "enum ILBRouter.Version[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Path)24970_storage)2_storage": {
              "label": "struct ILBRouter.Path[2]",
              "numberOfBytes": "192"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)30_storage": {
              "label": "uint256[30]",
              "numberOfBytes": "960"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(Version)24920": {
              "label": "enum ILBRouter.Version",
              "members": [
                "V1",
                "V2",
                "V2_1",
                "V2_2"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(Path)24970_storage": {
              "label": "struct ILBRouter.Path",
              "members": [
                {
                  "label": "pairBinSteps",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "versions",
                  "type": "t_array(t_enum(Version)24920)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenPath",
                  "type": "t_array(t_contract(IERC20)2096)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaTestnetV1.sol:ArcaTestnetV1": {
        "src": "contracts/vaults/ArcaTestnetV1.sol:43",
        "version": {
          "withMetadata": "fe5fd3eef9a92873f67b3f9100df1ecfa290b034c1cfc57b26db4d4139f3c61e",
          "withoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd",
          "linkedWithoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd"
        },
        "inherit": [
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint16,uint256,uint256,address,address,address,address,address,address)",
          "tokenBalance(uint8)",
          "totalSupply(uint8)",
          "getPricePerFullShare(uint8)",
          "depositAll(uint8)",
          "depositToken(uint256,uint8)",
          "withdrawAll()",
          "withdrawTokenShares(uint256[2])",
          "withdraw(uint256)",
          "setRewarder(address)",
          "rebalance((int256[],uint256[],uint256[],uint256[],uint256[],uint256,uint256,address,address,uint256,bool))",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setMinSwapAmount(uint256)",
          "inCaseTokensGetStuck(address)",
          "balanceSharesCombined(address)",
          "getShares(address,uint8)",
          "getUserShares(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "vaultConfig",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(VaultConfig)8652_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:74"
            },
            {
              "label": "feeManager",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:75"
            },
            {
              "label": "queueHandler",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IArcaQueueHandlerV1)5646",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:76"
            },
            {
              "label": "rewardClaimer",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IArcaRewardClaimerV1)5718",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:77"
            },
            {
              "label": "lastAddLiquidityBinIds",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:80"
            },
            {
              "label": "totalShares",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:83"
            },
            {
              "label": "shares",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:84"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_uint256)35_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:691"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)35_storage": {
              "label": "uint256[35]",
              "numberOfBytes": "1120"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaQueueHandlerV1)5646": {
              "label": "contract IArcaQueueHandlerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaRewardClaimerV1)5718": {
              "label": "contract IArcaRewardClaimerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_struct(VaultConfig)8652_storage": {
              "label": "struct ArcaTestnetV1.VaultConfig",
              "members": [
                {
                  "label": "tokens",
                  "type": "t_array(t_contract(IERC20)2096)2_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "binStep",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amountMins",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lbRouter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lbpAMM",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "lbpContract",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2cddd30dd1589b472ba8ad102d2de8cfa79690fdfbe305adc880fde647d69b81",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "ef1e676f19969f85a7821c4a06f4a977ca3acbba815ed68ce56e632c2bb74094",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "7ab81492d29bdeda8d25be994ea83ce9692409bd82dc39f16f816a5956dd058e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "36ae28cea8907b972d4b2abb56ea084e392affafab0814d57d68a1eb2480b780",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "d7f01f204c2ba3668cdb41b4d4c0601cdf71b0c4d25b085f2fe980de9f59764d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "dc6ea4f3f50982240964d716942bc0f7fa56054bf46b06907cb65cbcf38a3c8f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "b8d1bec08f899acb8947d02acca94c21236ebcc9e944604484caf0f2e15e29f4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "7019851d09fb231e54134833ce6c4ad6867dabd8e30a38985e5fd4f57db8e924",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "43473962742e4c5d36b1fd3a556053d03839b6481d6079583bdb53c1efe9fe09",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "4acd704fa58734510fc96756d7baf53e621fb738aa6c971ee5da2de1e94bb175",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "dea6c0d13c30ca26cd23518c865c5fae5e1c5d5ede045609a6e2439b6de60b49",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "9bff36686e9bfa56639d842c887cf722d56dcf607ac21498bbd50e7e9ae328e8",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IJoeFactory.sol:IJoeFactory": {
        "src": "lib/joe-v2/src/interfaces/IJoeFactory.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBFactory.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setLBHooksParametersOnPair(address,address,uint16,bytes32,bytes)",
          "removeLBHooksOnPair(address,address,uint16)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks": {
        "src": "lib/joe-v2/src/interfaces/ILBHooks.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBPair()",
          "isLinked()",
          "onHooksSet(bytes32,bytes)",
          "beforeSwap(address,address,bool,bytes32)",
          "afterSwap(address,address,bool,bytes32)",
          "beforeFlashLoan(address,address,bytes32)",
          "afterFlashLoan(address,address,bytes32,bytes32)",
          "beforeMint(address,address,bytes32[],bytes32)",
          "afterMint(address,address,bytes32[],bytes32)",
          "beforeBurn(address,address,address,uint256[],uint256[])",
          "afterBurn(address,address,address,uint256[],uint256[])",
          "beforeBatchTransferFrom(address,address,address,uint256[],uint256[])",
          "afterBatchTransferFrom(address,address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:ILBLegacyFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "MIN_BIN_STEP()",
          "MAX_BIN_STEP()",
          "MAX_PROTOCOL_SHARE()",
          "LBPairImplementation()",
          "getNumberOfQuoteAssets()",
          "getQuoteAsset(uint256)",
          "isQuoteAsset(address)",
          "feeRecipient()",
          "flashLoanFee()",
          "creationUnlocked()",
          "allLBPairs(uint256)",
          "getNumberOfLBPairs()",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint16)",
          "getAllBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint256,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint16)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "setFactoryLockedState(bool)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:ILBLegacyPair": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "tokenX()",
          "tokenY()",
          "factory()",
          "getReservesAndId()",
          "getGlobalFees()",
          "getOracleParameters()",
          "getOracleSampleFrom(uint256)",
          "feeParameters()",
          "findFirstNonEmptyBinId(uint24,bool)",
          "getBin(uint24)",
          "pendingFees(address,uint256[])",
          "swap(bool,address)",
          "flashLoan(address,address,uint256,bytes)",
          "mint(uint256[],uint256[],uint256[],address)",
          "burn(uint256[],uint256[],address)",
          "increaseOracleLength(uint16)",
          "collectFees(address,uint256[])",
          "collectProtocolFees()",
          "setFeesParameters(bytes32)",
          "forceDecay()",
          "initialize(address,address,uint24,uint16,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:ILBLegacyRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "wavax()",
          "oldFactory()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint256,bool)",
          "getSwapOut(address,uint256,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "addLiquidityAVAX((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityAVAX(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapAVAXForExactTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "totalSupply(uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "safeTransferFrom(address,address,uint256,uint256)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBPair.sol:ILBPair": {
        "src": "lib/joe-v2/src/interfaces/ILBPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "implementation()",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getLBHooksParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setHooksParameters(bytes32,bytes)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBRouter.sol:ILBRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBRouter.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getFactoryV2_1()",
          "getLegacyFactory()",
          "getV1Factory()",
          "getLegacyRouter()",
          "getWNATIVE()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint128,bool)",
          "getSwapOut(address,uint128,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapNATIVEForExactTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken": {
        "src": "lib/joe-v2/src/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IWNATIVE.sol:IWNATIVE": {
        "src": "lib/joe-v2/src/interfaces/IWNATIVE.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/libraries/Hooks.sol:Hooks": {
        "src": "lib/joe-v2/src/libraries/Hooks.sol:10",
        "version": {
          "withMetadata": "a779a19a3e24a601b4b68aacc3ca7979573821e23c72ef9241b65486a044e462",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "cfc6a26ea5387b588b31db86bc5806f478ffcb78eb5a7ba6b19b45e8b06f8b2f",
          "withoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b",
          "linkedWithoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b"
        },
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "8294a457a80209145b3b607e80054c4e96b8fafb319f1362deb8f2dc2f37726f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "4fa5b16723fcb33d24077a2a25e310b875a51c394bc6e300f69f779de9e1dd58",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "593e3b251824297aad3f0559c419f900bf6bb70891ed9a7c8de3dc2eeddd1a9f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "91f878e54f9e03c1669e92a975c92a4d194c12a06651b3d4d5c018a032cd6b1e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "d986ca163f34119923cb48da0229f59ecef5cb83010cf14516bff542d51dcabd",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "e8cca26f7a8c70714472a11f5cbd24bc02200e6d26d4ddcd05e509342134beb0",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "contracts-metropolis/src/BaseVault.sol:BaseVault": {
        "src": "contracts-metropolis/src/BaseVault.sol:31",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "()",
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVault",
            "src": "contracts-metropolis/src/BaseVault.sol:122"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/BaseVault.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/BaseVault.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleHelper.sol:OracleHelper": {
        "src": "contracts-metropolis/src/OracleHelper.sol:11",
        "version": {
          "withMetadata": "839e4c8e07153e76e34e644e8944441438d06482f758dcdd09c58673db8353d7",
          "withoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612",
          "linkedWithoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address,address,address,address,uint8,uint8)",
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setSequenzerUptimeFeed(address)",
          "getOracleParameters()",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setTwapParams(bool,uint40,uint256)",
          "getDataFeedX()",
          "getDataFeedY()",
          "getSequenzerUptimeFeed()",
          "getPrice()",
          "getValueInY(uint256,uint256,uint256)",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleHelper",
            "src": "contracts-metropolis/src/OracleHelper.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pair",
            "src": "contracts-metropolis/src/OracleHelper.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedX",
            "src": "contracts-metropolis/src/OracleHelper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedY",
            "src": "contracts-metropolis/src/OracleHelper.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsX",
            "src": "contracts-metropolis/src/OracleHelper.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsY",
            "src": "contracts-metropolis/src/OracleHelper.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/OracleHelper.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:36"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:39"
            },
            {
              "label": "_oracleParameters",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(OracleParameters)9185_storage",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:42"
            },
            {
              "label": "_sequencerUptimeFeed",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IAggregatorV3)8657",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAggregatorV3)8657": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_struct(OracleParameters)9185_storage": {
              "label": "struct IOracleHelper.OracleParameters",
              "members": [
                {
                  "label": "minPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "heartbeatX",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "heartbeatY",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "2"
                },
                {
                  "label": "deviationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "twapPriceCheckEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "twapInterval",
                  "type": "t_uint40",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleRewardVault.sol:OracleRewardVault": {
        "src": "contracts-metropolis/src/OracleRewardVault.sol:23",
        "version": {
          "withMetadata": "38a1a7e9c79589a1f1a0e762ec767b39ad7a4e7fe7762be1635f85bca77aaa4a",
          "withoutMetadata": "3ab9ee75b564e1df3fac9b1ed04fd9292e9125594561c2529fbbd0c8dca23538",
          "linkedWithoutMetadata": "3ab9ee75b564e1df3fac9b1ed04fd9292e9125594561c2529fbbd0c8dca23538"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault",
          "contracts-metropolis/src/OracleVault.sol:OracleVault",
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/Precision.sol:Precision",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper"
        ],
        "methods": [
          "(address)",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleRewardVault",
            "src": "contracts-metropolis/src/OracleRewardVault.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            },
            {
              "label": "_phantomShareSupply",
              "offset": 0,
              "slot": "157",
              "type": "t_uint256",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:31"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "158",
              "type": "t_mapping(t_address,t_struct(User)9276_storage)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:34"
            },
            {
              "label": "tokenCached",
              "offset": 0,
              "slot": "159",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:36"
            },
            {
              "label": "cachedRewardTokens",
              "offset": 0,
              "slot": "160",
              "type": "t_array(t_struct(Reward)9284_storage)dyn_storage",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Reward)9284_storage)dyn_storage": {
              "label": "struct IOracleRewardVault.Reward[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)25800": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)9276_storage)": {
              "label": "mapping(address => struct IOracleRewardVault.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Reward)9284_storage": {
              "label": "struct IOracleRewardVault.Reward",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)25800",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "accRewardsPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)9276_storage": {
              "label": "struct IOracleRewardVault.User",
              "members": [
                {
                  "label": "phantomAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebtPerToken",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleVault.sol:OracleVault": {
        "src": "contracts-metropolis/src/OracleVault.sol:31",
        "version": {
          "withMetadata": "23ca1aa7b3d62c4f82cea522c3d708dd6c13309397df899ee7073b31135aa928",
          "withoutMetadata": "4683b9563170fb7428ed3014778f6a83d43aad4ba76e3999415d28ba9b7de3e0",
          "linkedWithoutMetadata": "4683b9563170fb7428ed3014778f6a83d43aad4ba76e3999415d28ba9b7de3e0"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address)",
          "getPrice()",
          "getOracleParameters()",
          "getOracleHelper()",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleVault",
            "src": "contracts-metropolis/src/OracleVault.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/Strategy.sol:Strategy": {
        "src": "contracts-metropolis/src/Strategy.sol:41",
        "version": {
          "withMetadata": "d226a14edd0cc75ed91a065e30cd8ebe1a3036e4a7fe3d7d5d9b06a8c079927f",
          "withoutMetadata": "963c99035563dea71ca344ade02f63319d2529d055dd1157f07d1b878d50bb71",
          "linkedWithoutMetadata": "963c99035563dea71ca344ade02f63319d2529d055dd1157f07d1b878d50bb71"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IStrategy.sol:IStrategy",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "forge-std/console.sol:console",
          "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations",
          "contracts-metropolis/src/libraries/Hooks.sol:Hooks"
        ],
        "methods": [
          "()",
          "()",
          "(address,uint256)",
          "initialize()",
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "getPendingAumAnnualFee()",
          "getMaxRange()",
          "withdrawAll()",
          "emergencyWidthdrawRange(uint24,uint24)",
          "rebalance(uint24,uint24,uint24,uint24,uint256,uint256,bytes)",
          "harvestRewards()",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "setRebalanceCoolDown(uint256)",
          "hasRewards()",
          "hasExtraRewards()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Strategy",
            "src": "contracts-metropolis/src/Strategy.sol:123"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_MAX_RANGE",
            "src": "contracts-metropolis/src/Strategy.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/Strategy.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_lowerRange",
              "offset": 0,
              "slot": "51",
              "type": "t_uint24",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:66"
            },
            {
              "label": "_upperRange",
              "offset": 3,
              "slot": "51",
              "type": "t_uint24",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:67"
            },
            {
              "label": "_aumAnnualFee",
              "offset": 6,
              "slot": "51",
              "type": "t_uint16",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:68"
            },
            {
              "label": "_lastRebalance",
              "offset": 8,
              "slot": "51",
              "type": "t_uint64",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:69"
            },
            {
              "label": "_pendingAumAnnualFee",
              "offset": 16,
              "slot": "51",
              "type": "t_uint16",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:70"
            },
            {
              "label": "_pendingAumAnnualFeeSet",
              "offset": 18,
              "slot": "51",
              "type": "t_bool",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:71"
            },
            {
              "label": "_rebalanceCoolDown",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:72"
            },
            {
              "label": "_operator",
              "offset": 0,
              "slot": "53",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/VaultFactory.sol:VaultFactory": {
        "src": "contracts-metropolis/src/VaultFactory.sol:38",
        "version": {
          "withMetadata": "478a279d78c47aca115b0d3df1ae29543af20b2435cc90e66399a5874ebe8068",
          "withoutMetadata": "a043617c424f032b62c22800171d9832b697e93c59c2cdf48f44047ec055ad39",
          "linkedWithoutMetadata": "a043617c424f032b62c22800171d9832b697e93c59c2cdf48f44047ec055ad39"
        },
        "inherit": [
          "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [
          "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "joe-v2/libraries/ImmutableClone.sol:ImmutableClone"
        ],
        "methods": [
          "(address)",
          "initialize4(address,uint256)",
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "isPairWhitelisted(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setPairWhitelist(address[],bool)",
          "setTransferIgnoreList(address[])",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createMarketMakerOracleVault(address,uint16)",
          "getCreationFee()",
          "getVaultsByMarketMaker(address)",
          "getDefaultMarketMakerAumFee()",
          "getTransferIgnoreList()",
          "setPriceLens(address)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "setRebalanceCoolDown(address,uint256)",
          "recoverERC20(address,address,address,uint256)",
          "setCreationFee(uint256)",
          "setDepositToWithdrawCooldown(uint16)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultFactory",
            "src": "contracts-metropolis/src/VaultFactory.sol:104"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/VaultFactory.sol:43"
          },
          {
            "kind": "missing-initializer",
            "src": "contracts-metropolis/src/VaultFactory.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            },
            {
              "label": "_vaults",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_enum(VaultType)9688,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:45"
            },
            {
              "label": "_strategies",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_enum(StrategyType)9691,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:46"
            },
            {
              "label": "_vaultType",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_enum(VaultType)9688)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:48"
            },
            {
              "label": "_strategyType",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_address,t_enum(StrategyType)9691)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:49"
            },
            {
              "label": "_vaultImplementation",
              "offset": 0,
              "slot": "155",
              "type": "t_mapping(t_enum(VaultType)9688,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:51"
            },
            {
              "label": "_strategyImplementation",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_enum(StrategyType)9691,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:52"
            },
            {
              "label": "_feeRecipient",
              "offset": 0,
              "slot": "157",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:54"
            },
            {
              "label": "_defaultOperator",
              "offset": 0,
              "slot": "158",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:55"
            },
            {
              "label": "_priceLens",
              "offset": 0,
              "slot": "159",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:57"
            },
            {
              "label": "_creationFee",
              "offset": 0,
              "slot": "160",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:59"
            },
            {
              "label": "_vaultsByMarketMaker",
              "offset": 0,
              "slot": "161",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:62"
            },
            {
              "label": "_marketMakerByVaults",
              "offset": 0,
              "slot": "162",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:65"
            },
            {
              "label": "_vaultSettings",
              "offset": 0,
              "slot": "163",
              "type": "t_mapping(t_address,t_struct(RebalanceSetting)9706_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:68"
            },
            {
              "label": "_makerVaults",
              "offset": 0,
              "slot": "164",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:71"
            },
            {
              "label": "_defaultMMAumFee",
              "offset": 0,
              "slot": "165",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:74"
            },
            {
              "label": "_transferIgnoreList",
              "offset": 0,
              "slot": "166",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:78"
            },
            {
              "label": "_defaultSequencerUptimeFeed",
              "offset": 0,
              "slot": "167",
              "type": "t_contract(IAggregatorV3)8657",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:81"
            },
            {
              "label": "_pairWhitelist",
              "offset": 0,
              "slot": "168",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:84"
            },
            {
              "label": "_depositToWithdrawCooldown",
              "offset": 0,
              "slot": "169",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:87"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "170",
              "type": "t_array(t_uint256)36_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:805"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)36_storage": {
              "label": "uint256[36]",
              "numberOfBytes": "1152"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IAggregatorV3)8657": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_enum(StrategyType)9691": {
              "label": "enum IVaultFactory.StrategyType",
              "members": [
                "None",
                "Default"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(VaultType)9688": {
              "label": "enum IVaultFactory.VaultType",
              "members": [
                "None",
                "Simple",
                "Oracle"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(StrategyType)9691)": {
              "label": "mapping(address => enum IVaultFactory.StrategyType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(VaultType)9688)": {
              "label": "mapping(address => enum IVaultFactory.VaultType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RebalanceSetting)9706_storage)": {
              "label": "mapping(address => struct IVaultFactory.RebalanceSetting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)9691,t_address)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)9691,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)9688,t_address)": {
              "label": "mapping(enum IVaultFactory.VaultType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)9688,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.VaultType => address[])",
              "numberOfBytes": "32"
            },
            "t_struct(RebalanceSetting)9706_storage": {
              "label": "struct IVaultFactory.RebalanceSetting",
              "members": [
                {
                  "label": "newLower",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "newUpper",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "desiredActiveId",
                  "type": "t_uint24",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "slippageActiveId",
                  "type": "t_uint24",
                  "offset": 9,
                  "slot": "0"
                },
                {
                  "label": "amountX",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountY",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "distributions",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault": {
        "src": "contracts-metropolis/src/interfaces/IBaseVault.sol:16",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "initialize(string,string)",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IHooksRewarder.sol:IHooksRewarder": {
        "src": "contracts-metropolis/src/interfaces/IHooksRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "getExtraHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/ILBPairHooks.sol:ILBPairHooks": {
        "src": "contracts-metropolis/src/interfaces/ILBPairHooks.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOneInchRouter.sol:IOneInchRouter": {
        "src": "contracts-metropolis/src/interfaces/IOneInchRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,(address,address,address payable,address payable,uint256,uint256,uint256),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelper.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setSequenzerUptimeFeed(address)",
          "setTwapParams(bool,uint40,uint256)",
          "checkPriceInDeviation()",
          "getPrice()",
          "getDataFeedX()",
          "getDataFeedY()",
          "getValueInY(uint256,uint256,uint256)",
          "getOracleParameters()",
          "getSequenzerUptimeFeed()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "claim()",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleVault.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getPrice()",
          "getOracleParameters()",
          "checkPriceInDeviation()",
          "getOracleHelper()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts-metropolis/src/interfaces/IStrategy.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getPendingAumAnnualFee()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "hasRewards()",
          "hasExtraRewards()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getMaxRange()",
          "initialize()",
          "withdrawAll()",
          "rebalance(uint24,uint24,uint24,uint24,uint256,uint256,bytes)",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "harvestRewards()",
          "setRebalanceCoolDown(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts-metropolis/src/interfaces/IVaultFactory.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "getTransferIgnoreList()",
          "isPairWhitelisted(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setPairWhitelist(address[],bool)",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "recoverERC20(address,address,address,uint256)",
          "setTransferIgnoreList(address[])",
          "setRebalanceCoolDown(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Constants.sol:Constants": {
        "src": "contracts-metropolis/src/libraries/Constants.sol:8",
        "version": {
          "withMetadata": "465cb4f370a23d642fced738e3cc381f61c3699c629f3e3a1dead012cd3cb8c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "eaddac53aa725b14bcae772e734937cc9936b5d4fba4294a3e7707e36f52800a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Math.sol:Math": {
        "src": "contracts-metropolis/src/libraries/Math.sol:10",
        "version": {
          "withMetadata": "3c98cece8c8a46e1abf21ade1a902f8fcf56f8e761047b2faca769aa3e0e2aea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Precision.sol:Precision": {
        "src": "contracts-metropolis/src/libraries/Precision.sol:6",
        "version": {
          "withMetadata": "d68d48650d6962118397fc577feb7142f8b19406e574d4251e9f7699a32ad05c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts-metropolis/src/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper": {
        "src": "contracts-metropolis/src/libraries/TokenHelper.sol:10",
        "version": {
          "withMetadata": "895a70e1d0fa1a4072ae8c7f82b0d68dba82d2c9ebbaa80d67c41e4fd0a7c0b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/utils/OracleLensAggregator.sol:OracleLensAggregator": {
        "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:9",
        "version": {
          "withMetadata": "7900acc47d50582f75fdbb9bc94e569f8266e43169f54d9721886c970a63d11f",
          "withoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50",
          "linkedWithoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3",
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleLensAggregator",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lens",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "d9f824a5d6934bd814e15da2d15cf325324b49d061114ee14cc942e49c620f3c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "e4659fd0c435a789a3df9150d8aacb451558f94bd3a64ba6058a11cb4eaad3ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "fcaa014161ea1d1fe52636e09c1d5a3dc670196ca57eef93cd1d157371518d8d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "f4a7854939b2e7a42626280047f53bfb869e3db784676907a8b4278514bdb99a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "a72a3058f1898729f7626b96ecbdd1a57e81150e0daf34921e03d4560f8384ee",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "6b32caed1e399106b4d28932712dab9e750fffbdb4605c6551450679f11ae65e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "327e9169a8b32c132e0301815a7dedd22ce152e9c4cb97123e4e187208e96e05",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "5fbe0c71f889e77f912cfba608a81bba5bde8150479cf65a86adbdcded3890c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "220ca904f85a0ee099fef8931998653e4f6f26bb0e191f25c02cd66af6d3d343",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "2c6dff62a1184c3dc21f43a2b59e4ab6de6477b68965bce6c12aa72ad9c1c164",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "f2b5fd24abfc28c3d62a171fe5ee1a51771254b076f011b8db17af30fd7c6546",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "e57896c3ccba1cf2c5c1f6f2114afb51c0f69ee23a3c160c842306b488dacb68",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "13f6745e624eec422c812f88c50338fcea76d7c2f7244646bffe9f0b4abbc303",
          "withoutMetadata": "ed5b4de26565da38935df3308174ea9b58934a099d03e12be32a592e9db68757",
          "linkedWithoutMetadata": "ed5b4de26565da38935df3308174ea9b58934a099d03e12be32a592e9db68757"
        },
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "22d8660aef962d2e28d9fda041bfb048bf96fc13c0ed32a12cb0cd16e43cc1ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "22244778d2ca41863fefabae120d4604e5e9805f09721a34cdc3b871a5db7df3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "513e246607ed328f11c6d1a011122f4e4c736120e1f5d4e9da93bc906f2ac511",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "025cd388bece95c86767a1cb2f5d773a161baeffee94866c990c81cacf2937e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4b1cf89a6486894887a976012687b8ebf2da8455b4b415ec04675adf36a446dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "f77559981d0b96d541d2a6580332851281435c7178d4462b27eacc32300840a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "65e1935f897247c753735e1c48d0897487a9f52320ebcb0d6e823899b9da3084",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1ba720802922ae6402adf9cab77ff8e452c5005b9dc6e1138ac3464b37bc076f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0293c1f81927a4d53228f0a9048ef3dd42e60d2e735f5bc58259a249f78d386a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "f65e829a5f483562c42ccaa4bb29e4ac7b3af82166d8703708b4629e6970301d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "8de89f3ed8fd459008581b5d7b8f9cc67fed6ad541b9571f3d703d015f72be69",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ArcaFeeManagerV1.sol:ArcaFeeManagerV1": {
        "src": "contracts/ArcaFeeManagerV1.sol:12",
        "version": {
          "withMetadata": "81f50ef8067e96d3be030a907ab703a486eafa02a1c46bc3024e6540e29dadc7",
          "withoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c",
          "linkedWithoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c"
        },
        "inherit": [
          "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "setFees(uint256,uint256,uint256)",
          "setFeeRecipient(address)",
          "getDepositFee()",
          "getWithdrawFee()",
          "getPerformanceFee()",
          "getFeeRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositFee",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:17"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:18"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:19"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/Staking/MetroShadowStaking.sol:MetroShadowStaking": {
        "src": "contracts/Staking/MetroShadowStaking.sol:15",
        "version": {
          "withMetadata": "99ab9e55560bf8d3ca8c72b1fcf5167b10a22584301464bd9e2bb4e5f6a6a78c",
          "withoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed",
          "linkedWithoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "stakeMetro(uint256,uint256)",
          "emergencyExit(uint256)",
          "unlockMetro(uint256)",
          "stakeX33(uint256)",
          "unstakeX33(uint256)",
          "getUserMetroPositions(address)",
          "getUserX33Positions(address)",
          "calculateCurrentPenalty(address,uint256)",
          "getAvailableExitCapacity()",
          "getPendingRebaseRewards(address)",
          "updateStakingTier(uint256,uint256,uint256,uint256)",
          "triggerRebaseDistribution()",
          "emergencyWithdraw(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MetroShadowStaking",
            "src": "contracts/Staking/MetroShadowStaking.sol:108"
          },
          {
            "kind": "state-variable-immutable",
            "name": "METRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "X33_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NMETRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NSHADOW_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "stakingTiers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:35"
            },
            {
              "label": "userMetroPositions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:57"
            },
            {
              "label": "userX33Positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:58"
            },
            {
              "label": "piggyBankBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:61"
            },
            {
              "label": "totalPendingRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:62"
            },
            {
              "label": "totalMetroStaked",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:65"
            },
            {
              "label": "totalNMetroMinted",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:66"
            },
            {
              "label": "totalX33Staked",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:67"
            },
            {
              "label": "totalNShadowMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:68"
            },
            {
              "label": "userRebaseIndex",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:71"
            },
            {
              "label": "globalRebaseIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:72"
            },
            {
              "label": "rebaseRewardsPerToken",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(X33StakePosition)3734_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.MetroStakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.X33StakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)": {
              "label": "mapping(uint256 => struct MetroShadowStaking.StakingTier)",
              "numberOfBytes": "32"
            },
            "t_struct(MetroStakePosition)3725_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nMetroAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tierId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rebaseRewardsReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(StakingTier)3705_storage": {
              "label": "struct MetroShadowStaking.StakingTier",
              "members": [
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "penaltyRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(X33StakePosition)3734_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nShadowAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/TokenTypes.sol:TokenValidator": {
        "src": "contracts/TokenTypes.sol:5",
        "version": {
          "withMetadata": "a1be82b276d007e36cdbe3561db35a73c8c1eebdae96bab379231a09c75ea397",
          "withoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd",
          "linkedWithoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/deployment/ArcaVaultRegistry.sol:ArcaVaultRegistry": {
        "src": "contracts/deployment/ArcaVaultRegistry.sol:12",
        "version": {
          "withMetadata": "f18d6ba9255a90a55d5bb639de040356eaa208df86b82a2f82348864b569d14b",
          "withoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91",
          "linkedWithoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "registerVault(address,address,address,address,address,address,string,string,uint256,bool)",
          "deactivateVault(address,string)",
          "activateVault(address)",
          "getVaultsByTokenPair(address,address)",
          "getActiveVaults()",
          "getVaultCount()",
          "getVaultInfo(address)",
          "getVaultDetails(address)",
          "getVaultComponents(address)",
          "isActiveVault(address)",
          "getDeploymentInfo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcaVaultRegistry",
            "src": "contracts/deployment/ArcaVaultRegistry.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "vaultInfo",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(VaultInfo)4953_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:29"
            },
            {
              "label": "vaultList",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:30"
            },
            {
              "label": "isRegisteredVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:31"
            },
            {
              "label": "vaultsByTokenPair",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(VaultInfo)4953_storage)": {
              "label": "mapping(address => struct ArcaVaultRegistry.VaultInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
              "label": "mapping(bytes32 => address[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(VaultInfo)4953_storage": {
              "label": "struct ArcaVaultRegistry.VaultInfo",
              "members": [
                {
                  "label": "vault",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardClaimer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "queueHandler",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeManager",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tokenX",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "tokenY",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "deploymentTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deployer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "9"
                },
                {
                  "label": "isProxy",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1": {
        "src": "contracts/interfaces/IArcaFeeManagerV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "BASIS_POINTS()",
          "getDepositFee()",
          "getFeeRecipient()",
          "getPerformanceFee()",
          "getWithdrawFee()",
          "setFeeRecipient(address)",
          "setFees(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1": {
        "src": "contracts/interfaces/IArcaQueueHandlerV1.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositQueueStart()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getDepositQueueTrailingSlice()",
          "getPendingDepositRequests()",
          "getPendingDepositsCount()",
          "getPendingWithdrawRequests()",
          "getPendingWithdrawsCount()",
          "getQueuedToken(uint8)",
          "getWithdrawQueueLength()",
          "getWithdrawQueueTrailingSlice()",
          "reduceQueuedToken(uint256,uint8)",
          "withdrawQueueStart()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1": {
        "src": "contracts/interfaces/IArcaRewardClaimerV1.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimAndCompoundRewards()",
          "claimRewards(uint256[],address)",
          "getExpectedSwapOutput(uint256,address)",
          "getVaultBinIds()",
          "idSlippage()",
          "minSwapAmount()",
          "nativeToken()",
          "setMinSwapAmount(uint256)",
          "setRewarder(address)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible": {
        "src": "contracts/interfaces/IDepositWithdrawCompatible.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:ILBHooksBaseRewarder": {
        "src": "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:11",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks"
        ],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "setDeltaBins(int24,int24)",
          "sweep(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBRouter.sol:ILBRouter": {
        "src": "contracts/interfaces/Metropolis/ILBRouter.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity((address,address,uint16,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/IPair.sol:IPair": {
        "src": "contracts/interfaces/Metropolis/IPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "feeAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:6",
        "version": {
          "withMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "withoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "linkedWithoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,address)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/mocks/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBHooksBaseRewarder.sol:MockLBHooksBaseRewarder": {
        "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:6",
        "version": {
          "withMetadata": "a306dfdd90078adb991ae056fe11ee0d0e049ecd09318d058814d39710d3daf9",
          "withoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef",
          "linkedWithoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setRewardToken(address)",
          "setClaimAmount(uint256)",
          "setShouldFail(bool)",
          "claim(address,uint256[])",
          "pendingRewards(address,uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:7"
            },
            {
              "label": "claimAmount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBPair.sol:MockLBPair": {
        "src": "contracts/mocks/MockLBPair.sol:6",
        "version": {
          "withMetadata": "32abfc4d5ff5d1173883af8afae445a83564c786bc964bc6ea85618bf4647f0c",
          "withoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47",
          "linkedWithoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint16)",
          "getActiveId()",
          "setActiveId(uint24)",
          "getBinStep()",
          "getTokenX()",
          "getTokenY()",
          "getPriceFromId(uint24)",
          "getReserves()",
          "getLBHooksParameters()",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "balanceOf(address,uint256)",
          "totalSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "activeId",
            "src": "contracts/mocks/MockLBPair.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "binStep",
            "src": "contracts/mocks/MockLBPair.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "activeId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:7"
            },
            {
              "label": "binStep",
              "offset": 3,
              "slot": "0",
              "type": "t_uint16",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:8"
            },
            {
              "label": "tokenX",
              "offset": 5,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:9"
            },
            {
              "label": "tokenY",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:10"
            },
            {
              "label": "reserveX",
              "offset": 0,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:11"
            },
            {
              "label": "reserveY",
              "offset": 16,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:12"
            },
            {
              "label": "userLiquidity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:15"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBRouter.sol:MockLBRouter": {
        "src": "contracts/mocks/MockLBRouter.sol:7",
        "version": {
          "withMetadata": "7fec49ead98bc2fe355568292430616d863b3a035adbb870e35257f2dea5876f",
          "withoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0",
          "linkedWithoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setSwapOutputForToken(address,uint256)",
          "setShouldFail(bool)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "tokenSwapOutputs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaQueueHandlerV1.sol:ArcaQueueHandlerV1": {
        "src": "contracts/vaults/ArcaQueueHandlerV1.sol:16",
        "version": {
          "withMetadata": "18f935ccf6fdf6e89890b4014055dc1642dd0220e08461a576db5b0f2729afee",
          "withoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14",
          "linkedWithoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14"
        },
        "inherit": [
          "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "getQueuedToken(uint8)",
          "()",
          "initialize()",
          "reduceQueuedToken(uint256,uint8)",
          "getPendingDepositRequests()",
          "getDepositQueueTrailingSlice()",
          "getPendingWithdrawRequests()",
          "getWithdrawQueueTrailingSlice()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getWithdrawQueueLength()",
          "getPendingDepositsCount()",
          "getPendingWithdrawsCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositQueue",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_struct(DepositRequest)5732_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:24"
            },
            {
              "label": "withdrawQueue",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:25"
            },
            {
              "label": "depositQueueStart",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:26"
            },
            {
              "label": "withdrawQueueStart",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:27"
            },
            {
              "label": "_queuedTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_uint256)40_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:219"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(DepositRequest)5732_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)40_storage": {
              "label": "uint256[40]",
              "numberOfBytes": "1280"
            },
            "t_enum(Type)4917": {
              "label": "enum TokenValidator.Type",
              "members": [
                "TokenX",
                "TokenY"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(DepositRequest)5732_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenType",
                  "type": "t_enum(Type)4917",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(WithdrawRequest)5741_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "shares",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaRewardClaimerV1.sol:ArcaRewardClaimerV1": {
        "src": "contracts/vaults/ArcaRewardClaimerV1.sol:30",
        "version": {
          "withMetadata": "d48a8679ca6b6516cbf77f4cc91e34cf2f2c1aad0fd6321042284d157d674ba2",
          "withoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6",
          "linkedWithoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6"
        },
        "inherit": [
          "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address,address,address,address,address,uint256,address,address)",
          "getTotalCompounded(uint8)",
          "setMinSwapAmount(uint256)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setRewarder(address)",
          "claimAndCompoundRewards()",
          "getVaultBinIds()",
          "getExpectedSwapOutput(uint256,address)",
          "claimRewards(uint256[],address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_rewarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:39"
            },
            {
              "label": "_rewardToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:40"
            },
            {
              "label": "_feeManager",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:41"
            },
            {
              "label": "minSwapAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:42"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_contract(IERC20)2096)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:43"
            },
            {
              "label": "nativeToken",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:46"
            },
            {
              "label": "metroToTokenPaths",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_struct(Path)24970_storage)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:49"
            },
            {
              "label": "metroToNativePath",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Path)24970_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:50"
            },
            {
              "label": "totalCompounded",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:53"
            },
            {
              "label": "_lbpContract",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:55"
            },
            {
              "label": "_lbpContractUSD",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:56"
            },
            {
              "label": "_lpAMM",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:57"
            },
            {
              "label": "_lbRouter",
              "offset": 0,
              "slot": "21",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:58"
            },
            {
              "label": "idSlippage",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:59"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "23",
              "type": "t_array(t_uint256)30_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:434"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)2096)dyn_storage": {
              "label": "contract IERC20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_enum(Version)24920)dyn_storage": {
              "label": "enum ILBRouter.Version[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Path)24970_storage)2_storage": {
              "label": "struct ILBRouter.Path[2]",
              "numberOfBytes": "192"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)30_storage": {
              "label": "uint256[30]",
              "numberOfBytes": "960"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(Version)24920": {
              "label": "enum ILBRouter.Version",
              "members": [
                "V1",
                "V2",
                "V2_1",
                "V2_2"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(Path)24970_storage": {
              "label": "struct ILBRouter.Path",
              "members": [
                {
                  "label": "pairBinSteps",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "versions",
                  "type": "t_array(t_enum(Version)24920)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenPath",
                  "type": "t_array(t_contract(IERC20)2096)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaTestnetV1.sol:ArcaTestnetV1": {
        "src": "contracts/vaults/ArcaTestnetV1.sol:43",
        "version": {
          "withMetadata": "fe5fd3eef9a92873f67b3f9100df1ecfa290b034c1cfc57b26db4d4139f3c61e",
          "withoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd",
          "linkedWithoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd"
        },
        "inherit": [
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint16,uint256,uint256,address,address,address,address,address,address)",
          "tokenBalance(uint8)",
          "totalSupply(uint8)",
          "getPricePerFullShare(uint8)",
          "depositAll(uint8)",
          "depositToken(uint256,uint8)",
          "withdrawAll()",
          "withdrawTokenShares(uint256[2])",
          "withdraw(uint256)",
          "setRewarder(address)",
          "rebalance((int256[],uint256[],uint256[],uint256[],uint256[],uint256,uint256,address,address,uint256,bool))",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setMinSwapAmount(uint256)",
          "inCaseTokensGetStuck(address)",
          "balanceSharesCombined(address)",
          "getShares(address,uint8)",
          "getUserShares(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "vaultConfig",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(VaultConfig)8652_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:74"
            },
            {
              "label": "feeManager",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:75"
            },
            {
              "label": "queueHandler",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IArcaQueueHandlerV1)5646",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:76"
            },
            {
              "label": "rewardClaimer",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IArcaRewardClaimerV1)5718",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:77"
            },
            {
              "label": "lastAddLiquidityBinIds",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:80"
            },
            {
              "label": "totalShares",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:83"
            },
            {
              "label": "shares",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:84"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_uint256)35_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:691"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)35_storage": {
              "label": "uint256[35]",
              "numberOfBytes": "1120"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaQueueHandlerV1)5646": {
              "label": "contract IArcaQueueHandlerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaRewardClaimerV1)5718": {
              "label": "contract IArcaRewardClaimerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_struct(VaultConfig)8652_storage": {
              "label": "struct ArcaTestnetV1.VaultConfig",
              "members": [
                {
                  "label": "tokens",
                  "type": "t_array(t_contract(IERC20)2096)2_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "binStep",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amountMins",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lbRouter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lbpAMM",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "lbpContract",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2cddd30dd1589b472ba8ad102d2de8cfa79690fdfbe305adc880fde647d69b81",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "ef1e676f19969f85a7821c4a06f4a977ca3acbba815ed68ce56e632c2bb74094",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "7ab81492d29bdeda8d25be994ea83ce9692409bd82dc39f16f816a5956dd058e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "36ae28cea8907b972d4b2abb56ea084e392affafab0814d57d68a1eb2480b780",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "d7f01f204c2ba3668cdb41b4d4c0601cdf71b0c4d25b085f2fe980de9f59764d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "dc6ea4f3f50982240964d716942bc0f7fa56054bf46b06907cb65cbcf38a3c8f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "b8d1bec08f899acb8947d02acca94c21236ebcc9e944604484caf0f2e15e29f4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "7019851d09fb231e54134833ce6c4ad6867dabd8e30a38985e5fd4f57db8e924",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "43473962742e4c5d36b1fd3a556053d03839b6481d6079583bdb53c1efe9fe09",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "4acd704fa58734510fc96756d7baf53e621fb738aa6c971ee5da2de1e94bb175",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "dea6c0d13c30ca26cd23518c865c5fae5e1c5d5ede045609a6e2439b6de60b49",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "9bff36686e9bfa56639d842c887cf722d56dcf607ac21498bbd50e7e9ae328e8",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IJoeFactory.sol:IJoeFactory": {
        "src": "lib/joe-v2/src/interfaces/IJoeFactory.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBFactory.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setLBHooksParametersOnPair(address,address,uint16,bytes32,bytes)",
          "removeLBHooksOnPair(address,address,uint16)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks": {
        "src": "lib/joe-v2/src/interfaces/ILBHooks.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBPair()",
          "isLinked()",
          "onHooksSet(bytes32,bytes)",
          "beforeSwap(address,address,bool,bytes32)",
          "afterSwap(address,address,bool,bytes32)",
          "beforeFlashLoan(address,address,bytes32)",
          "afterFlashLoan(address,address,bytes32,bytes32)",
          "beforeMint(address,address,bytes32[],bytes32)",
          "afterMint(address,address,bytes32[],bytes32)",
          "beforeBurn(address,address,address,uint256[],uint256[])",
          "afterBurn(address,address,address,uint256[],uint256[])",
          "beforeBatchTransferFrom(address,address,address,uint256[],uint256[])",
          "afterBatchTransferFrom(address,address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:ILBLegacyFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "MIN_BIN_STEP()",
          "MAX_BIN_STEP()",
          "MAX_PROTOCOL_SHARE()",
          "LBPairImplementation()",
          "getNumberOfQuoteAssets()",
          "getQuoteAsset(uint256)",
          "isQuoteAsset(address)",
          "feeRecipient()",
          "flashLoanFee()",
          "creationUnlocked()",
          "allLBPairs(uint256)",
          "getNumberOfLBPairs()",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint16)",
          "getAllBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint256,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint16)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "setFactoryLockedState(bool)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:ILBLegacyPair": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "tokenX()",
          "tokenY()",
          "factory()",
          "getReservesAndId()",
          "getGlobalFees()",
          "getOracleParameters()",
          "getOracleSampleFrom(uint256)",
          "feeParameters()",
          "findFirstNonEmptyBinId(uint24,bool)",
          "getBin(uint24)",
          "pendingFees(address,uint256[])",
          "swap(bool,address)",
          "flashLoan(address,address,uint256,bytes)",
          "mint(uint256[],uint256[],uint256[],address)",
          "burn(uint256[],uint256[],address)",
          "increaseOracleLength(uint16)",
          "collectFees(address,uint256[])",
          "collectProtocolFees()",
          "setFeesParameters(bytes32)",
          "forceDecay()",
          "initialize(address,address,uint24,uint16,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:ILBLegacyRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "wavax()",
          "oldFactory()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint256,bool)",
          "getSwapOut(address,uint256,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "addLiquidityAVAX((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityAVAX(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapAVAXForExactTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "totalSupply(uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "safeTransferFrom(address,address,uint256,uint256)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBPair.sol:ILBPair": {
        "src": "lib/joe-v2/src/interfaces/ILBPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "implementation()",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getLBHooksParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setHooksParameters(bytes32,bytes)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBRouter.sol:ILBRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBRouter.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getFactoryV2_1()",
          "getLegacyFactory()",
          "getV1Factory()",
          "getLegacyRouter()",
          "getWNATIVE()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint128,bool)",
          "getSwapOut(address,uint128,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapNATIVEForExactTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken": {
        "src": "lib/joe-v2/src/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IWNATIVE.sol:IWNATIVE": {
        "src": "lib/joe-v2/src/interfaces/IWNATIVE.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/libraries/Hooks.sol:Hooks": {
        "src": "lib/joe-v2/src/libraries/Hooks.sol:10",
        "version": {
          "withMetadata": "a779a19a3e24a601b4b68aacc3ca7979573821e23c72ef9241b65486a044e462",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "cfc6a26ea5387b588b31db86bc5806f478ffcb78eb5a7ba6b19b45e8b06f8b2f",
          "withoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b",
          "linkedWithoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b"
        },
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "8294a457a80209145b3b607e80054c4e96b8fafb319f1362deb8f2dc2f37726f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "4fa5b16723fcb33d24077a2a25e310b875a51c394bc6e300f69f779de9e1dd58",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "593e3b251824297aad3f0559c419f900bf6bb70891ed9a7c8de3dc2eeddd1a9f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "91f878e54f9e03c1669e92a975c92a4d194c12a06651b3d4d5c018a032cd6b1e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "d986ca163f34119923cb48da0229f59ecef5cb83010cf14516bff542d51dcabd",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "e8cca26f7a8c70714472a11f5cbd24bc02200e6d26d4ddcd05e509342134beb0",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "contracts-metropolis/src/BaseVault.sol:BaseVault": {
        "src": "contracts-metropolis/src/BaseVault.sol:31",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "()",
          "initialize(string,string)",
          "version()",
          "decimals()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVault",
            "src": "contracts-metropolis/src/BaseVault.sol:122"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/BaseVault.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/BaseVault.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleHelper.sol:OracleHelper": {
        "src": "contracts-metropolis/src/OracleHelper.sol:11",
        "version": {
          "withMetadata": "839e4c8e07153e76e34e644e8944441438d06482f758dcdd09c58673db8353d7",
          "withoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612",
          "linkedWithoutMetadata": "5e4db6adb040da9bf1dcabd4c3f8f1f4c9423148b180a8f2d70d0d2c12010612"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address,address,address,address,uint8,uint8)",
          "initialize(address,uint24,uint24,uint256,uint256,address)",
          "setSequenzerUptimeFeed(address)",
          "getOracleParameters()",
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setTwapParams(bool,uint40,uint256)",
          "getDataFeedX()",
          "getDataFeedY()",
          "getSequenzerUptimeFeed()",
          "getPrice()",
          "getValueInY(uint256,uint256,uint256)",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleHelper",
            "src": "contracts-metropolis/src/OracleHelper.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pair",
            "src": "contracts-metropolis/src/OracleHelper.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedX",
            "src": "contracts-metropolis/src/OracleHelper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_dataFeedY",
            "src": "contracts-metropolis/src/OracleHelper.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsX",
            "src": "contracts-metropolis/src/OracleHelper.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimalsY",
            "src": "contracts-metropolis/src/OracleHelper.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/OracleHelper.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:36"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:39"
            },
            {
              "label": "_oracleParameters",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(OracleParameters)9185_storage",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:42"
            },
            {
              "label": "_sequencerUptimeFeed",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IAggregatorV3)8657",
              "contract": "OracleHelper",
              "src": "contracts-metropolis/src/OracleHelper.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAggregatorV3)8657": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_struct(OracleParameters)9185_storage": {
              "label": "struct IOracleHelper.OracleParameters",
              "members": [
                {
                  "label": "minPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "heartbeatX",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "heartbeatY",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "2"
                },
                {
                  "label": "deviationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "twapPriceCheckEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "twapInterval",
                  "type": "t_uint40",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleRewardVault.sol:OracleRewardVault": {
        "src": "contracts-metropolis/src/OracleRewardVault.sol:23",
        "version": {
          "withMetadata": "38a1a7e9c79589a1f1a0e762ec767b39ad7a4e7fe7762be1635f85bca77aaa4a",
          "withoutMetadata": "3ab9ee75b564e1df3fac9b1ed04fd9292e9125594561c2529fbbd0c8dca23538",
          "linkedWithoutMetadata": "3ab9ee75b564e1df3fac9b1ed04fd9292e9125594561c2529fbbd0c8dca23538"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault",
          "contracts-metropolis/src/OracleVault.sol:OracleVault",
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/Precision.sol:Precision",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper"
        ],
        "methods": [
          "(address)",
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleRewardVault",
            "src": "contracts-metropolis/src/OracleRewardVault.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            },
            {
              "label": "_phantomShareSupply",
              "offset": 0,
              "slot": "157",
              "type": "t_uint256",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:31"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "158",
              "type": "t_mapping(t_address,t_struct(User)9276_storage)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:34"
            },
            {
              "label": "tokenCached",
              "offset": 0,
              "slot": "159",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:36"
            },
            {
              "label": "cachedRewardTokens",
              "offset": 0,
              "slot": "160",
              "type": "t_array(t_struct(Reward)9284_storage)dyn_storage",
              "contract": "OracleRewardVault",
              "src": "contracts-metropolis/src/OracleRewardVault.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Reward)9284_storage)dyn_storage": {
              "label": "struct IOracleRewardVault.Reward[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)25800": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)9276_storage)": {
              "label": "mapping(address => struct IOracleRewardVault.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Reward)9284_storage": {
              "label": "struct IOracleRewardVault.Reward",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)25800",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "accRewardsPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(User)9276_storage": {
              "label": "struct IOracleRewardVault.User",
              "members": [
                {
                  "label": "phantomAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebtPerToken",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/OracleVault.sol:OracleVault": {
        "src": "contracts-metropolis/src/OracleVault.sol:31",
        "version": {
          "withMetadata": "23ca1aa7b3d62c4f82cea522c3d708dd6c13309397df899ee7073b31135aa928",
          "withoutMetadata": "4683b9563170fb7428ed3014778f6a83d43aad4ba76e3999415d28ba9b7de3e0",
          "linkedWithoutMetadata": "4683b9563170fb7428ed3014778f6a83d43aad4ba76e3999415d28ba9b7de3e0"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/BaseVault.sol:BaseVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math"
        ],
        "methods": [
          "(address)",
          "getPrice()",
          "getOracleParameters()",
          "getOracleHelper()",
          "checkPriceInDeviation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleVault",
            "src": "contracts-metropolis/src/OracleVault.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_strategy",
              "offset": 0,
              "slot": "151",
              "type": "t_contract(IStrategy)9637",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:42"
            },
            {
              "label": "_depositsPaused",
              "offset": 20,
              "slot": "151",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:43"
            },
            {
              "label": "_queuedWithdrawalsByRound",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:45"
            },
            {
              "label": "_totalAmountX",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:47"
            },
            {
              "label": "_totalAmountY",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:48"
            },
            {
              "label": "_flaggedForShutdown",
              "offset": 0,
              "slot": "155",
              "type": "t_bool",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:51"
            },
            {
              "label": "userDeposited",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseVault",
              "src": "contracts-metropolis/src/BaseVault.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(QueuedWithdrawal)8739_storage)dyn_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)9637": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(QueuedWithdrawal)8739_storage": {
              "label": "struct IBaseVault.QueuedWithdrawal",
              "members": [
                {
                  "label": "userWithdrawals",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalQueuedShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalAmountX",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalAmountY",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/Strategy.sol:Strategy": {
        "src": "contracts-metropolis/src/Strategy.sol:41",
        "version": {
          "withMetadata": "d226a14edd0cc75ed91a065e30cd8ebe1a3036e4a7fe3d7d5d9b06a8c079927f",
          "withoutMetadata": "963c99035563dea71ca344ade02f63319d2529d055dd1157f07d1b878d50bb71",
          "linkedWithoutMetadata": "963c99035563dea71ca344ade02f63319d2529d055dd1157f07d1b878d50bb71"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IStrategy.sol:IStrategy",
          "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "joe-v2/libraries/Clone.sol:Clone"
        ],
        "libraries": [
          "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts",
          "contracts-metropolis/src/libraries/Math.sol:Math",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "forge-std/console.sol:console",
          "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations",
          "contracts-metropolis/src/libraries/Hooks.sol:Hooks"
        ],
        "methods": [
          "()",
          "()",
          "(address,uint256)",
          "initialize()",
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "getPendingAumAnnualFee()",
          "getMaxRange()",
          "withdrawAll()",
          "emergencyWidthdrawRange(uint24,uint24)",
          "rebalance(uint24,uint24,uint24,uint24,uint256,uint256,bytes)",
          "harvestRewards()",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "setRebalanceCoolDown(uint256)",
          "hasRewards()",
          "hasExtraRewards()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Strategy",
            "src": "contracts-metropolis/src/Strategy.sol:123"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_MAX_RANGE",
            "src": "contracts-metropolis/src/Strategy.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_factory",
            "src": "contracts-metropolis/src/Strategy.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_lowerRange",
              "offset": 0,
              "slot": "51",
              "type": "t_uint24",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:66"
            },
            {
              "label": "_upperRange",
              "offset": 3,
              "slot": "51",
              "type": "t_uint24",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:67"
            },
            {
              "label": "_aumAnnualFee",
              "offset": 6,
              "slot": "51",
              "type": "t_uint16",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:68"
            },
            {
              "label": "_lastRebalance",
              "offset": 8,
              "slot": "51",
              "type": "t_uint64",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:69"
            },
            {
              "label": "_pendingAumAnnualFee",
              "offset": 16,
              "slot": "51",
              "type": "t_uint16",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:70"
            },
            {
              "label": "_pendingAumAnnualFeeSet",
              "offset": 18,
              "slot": "51",
              "type": "t_bool",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:71"
            },
            {
              "label": "_rebalanceCoolDown",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:72"
            },
            {
              "label": "_operator",
              "offset": 0,
              "slot": "53",
              "type": "t_address",
              "contract": "Strategy",
              "src": "contracts-metropolis/src/Strategy.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/VaultFactory.sol:VaultFactory": {
        "src": "contracts-metropolis/src/VaultFactory.sol:38",
        "version": {
          "withMetadata": "478a279d78c47aca115b0d3df1ae29543af20b2435cc90e66399a5874ebe8068",
          "withoutMetadata": "a043617c424f032b62c22800171d9832b697e93c59c2cdf48f44047ec055ad39",
          "linkedWithoutMetadata": "a043617c424f032b62c22800171d9832b697e93c59c2cdf48f44047ec055ad39"
        },
        "inherit": [
          "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory"
        ],
        "libraries": [
          "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable",
          "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper",
          "joe-v2/libraries/ImmutableClone.sol:ImmutableClone"
        ],
        "methods": [
          "(address)",
          "initialize4(address,uint256)",
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "isPairWhitelisted(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setPairWhitelist(address[],bool)",
          "setTransferIgnoreList(address[])",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createMarketMakerOracleVault(address,uint16)",
          "getCreationFee()",
          "getVaultsByMarketMaker(address)",
          "getDefaultMarketMakerAumFee()",
          "getTransferIgnoreList()",
          "setPriceLens(address)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "setRebalanceCoolDown(address,uint256)",
          "recoverERC20(address,address,address,uint256)",
          "setCreationFee(uint256)",
          "setDepositToWithdrawCooldown(uint16)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultFactory",
            "src": "contracts-metropolis/src/VaultFactory.sol:104"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_wnative",
            "src": "contracts-metropolis/src/VaultFactory.sol:43"
          },
          {
            "kind": "missing-initializer",
            "src": "contracts-metropolis/src/VaultFactory.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            },
            {
              "label": "_vaults",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_enum(VaultType)9688,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:45"
            },
            {
              "label": "_strategies",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_enum(StrategyType)9691,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:46"
            },
            {
              "label": "_vaultType",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_enum(VaultType)9688)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:48"
            },
            {
              "label": "_strategyType",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_address,t_enum(StrategyType)9691)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:49"
            },
            {
              "label": "_vaultImplementation",
              "offset": 0,
              "slot": "155",
              "type": "t_mapping(t_enum(VaultType)9688,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:51"
            },
            {
              "label": "_strategyImplementation",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_enum(StrategyType)9691,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:52"
            },
            {
              "label": "_feeRecipient",
              "offset": 0,
              "slot": "157",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:54"
            },
            {
              "label": "_defaultOperator",
              "offset": 0,
              "slot": "158",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:55"
            },
            {
              "label": "_priceLens",
              "offset": 0,
              "slot": "159",
              "type": "t_address",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:57"
            },
            {
              "label": "_creationFee",
              "offset": 0,
              "slot": "160",
              "type": "t_uint256",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:59"
            },
            {
              "label": "_vaultsByMarketMaker",
              "offset": 0,
              "slot": "161",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:62"
            },
            {
              "label": "_marketMakerByVaults",
              "offset": 0,
              "slot": "162",
              "type": "t_mapping(t_address,t_address)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:65"
            },
            {
              "label": "_vaultSettings",
              "offset": 0,
              "slot": "163",
              "type": "t_mapping(t_address,t_struct(RebalanceSetting)9706_storage)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:68"
            },
            {
              "label": "_makerVaults",
              "offset": 0,
              "slot": "164",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:71"
            },
            {
              "label": "_defaultMMAumFee",
              "offset": 0,
              "slot": "165",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:74"
            },
            {
              "label": "_transferIgnoreList",
              "offset": 0,
              "slot": "166",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:78"
            },
            {
              "label": "_defaultSequencerUptimeFeed",
              "offset": 0,
              "slot": "167",
              "type": "t_contract(IAggregatorV3)8657",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:81"
            },
            {
              "label": "_pairWhitelist",
              "offset": 0,
              "slot": "168",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:84"
            },
            {
              "label": "_depositToWithdrawCooldown",
              "offset": 0,
              "slot": "169",
              "type": "t_uint16",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:87"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "170",
              "type": "t_array(t_uint256)36_storage",
              "contract": "VaultFactory",
              "src": "contracts-metropolis/src/VaultFactory.sol:805"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)36_storage": {
              "label": "uint256[36]",
              "numberOfBytes": "1152"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IAggregatorV3)8657": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_enum(StrategyType)9691": {
              "label": "enum IVaultFactory.StrategyType",
              "members": [
                "None",
                "Default"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(VaultType)9688": {
              "label": "enum IVaultFactory.VaultType",
              "members": [
                "None",
                "Simple",
                "Oracle"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(StrategyType)9691)": {
              "label": "mapping(address => enum IVaultFactory.StrategyType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(VaultType)9688)": {
              "label": "mapping(address => enum IVaultFactory.VaultType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RebalanceSetting)9706_storage)": {
              "label": "mapping(address => struct IVaultFactory.RebalanceSetting)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)9691,t_address)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(StrategyType)9691,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.StrategyType => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)9688,t_address)": {
              "label": "mapping(enum IVaultFactory.VaultType => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(VaultType)9688,t_array(t_address)dyn_storage)": {
              "label": "mapping(enum IVaultFactory.VaultType => address[])",
              "numberOfBytes": "32"
            },
            "t_struct(RebalanceSetting)9706_storage": {
              "label": "struct IVaultFactory.RebalanceSetting",
              "members": [
                {
                  "label": "newLower",
                  "type": "t_uint24",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "newUpper",
                  "type": "t_uint24",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "desiredActiveId",
                  "type": "t_uint24",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "slippageActiveId",
                  "type": "t_uint24",
                  "offset": 9,
                  "slot": "0"
                },
                {
                  "label": "amountX",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountY",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "distributions",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts-metropolis/src/interfaces/IAggregatorV3.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault": {
        "src": "contracts-metropolis/src/interfaces/IBaseVault.sol:16",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "version()",
          "getFactory()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getStrategy()",
          "getAumAnnualFee()",
          "getRange()",
          "getOperators()",
          "getBalances()",
          "previewShares(uint256,uint256)",
          "previewAmounts(uint256)",
          "isDepositsPaused()",
          "getCurrentRound()",
          "getQueuedWithdrawal(uint256,address)",
          "getTotalQueuedWithdrawal(uint256)",
          "getCurrentTotalQueuedWithdrawal()",
          "getRedeemableAmounts(uint256,address)",
          "deposit(uint256,uint256,uint256)",
          "depositNative(uint256,uint256,uint256)",
          "queueWithdrawal(uint256,address)",
          "cancelQueuedWithdrawal(uint256)",
          "redeemQueuedWithdrawal(uint256,address)",
          "redeemQueuedWithdrawalNative(uint256,address)",
          "emergencyWithdraw()",
          "executeQueuedWithdrawals()",
          "initialize(string,string)",
          "setStrategy(address)",
          "pauseDeposits()",
          "resumeDeposits()",
          "setEmergencyMode()",
          "recoverERC20(address,address,uint256)",
          "isFlaggedForShutdown()",
          "submitShutdown()",
          "cancelShutdown()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IHooksRewarder.sol:IHooksRewarder": {
        "src": "contracts-metropolis/src/interfaces/IHooksRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "getExtraHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/ILBPairHooks.sol:ILBPairHooks": {
        "src": "contracts-metropolis/src/interfaces/ILBPairHooks.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBHooksParameters()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOneInchRouter.sol:IOneInchRouter": {
        "src": "contracts-metropolis/src/interfaces/IOneInchRouter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,(address,address,address payable,address payable,uint256,uint256,uint256),bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleHelper.sol:IOracleHelper": {
        "src": "contracts-metropolis/src/interfaces/IOracleHelper.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOracleParameters((uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setSequenzerUptimeFeed(address)",
          "setTwapParams(bool,uint40,uint256)",
          "checkPriceInDeviation()",
          "getPrice()",
          "getDataFeedX()",
          "getDataFeedY()",
          "getValueInY(uint256,uint256,uint256)",
          "getOracleParameters()",
          "getSequenzerUptimeFeed()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:IOracleRewardVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleRewardVault.sol:13",
        "inherit": [
          "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault",
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "getPendingRewards(address)",
          "claim()",
          "notifyRewardToken(address)",
          "updateAccRewardsPerShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IOracleVault.sol:IOracleVault": {
        "src": "contracts-metropolis/src/interfaces/IOracleVault.sol:18",
        "inherit": [
          "contracts-metropolis/src/interfaces/IBaseVault.sol:IBaseVault",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "getPrice()",
          "getOracleParameters()",
          "checkPriceInDeviation()",
          "getOracleHelper()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IPriceLens.sol:IPriceLens": {
        "src": "contracts-metropolis/src/interfaces/IPriceLens.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenPriceNative(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts-metropolis/src/interfaces/IStrategy.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getVault()",
          "getPair()",
          "getTokenX()",
          "getTokenY()",
          "getRange()",
          "getAumAnnualFee()",
          "getLastRebalance()",
          "getPendingAumAnnualFee()",
          "getRewardToken()",
          "getExtraRewardToken()",
          "hasRewards()",
          "hasExtraRewards()",
          "getOperator()",
          "getBalances()",
          "getIdleBalances()",
          "getMaxRange()",
          "initialize()",
          "withdrawAll()",
          "rebalance(uint24,uint24,uint24,uint24,uint256,uint256,bytes)",
          "setOperator(address)",
          "setPendingAumAnnualFee(uint16)",
          "resetPendingAumAnnualFee()",
          "harvestRewards()",
          "setRebalanceCoolDown(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IVaultFactory.sol:IVaultFactory": {
        "src": "contracts-metropolis/src/interfaces/IVaultFactory.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getWNative()",
          "getVaultAt(uint8,uint256)",
          "getVaultType(address)",
          "getStrategyAt(uint8,uint256)",
          "getStrategyType(address)",
          "getNumberOfVaults(uint8)",
          "getNumberOfStrategies(uint8)",
          "getDefaultOperator()",
          "getFeeRecipient()",
          "getFeeRecipientByVault(address)",
          "getVaultImplementation(uint8)",
          "getStrategyImplementation(uint8)",
          "getDepositToWithdrawCooldown()",
          "isTransferIgnored(address)",
          "getTransferIgnoreList()",
          "isPairWhitelisted(address)",
          "setVaultImplementation(uint8,address)",
          "setStrategyImplementation(uint8,address)",
          "setDefaultOperator(address)",
          "setOperator(address,address)",
          "setPendingAumAnnualFee(address,uint16)",
          "resetPendingAumAnnualFee(address)",
          "setFeeRecipient(address)",
          "setDefaultSequencerUptimeFeed(address)",
          "setSequenzerUptimeFeed(address,address)",
          "setOracleParameters(address,(uint256,uint256,uint24,uint24,uint256,bool,uint40))",
          "setPairWhitelist(address[],bool)",
          "createOracleVaultAndDefaultStrategy(address,address,address,uint24,uint24)",
          "createOracleVault(address,address,address,uint24,uint24)",
          "createDefaultStrategy(address)",
          "linkVaultToStrategy(address,address)",
          "setEmergencyMode(address)",
          "cancelShutdown(address)",
          "recoverERC20(address,address,address,uint256)",
          "setTransferIgnoreList(address[])",
          "setRebalanceCoolDown(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Constants.sol:Constants": {
        "src": "contracts-metropolis/src/libraries/Constants.sol:8",
        "version": {
          "withMetadata": "465cb4f370a23d642fced738e3cc381f61c3699c629f3e3a1dead012cd3cb8c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "eaddac53aa725b14bcae772e734937cc9936b5d4fba4294a3e7707e36f52800a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Math.sol:Math": {
        "src": "contracts-metropolis/src/libraries/Math.sol:10",
        "version": {
          "withMetadata": "3c98cece8c8a46e1abf21ade1a902f8fcf56f8e761047b2faca769aa3e0e2aea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/Precision.sol:Precision": {
        "src": "contracts-metropolis/src/libraries/Precision.sol:6",
        "version": {
          "withMetadata": "d68d48650d6962118397fc577feb7142f8b19406e574d4251e9f7699a32ad05c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts-metropolis/src/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/libraries/TokenHelper.sol:TokenHelper": {
        "src": "contracts-metropolis/src/libraries/TokenHelper.sol:10",
        "version": {
          "withMetadata": "895a70e1d0fa1a4072ae8c7f82b0d68dba82d2c9ebbaa80d67c41e4fd0a7c0b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "contracts-metropolis/src/utils/OracleLensAggregator.sol:OracleLensAggregator": {
        "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:9",
        "version": {
          "withMetadata": "7900acc47d50582f75fdbb9bc94e569f8266e43169f54d9721886c970a63d11f",
          "withoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50",
          "linkedWithoutMetadata": "16bf481e735a36f1973b3469d4f561d41cdfae10ed17f83a53c27ff75eed2d50"
        },
        "inherit": [
          "contracts-metropolis/src/interfaces/IAggregatorV3.sol:IAggregatorV3",
          "openzeppelin/access/Ownable.sol:Ownable",
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleLensAggregator",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lens",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts-metropolis/src/utils/OracleLensAggregator.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "d9f824a5d6934bd814e15da2d15cf325324b49d061114ee14cc942e49c620f3c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "e4659fd0c435a789a3df9150d8aacb451558f94bd3a64ba6058a11cb4eaad3ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "fcaa014161ea1d1fe52636e09c1d5a3dc670196ca57eef93cd1d157371518d8d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "f4a7854939b2e7a42626280047f53bfb869e3db784676907a8b4278514bdb99a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "a72a3058f1898729f7626b96ecbdd1a57e81150e0daf34921e03d4560f8384ee",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "6b32caed1e399106b4d28932712dab9e750fffbdb4605c6551450679f11ae65e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "327e9169a8b32c132e0301815a7dedd22ce152e9c4cb97123e4e187208e96e05",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "5fbe0c71f889e77f912cfba608a81bba5bde8150479cf65a86adbdcded3890c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "220ca904f85a0ee099fef8931998653e4f6f26bb0e191f25c02cd66af6d3d343",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "2c6dff62a1184c3dc21f43a2b59e4ab6de6477b68965bce6c12aa72ad9c1c164",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "f2b5fd24abfc28c3d62a171fe5ee1a51771254b076f011b8db17af30fd7c6546",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "e57896c3ccba1cf2c5c1f6f2114afb51c0f69ee23a3c160c842306b488dacb68",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "13f6745e624eec422c812f88c50338fcea76d7c2f7244646bffe9f0b4abbc303",
          "withoutMetadata": "ed5b4de26565da38935df3308174ea9b58934a099d03e12be32a592e9db68757",
          "linkedWithoutMetadata": "ed5b4de26565da38935df3308174ea9b58934a099d03e12be32a592e9db68757"
        },
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "22d8660aef962d2e28d9fda041bfb048bf96fc13c0ed32a12cb0cd16e43cc1ce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "22244778d2ca41863fefabae120d4604e5e9805f09721a34cdc3b871a5db7df3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "513e246607ed328f11c6d1a011122f4e4c736120e1f5d4e9da93bc906f2ac511",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "025cd388bece95c86767a1cb2f5d773a161baeffee94866c990c81cacf2937e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4b1cf89a6486894887a976012687b8ebf2da8455b4b415ec04675adf36a446dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "f77559981d0b96d541d2a6580332851281435c7178d4462b27eacc32300840a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.10"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "65e1935f897247c753735e1c48d0897487a9f52320ebcb0d6e823899b9da3084",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1ba720802922ae6402adf9cab77ff8e452c5005b9dc6e1138ac3464b37bc076f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0293c1f81927a4d53228f0a9048ef3dd42e60d2e735f5bc58259a249f78d386a",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "f65e829a5f483562c42ccaa4bb29e4ac7b3af82166d8703708b4629e6970301d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/interfaces/IWNative.sol:IWNative": {
        "src": "contracts-metropolis/src/interfaces/IWNative.sol:12",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts-metropolis/src/libraries/Hooks.sol:Hooks": {
        "src": "contracts-metropolis/src/libraries/Hooks.sol:8",
        "version": {
          "withMetadata": "8de89f3ed8fd459008581b5d7b8f9cc67fed6ad541b9571f3d703d015f72be69",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ArcaFeeManagerV1.sol:ArcaFeeManagerV1": {
        "src": "contracts/ArcaFeeManagerV1.sol:12",
        "version": {
          "withMetadata": "81f50ef8067e96d3be030a907ab703a486eafa02a1c46bc3024e6540e29dadc7",
          "withoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c",
          "linkedWithoutMetadata": "9b1536cd4dad841a181b846c32d9d24c7c5600de07a006505840ee0f936ea23c"
        },
        "inherit": [
          "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "setFees(uint256,uint256,uint256)",
          "setFeeRecipient(address)",
          "getDepositFee()",
          "getWithdrawFee()",
          "getPerformanceFee()",
          "getFeeRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositFee",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:17"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:18"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:19"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ArcaFeeManagerV1",
              "src": "contracts/ArcaFeeManagerV1.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/Staking/MetroShadowStaking.sol:MetroShadowStaking": {
        "src": "contracts/Staking/MetroShadowStaking.sol:15",
        "version": {
          "withMetadata": "99ab9e55560bf8d3ca8c72b1fcf5167b10a22584301464bd9e2bb4e5f6a6a78c",
          "withoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed",
          "linkedWithoutMetadata": "662089bd029bf087a09259f73e7b442835ec3463cc0f76091debecfaef30a9ed"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "stakeMetro(uint256,uint256)",
          "emergencyExit(uint256)",
          "unlockMetro(uint256)",
          "stakeX33(uint256)",
          "unstakeX33(uint256)",
          "getUserMetroPositions(address)",
          "getUserX33Positions(address)",
          "calculateCurrentPenalty(address,uint256)",
          "getAvailableExitCapacity()",
          "getPendingRebaseRewards(address)",
          "updateStakingTier(uint256,uint256,uint256,uint256)",
          "triggerRebaseDistribution()",
          "emergencyWithdraw(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MetroShadowStaking",
            "src": "contracts/Staking/MetroShadowStaking.sol:108"
          },
          {
            "kind": "state-variable-immutable",
            "name": "METRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "X33_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NMETRO_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NSHADOW_TOKEN",
            "src": "contracts/Staking/MetroShadowStaking.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "stakingTiers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:35"
            },
            {
              "label": "userMetroPositions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:57"
            },
            {
              "label": "userX33Positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:58"
            },
            {
              "label": "piggyBankBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:61"
            },
            {
              "label": "totalPendingRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:62"
            },
            {
              "label": "totalMetroStaked",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:65"
            },
            {
              "label": "totalNMetroMinted",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:66"
            },
            {
              "label": "totalX33Staked",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:67"
            },
            {
              "label": "totalNShadowMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:68"
            },
            {
              "label": "userRebaseIndex",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:71"
            },
            {
              "label": "globalRebaseIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:72"
            },
            {
              "label": "rebaseRewardsPerToken",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "MetroShadowStaking",
              "src": "contracts/Staking/MetroShadowStaking.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(X33StakePosition)3734_storage)dyn_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(MetroStakePosition)3725_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.MetroStakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(X33StakePosition)3734_storage)dyn_storage)": {
              "label": "mapping(address => struct MetroShadowStaking.X33StakePosition[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingTier)3705_storage)": {
              "label": "mapping(uint256 => struct MetroShadowStaking.StakingTier)",
              "numberOfBytes": "32"
            },
            "t_struct(MetroStakePosition)3725_storage": {
              "label": "struct MetroShadowStaking.MetroStakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nMetroAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tierId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rebaseRewardsReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(StakingTier)3705_storage": {
              "label": "struct MetroShadowStaking.StakingTier",
              "members": [
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "penaltyRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(X33StakePosition)3734_storage": {
              "label": "struct MetroShadowStaking.X33StakePosition",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nShadowAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/TokenTypes.sol:TokenValidator": {
        "src": "contracts/TokenTypes.sol:5",
        "version": {
          "withMetadata": "a1be82b276d007e36cdbe3561db35a73c8c1eebdae96bab379231a09c75ea397",
          "withoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd",
          "linkedWithoutMetadata": "ada271d1468299bfa53bedac1525e3e2c53e25c0c4f39144b90c224fb1134edd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/deployment/ArcaVaultRegistry.sol:ArcaVaultRegistry": {
        "src": "contracts/deployment/ArcaVaultRegistry.sol:12",
        "version": {
          "withMetadata": "f18d6ba9255a90a55d5bb639de040356eaa208df86b82a2f82348864b569d14b",
          "withoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91",
          "linkedWithoutMetadata": "028bc01039617866e2fdf1d3e0ca450335a482bd3824b37f104104d026097b91"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "registerVault(address,address,address,address,address,address,string,string,uint256,bool)",
          "deactivateVault(address,string)",
          "activateVault(address)",
          "getVaultsByTokenPair(address,address)",
          "getActiveVaults()",
          "getVaultCount()",
          "getVaultInfo(address)",
          "getVaultDetails(address)",
          "getVaultComponents(address)",
          "isActiveVault(address)",
          "getDeploymentInfo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcaVaultRegistry",
            "src": "contracts/deployment/ArcaVaultRegistry.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "vaultInfo",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(VaultInfo)4953_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:29"
            },
            {
              "label": "vaultList",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:30"
            },
            {
              "label": "isRegisteredVault",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:31"
            },
            {
              "label": "vaultsByTokenPair",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
              "contract": "ArcaVaultRegistry",
              "src": "contracts/deployment/ArcaVaultRegistry.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(VaultInfo)4953_storage)": {
              "label": "mapping(address => struct ArcaVaultRegistry.VaultInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
              "label": "mapping(bytes32 => address[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(VaultInfo)4953_storage": {
              "label": "struct ArcaVaultRegistry.VaultInfo",
              "members": [
                {
                  "label": "vault",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardClaimer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "queueHandler",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeManager",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "tokenX",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "tokenY",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "deploymentTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deployer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "9"
                },
                {
                  "label": "isProxy",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaFeeManagerV1.sol:IArcaFeeManagerV1": {
        "src": "contracts/interfaces/IArcaFeeManagerV1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "BASIS_POINTS()",
          "getDepositFee()",
          "getFeeRecipient()",
          "getPerformanceFee()",
          "getWithdrawFee()",
          "setFeeRecipient(address)",
          "setFees(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1": {
        "src": "contracts/interfaces/IArcaQueueHandlerV1.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositQueueStart()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getDepositQueueTrailingSlice()",
          "getPendingDepositRequests()",
          "getPendingDepositsCount()",
          "getPendingWithdrawRequests()",
          "getPendingWithdrawsCount()",
          "getQueuedToken(uint8)",
          "getWithdrawQueueLength()",
          "getWithdrawQueueTrailingSlice()",
          "reduceQueuedToken(uint256,uint8)",
          "withdrawQueueStart()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1": {
        "src": "contracts/interfaces/IArcaRewardClaimerV1.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimAndCompoundRewards()",
          "claimRewards(uint256[],address)",
          "getExpectedSwapOutput(uint256,address)",
          "getVaultBinIds()",
          "idSlippage()",
          "minSwapAmount()",
          "nativeToken()",
          "setMinSwapAmount(uint256)",
          "setRewarder(address)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible": {
        "src": "contracts/interfaces/IDepositWithdrawCompatible.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:ILBHooksBaseRewarder": {
        "src": "contracts/interfaces/Metropolis/ILBHooksBaseRewarder.sol:11",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks"
        ],
        "libraries": [],
        "methods": [
          "getRewardToken()",
          "getLBHooksManager()",
          "isStopped()",
          "getRewardedRange()",
          "getPendingRewards(address,uint256[])",
          "claim(address,uint256[])",
          "setDeltaBins(int24,int24)",
          "sweep(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/ILBRouter.sol:ILBRouter": {
        "src": "contracts/interfaces/Metropolis/ILBRouter.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity((address,address,uint16,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/interfaces/Metropolis/IPair.sol:IPair": {
        "src": "contracts/interfaces/Metropolis/IPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "feeAmount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:6",
        "version": {
          "withMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "withoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2",
          "linkedWithoutMetadata": "25f2f86a0f67a4d82b4f773578a0c0cfb3d516a86c0af1bbb03d1bee50691ad2"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,address)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/mocks/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBHooksBaseRewarder.sol:MockLBHooksBaseRewarder": {
        "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:6",
        "version": {
          "withMetadata": "a306dfdd90078adb991ae056fe11ee0d0e049ecd09318d058814d39710d3daf9",
          "withoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef",
          "linkedWithoutMetadata": "2f30ede47017e3927ca2bef6a0e2086142f5092be72ba8410bef7da3dcd5d8ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setRewardToken(address)",
          "setClaimAmount(uint256)",
          "setShouldFail(bool)",
          "claim(address,uint256[])",
          "pendingRewards(address,uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:7"
            },
            {
              "label": "claimAmount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MockLBHooksBaseRewarder",
              "src": "contracts/mocks/MockLBHooksBaseRewarder.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBPair.sol:MockLBPair": {
        "src": "contracts/mocks/MockLBPair.sol:6",
        "version": {
          "withMetadata": "32abfc4d5ff5d1173883af8afae445a83564c786bc964bc6ea85618bf4647f0c",
          "withoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47",
          "linkedWithoutMetadata": "7dc3574a7c67f6f5e8037df8f58eaa0d42a4d97c2d177dbc3cfb728c09255d47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint16)",
          "getActiveId()",
          "setActiveId(uint24)",
          "getBinStep()",
          "getTokenX()",
          "getTokenY()",
          "getPriceFromId(uint24)",
          "getReserves()",
          "getLBHooksParameters()",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "balanceOf(address,uint256)",
          "totalSupply(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "activeId",
            "src": "contracts/mocks/MockLBPair.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "binStep",
            "src": "contracts/mocks/MockLBPair.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "activeId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint24",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:7"
            },
            {
              "label": "binStep",
              "offset": 3,
              "slot": "0",
              "type": "t_uint16",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:8"
            },
            {
              "label": "tokenX",
              "offset": 5,
              "slot": "0",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:9"
            },
            {
              "label": "tokenY",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)2096",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:10"
            },
            {
              "label": "reserveX",
              "offset": 0,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:11"
            },
            {
              "label": "reserveY",
              "offset": 16,
              "slot": "2",
              "type": "t_uint128",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:12"
            },
            {
              "label": "userLiquidity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:15"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "MockLBPair",
              "src": "contracts/mocks/MockLBPair.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockLBRouter.sol:MockLBRouter": {
        "src": "contracts/mocks/MockLBRouter.sol:7",
        "version": {
          "withMetadata": "7fec49ead98bc2fe355568292430616d863b3a035adbb870e35257f2dea5876f",
          "withoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0",
          "linkedWithoutMetadata": "469b9278821cce32612046a3a9e7663418632de471fbdceddbb58bf32d6efab0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setSwapOutputForToken(address,uint256)",
          "setShouldFail(bool)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "tokenSwapOutputs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:8"
            },
            {
              "label": "shouldFail",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "MockLBRouter",
              "src": "contracts/mocks/MockLBRouter.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaQueueHandlerV1.sol:ArcaQueueHandlerV1": {
        "src": "contracts/vaults/ArcaQueueHandlerV1.sol:16",
        "version": {
          "withMetadata": "18f935ccf6fdf6e89890b4014055dc1642dd0220e08461a576db5b0f2729afee",
          "withoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14",
          "linkedWithoutMetadata": "23b71c694562f947949a9970f1c2ec71e8bff2fa2fc1393ddf366223c45b2a14"
        },
        "inherit": [
          "contracts/interfaces/IArcaQueueHandlerV1.sol:IArcaQueueHandlerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "getQueuedToken(uint8)",
          "()",
          "initialize()",
          "reduceQueuedToken(uint256,uint8)",
          "getPendingDepositRequests()",
          "getDepositQueueTrailingSlice()",
          "getPendingWithdrawRequests()",
          "getWithdrawQueueTrailingSlice()",
          "enqueueDepositRequest((address,uint256,uint8,uint256))",
          "enqueueWithdrawRequest((address,uint256[2],uint256))",
          "getDepositQueueLength()",
          "getWithdrawQueueLength()",
          "getPendingDepositsCount()",
          "getPendingWithdrawsCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "depositQueue",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_struct(DepositRequest)5732_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:24"
            },
            {
              "label": "withdrawQueue",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:25"
            },
            {
              "label": "depositQueueStart",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:26"
            },
            {
              "label": "withdrawQueueStart",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:27"
            },
            {
              "label": "_queuedTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_uint256)40_storage",
              "contract": "ArcaQueueHandlerV1",
              "src": "contracts/vaults/ArcaQueueHandlerV1.sol:219"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(DepositRequest)5732_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(WithdrawRequest)5741_storage)dyn_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)40_storage": {
              "label": "uint256[40]",
              "numberOfBytes": "1280"
            },
            "t_enum(Type)4917": {
              "label": "enum TokenValidator.Type",
              "members": [
                "TokenX",
                "TokenY"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(DepositRequest)5732_storage": {
              "label": "struct IDepositWithdrawCompatible.DepositRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenType",
                  "type": "t_enum(Type)4917",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(WithdrawRequest)5741_storage": {
              "label": "struct IDepositWithdrawCompatible.WithdrawRequest",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "shares",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaRewardClaimerV1.sol:ArcaRewardClaimerV1": {
        "src": "contracts/vaults/ArcaRewardClaimerV1.sol:30",
        "version": {
          "withMetadata": "d48a8679ca6b6516cbf77f4cc91e34cf2f2c1aad0fd6321042284d157d674ba2",
          "withoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6",
          "linkedWithoutMetadata": "8c5f08d19c3196aadefd89feb7fd9af4af0683a9552bac0225a031595220dab6"
        },
        "inherit": [
          "contracts/interfaces/IArcaRewardClaimerV1.sol:IArcaRewardClaimerV1",
          "contracts/TokenTypes.sol:TokenValidator",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address,address,address,address,address,uint256,address,address)",
          "getTotalCompounded(uint8)",
          "setMinSwapAmount(uint256)",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setRewarder(address)",
          "claimAndCompoundRewards()",
          "getVaultBinIds()",
          "getExpectedSwapOutput(uint256,address)",
          "claimRewards(uint256[],address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_rewarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:39"
            },
            {
              "label": "_rewardToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:40"
            },
            {
              "label": "_feeManager",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:41"
            },
            {
              "label": "minSwapAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:42"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_contract(IERC20)2096)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:43"
            },
            {
              "label": "nativeToken",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:46"
            },
            {
              "label": "metroToTokenPaths",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_struct(Path)24970_storage)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:49"
            },
            {
              "label": "metroToNativePath",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Path)24970_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:50"
            },
            {
              "label": "totalCompounded",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:53"
            },
            {
              "label": "_lbpContract",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:55"
            },
            {
              "label": "_lbpContractUSD",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:56"
            },
            {
              "label": "_lpAMM",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:57"
            },
            {
              "label": "_lbRouter",
              "offset": 0,
              "slot": "21",
              "type": "t_address",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:58"
            },
            {
              "label": "idSlippage",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:59"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "23",
              "type": "t_array(t_uint256)30_storage",
              "contract": "ArcaRewardClaimerV1",
              "src": "contracts/vaults/ArcaRewardClaimerV1.sol:434"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_contract(IERC20)2096)dyn_storage": {
              "label": "contract IERC20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_enum(Version)24920)dyn_storage": {
              "label": "enum ILBRouter.Version[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Path)24970_storage)2_storage": {
              "label": "struct ILBRouter.Path[2]",
              "numberOfBytes": "192"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)30_storage": {
              "label": "uint256[30]",
              "numberOfBytes": "960"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(Version)24920": {
              "label": "enum ILBRouter.Version",
              "members": [
                "V1",
                "V2",
                "V2_1",
                "V2_2"
              ],
              "numberOfBytes": "1"
            },
            "t_struct(Path)24970_storage": {
              "label": "struct ILBRouter.Path",
              "members": [
                {
                  "label": "pairBinSteps",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "versions",
                  "type": "t_array(t_enum(Version)24920)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenPath",
                  "type": "t_array(t_contract(IERC20)2096)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/vaults/ArcaTestnetV1.sol:ArcaTestnetV1": {
        "src": "contracts/vaults/ArcaTestnetV1.sol:43",
        "version": {
          "withMetadata": "fe5fd3eef9a92873f67b3f9100df1ecfa290b034c1cfc57b26db4d4139f3c61e",
          "withoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd",
          "linkedWithoutMetadata": "1d337b3dcfa5d64dd57498422aa3b4f0d722f56927d5e463d562050cf193aecd"
        },
        "inherit": [
          "contracts/TokenTypes.sol:TokenValidator",
          "contracts/interfaces/IDepositWithdrawCompatible.sol:IDepositWithdrawCompatible",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint16,uint256,uint256,address,address,address,address,address,address)",
          "tokenBalance(uint8)",
          "totalSupply(uint8)",
          "getPricePerFullShare(uint8)",
          "depositAll(uint8)",
          "depositToken(uint256,uint8)",
          "withdrawAll()",
          "withdrawTokenShares(uint256[2])",
          "withdraw(uint256)",
          "setRewarder(address)",
          "rebalance((int256[],uint256[],uint256[],uint256[],uint256[],uint256,uint256,address,address,uint256,bool))",
          "setSwapPaths((uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]),(uint256[],enum ILBRouter.Version[],contract IERC20[]))",
          "setMinSwapAmount(uint256)",
          "inCaseTokensGetStuck(address)",
          "balanceSharesCombined(address)",
          "getShares(address,uint8)",
          "getUserShares(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "vaultConfig",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(VaultConfig)8652_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:74"
            },
            {
              "label": "feeManager",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IArcaFeeManagerV1)5553",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:75"
            },
            {
              "label": "queueHandler",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IArcaQueueHandlerV1)5646",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:76"
            },
            {
              "label": "rewardClaimer",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IArcaRewardClaimerV1)5718",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:77"
            },
            {
              "label": "lastAddLiquidityBinIds",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:80"
            },
            {
              "label": "totalShares",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)2_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:83"
            },
            {
              "label": "shares",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:84"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_uint256)35_storage",
              "contract": "ArcaTestnetV1",
              "src": "contracts/vaults/ArcaTestnetV1.sol:691"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)221_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_contract(IERC20)2096)2_storage": {
              "label": "contract IERC20[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)35_storage": {
              "label": "uint256[35]",
              "numberOfBytes": "1120"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(IArcaFeeManagerV1)5553": {
              "label": "contract IArcaFeeManagerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaQueueHandlerV1)5646": {
              "label": "contract IArcaQueueHandlerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IArcaRewardClaimerV1)5718": {
              "label": "contract IArcaRewardClaimerV1",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)2096": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_struct(VaultConfig)8652_storage": {
              "label": "struct ArcaTestnetV1.VaultConfig",
              "members": [
                {
                  "label": "tokens",
                  "type": "t_array(t_contract(IERC20)2096)2_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "binStep",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amountMins",
                  "type": "t_array(t_uint256)2_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lbRouter",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lbpAMM",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "lbpContract",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2cddd30dd1589b472ba8ad102d2de8cfa79690fdfbe305adc880fde647d69b81",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2-periphery/periphery/LiquidityAmounts.sol:LiquidityAmounts": {
        "src": "joe-v2-periphery/periphery/LiquidityAmounts.sol:16",
        "version": {
          "withMetadata": "ef1e676f19969f85a7821c4a06f4a977ca3acbba815ed68ce56e632c2bb74094",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/PriceHelper.sol:PriceHelper",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "joe-v2/interfaces/ILBFactory.sol:15",
        "inherit": [
          "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable"
        ],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "joe-v2/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBPair.sol:ILBPair": {
        "src": "joe-v2/interfaces/ILBPair.sol:11",
        "inherit": [
          "joe-v2/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/ILBToken.sol:ILBToken": {
        "src": "joe-v2/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/interfaces/IPendingOwnable.sol:IPendingOwnable": {
        "src": "joe-v2/interfaces/IPendingOwnable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "pendingOwner()",
          "setPendingOwner(address)",
          "revokePendingOwner()",
          "becomeOwner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Clone.sol:Clone": {
        "src": "joe-v2/libraries/Clone.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/Constants.sol:Constants": {
        "src": "joe-v2/libraries/Constants.sol:10",
        "version": {
          "withMetadata": "7ab81492d29bdeda8d25be994ea83ce9692409bd82dc39f16f816a5956dd058e",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/ImmutableClone.sol:ImmutableClone": {
        "src": "joe-v2/libraries/ImmutableClone.sol:20",
        "version": {
          "withMetadata": "36ae28cea8907b972d4b2abb56ea084e392affafab0814d57d68a1eb2480b780",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/PriceHelper.sol:PriceHelper": {
        "src": "joe-v2/libraries/PriceHelper.sol:15",
        "version": {
          "withMetadata": "d7f01f204c2ba3668cdb41b4d4c0601cdf71b0c4d25b085f2fe980de9f59764d",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math",
          "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math",
          "joe-v2/libraries/math/SafeCast.sol:SafeCast",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/BitMath.sol:BitMath": {
        "src": "joe-v2/libraries/math/BitMath.sol:10",
        "version": {
          "withMetadata": "dc6ea4f3f50982240964d716942bc0f7fa56054bf46b06907cb65cbcf38a3c8f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Encoded.sol:Encoded": {
        "src": "joe-v2/libraries/math/Encoded.sol:10",
        "version": {
          "withMetadata": "b8d1bec08f899acb8947d02acca94c21236ebcc9e944604484caf0f2e15e29f4",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/LiquidityConfigurations.sol:LiquidityConfigurations": {
        "src": "joe-v2/libraries/math/LiquidityConfigurations.sol:13",
        "version": {
          "withMetadata": "7019851d09fb231e54134833ce6c4ad6867dabd8e30a38985e5fd4f57db8e924",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math",
          "joe-v2/libraries/math/Encoded.sol:Encoded"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/PackedUint128Math.sol:PackedUint128Math": {
        "src": "joe-v2/libraries/math/PackedUint128Math.sol:13",
        "version": {
          "withMetadata": "43473962742e4c5d36b1fd3a556053d03839b6481d6079583bdb53c1efe9fe09",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/SafeCast.sol:SafeCast": {
        "src": "joe-v2/libraries/math/SafeCast.sol:10",
        "version": {
          "withMetadata": "4acd704fa58734510fc96756d7baf53e621fb738aa6c971ee5da2de1e94bb175",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint128x128Math.sol:Uint128x128Math": {
        "src": "joe-v2/libraries/math/Uint128x128Math.sol:13",
        "version": {
          "withMetadata": "dea6c0d13c30ca26cd23518c865c5fae5e1c5d5ede045609a6e2439b6de60b49",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "joe-v2/libraries/math/BitMath.sol:BitMath",
          "joe-v2/libraries/Constants.sol:Constants"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "joe-v2/libraries/math/Uint256x256Math.sol:Uint256x256Math": {
        "src": "joe-v2/libraries/math/Uint256x256Math.sol:10",
        "version": {
          "withMetadata": "9bff36686e9bfa56639d842c887cf722d56dcf607ac21498bbd50e7e9ae328e8",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IJoeFactory.sol:IJoeFactory": {
        "src": "lib/joe-v2/src/interfaces/IJoeFactory.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFactory.sol:ILBFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBFactory.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMinBinStep()",
          "getFeeRecipient()",
          "getMaxFlashLoanFee()",
          "getFlashLoanFee()",
          "getLBPairImplementation()",
          "getNumberOfLBPairs()",
          "getLBPairAtIndex(uint256)",
          "getNumberOfQuoteAssets()",
          "getQuoteAssetAtIndex(uint256)",
          "isQuoteAsset(address)",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint256)",
          "getAllBinSteps()",
          "getOpenBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint16,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)",
          "setPresetOpenState(uint16,bool)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setLBHooksParametersOnPair(address,address,uint16,bytes32,bytes)",
          "removeLBHooksOnPair(address,address,uint16)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:ILBFlashLoanCallback": {
        "src": "lib/joe-v2/src/interfaces/ILBFlashLoanCallback.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "LBFlashLoanCallback(address,address,address,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBHooks.sol:ILBHooks": {
        "src": "lib/joe-v2/src/interfaces/ILBHooks.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLBPair()",
          "isLinked()",
          "onHooksSet(bytes32,bytes)",
          "beforeSwap(address,address,bool,bytes32)",
          "afterSwap(address,address,bool,bytes32)",
          "beforeFlashLoan(address,address,bytes32)",
          "afterFlashLoan(address,address,bytes32,bytes32)",
          "beforeMint(address,address,bytes32[],bytes32)",
          "afterMint(address,address,bytes32[],bytes32)",
          "beforeBurn(address,address,address,uint256[],uint256[])",
          "afterBurn(address,address,address,uint256[],uint256[])",
          "beforeBatchTransferFrom(address,address,address,uint256[],uint256[])",
          "afterBatchTransferFrom(address,address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:ILBLegacyFactory": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyFactory.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "MIN_BIN_STEP()",
          "MAX_BIN_STEP()",
          "MAX_PROTOCOL_SHARE()",
          "LBPairImplementation()",
          "getNumberOfQuoteAssets()",
          "getQuoteAsset(uint256)",
          "isQuoteAsset(address)",
          "feeRecipient()",
          "flashLoanFee()",
          "creationUnlocked()",
          "allLBPairs(uint256)",
          "getNumberOfLBPairs()",
          "getLBPairInformation(address,address,uint256)",
          "getPreset(uint16)",
          "getAllBinSteps()",
          "getAllLBPairs(address,address)",
          "setLBPairImplementation(address)",
          "createLBPair(address,address,uint24,uint16)",
          "setLBPairIgnored(address,address,uint256,bool)",
          "setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint16)",
          "removePreset(uint16)",
          "setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setFeeRecipient(address)",
          "setFlashLoanFee(uint256)",
          "setFactoryLockedState(bool)",
          "addQuoteAsset(address)",
          "removeQuoteAsset(address)",
          "forceDecay(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:ILBLegacyPair": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "tokenX()",
          "tokenY()",
          "factory()",
          "getReservesAndId()",
          "getGlobalFees()",
          "getOracleParameters()",
          "getOracleSampleFrom(uint256)",
          "feeParameters()",
          "findFirstNonEmptyBinId(uint24,bool)",
          "getBin(uint24)",
          "pendingFees(address,uint256[])",
          "swap(bool,address)",
          "flashLoan(address,address,uint256,bytes)",
          "mint(uint256[],uint256[],uint256[],address)",
          "burn(uint256[],uint256[],address)",
          "increaseOracleLength(uint16)",
          "collectFees(address,uint256[])",
          "collectProtocolFees()",
          "setFeesParameters(bytes32)",
          "forceDecay()",
          "initialize(address,address,uint24,uint16,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:ILBLegacyRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyRouter.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "wavax()",
          "oldFactory()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint256,bool)",
          "getSwapOut(address,uint256,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "addLiquidityAVAX((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityAVAX(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapTokensForExactAVAX(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapAVAXForExactTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address,uint256)",
          "swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256,uint256,uint256[],contract IERC20[],address payable,uint256)",
          "swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256,uint256[],contract IERC20[],address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:ILBLegacyToken": {
        "src": "lib/joe-v2/src/interfaces/ILBLegacyToken.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "totalSupply(uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "safeTransferFrom(address,address,uint256,uint256)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBPair.sol:ILBPair": {
        "src": "lib/joe-v2/src/interfaces/ILBPair.sol:12",
        "inherit": [
          "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint16,uint16,uint16,uint16,uint24,uint16,uint24,uint24)",
          "implementation()",
          "getFactory()",
          "getTokenX()",
          "getTokenY()",
          "getBinStep()",
          "getReserves()",
          "getActiveId()",
          "getBin(uint24)",
          "getNextNonEmptyBin(bool,uint24)",
          "getProtocolFees()",
          "getStaticFeeParameters()",
          "getLBHooksParameters()",
          "getVariableFeeParameters()",
          "getOracleParameters()",
          "getOracleSampleAt(uint40)",
          "getPriceFromId(uint24)",
          "getIdFromPrice(uint256)",
          "getSwapIn(uint128,bool)",
          "getSwapOut(uint128,bool)",
          "swap(bool,address)",
          "flashLoan(address,bytes32,bytes)",
          "mint(address,bytes32[],address)",
          "burn(address,address,uint256[],uint256[])",
          "collectProtocolFees()",
          "increaseOracleLength(uint16)",
          "setStaticFeeParameters(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
          "setHooksParameters(bytes32,bytes)",
          "forceDecay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBRouter.sol:ILBRouter": {
        "src": "lib/joe-v2/src/interfaces/ILBRouter.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFactory()",
          "getFactoryV2_1()",
          "getLegacyFactory()",
          "getV1Factory()",
          "getLegacyRouter()",
          "getWNATIVE()",
          "getIdFromPrice(address,uint256)",
          "getPriceFromId(address,uint24)",
          "getSwapIn(address,uint128,bool)",
          "getSwapOut(address,uint128,bool)",
          "createLBPair(address,address,uint24,uint16)",
          "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))",
          "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)",
          "removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address payable,uint256)",
          "swapExactTokensForTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapTokensForExactNATIVE(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapNATIVEForExactTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address payable,uint256)",
          "swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],enum ILBRouter.Version[],contract IERC20[]),address,uint256)",
          "sweep(address,address,uint256)",
          "sweepLBToken(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/ILBToken.sol:ILBToken": {
        "src": "lib/joe-v2/src/interfaces/ILBToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "totalSupply(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "isApprovedForAll(address,address)",
          "approveForAll(address,bool)",
          "batchTransferFrom(address,address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/interfaces/IWNATIVE.sol:IWNATIVE": {
        "src": "lib/joe-v2/src/interfaces/IWNATIVE.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "lib/joe-v2/src/libraries/Hooks.sol:Hooks": {
        "src": "lib/joe-v2/src/libraries/Hooks.sol:10",
        "version": {
          "withMetadata": "a779a19a3e24a601b4b68aacc3ca7979573821e23c72ef9241b65486a044e462",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:20",
        "inherit": [
          "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_pendingOwner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:27"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "Ownable2StepUpgradeable",
              "src": "openzeppelin-upgradeable/access/Ownable2StepUpgradeable.sol:70"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "openzeppelin-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "cfc6a26ea5387b588b31db86bc5806f478ffcb78eb5a7ba6b19b45e8b06f8b2f",
          "withoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b",
          "linkedWithoutMetadata": "d3ca82835832feabd978db3d6edcdc487eeebbb5f1916d7ab2098217d894561b"
        },
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "openzeppelin-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "8294a457a80209145b3b607e80054c4e96b8fafb319f1362deb8f2dc2f37726f",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "4fa5b16723fcb33d24077a2a25e310b875a51c394bc6e300f69f779de9e1dd58",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "openzeppelin-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "openzeppelin-upgradeable/utils/StringsUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/access/Ownable.sol:Ownable": {
        "src": "openzeppelin/access/Ownable.sol:20",
        "inherit": [
          "openzeppelin/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "openzeppelin/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "openzeppelin/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/IERC20.sol:IERC20": {
        "src": "openzeppelin/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "openzeppelin/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "d986ca163f34119923cb48da0229f59ecef5cb83010cf14516bff542d51dcabd",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [
          "openzeppelin/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Address.sol:Address": {
        "src": "openzeppelin/utils/Address.sol:9",
        "version": {
          "withMetadata": "e8cca26f7a8c70714472a11f5cbd24bc02200e6d26d4ddcd05e509342134beb0",
          "withoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6",
          "linkedWithoutMetadata": "5cc1bfa58dabc87945e465d5d147adca6f09e6451b735c6cce7bc6ca5cb48ba6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "openzeppelin/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "openzeppelin/utils/Context.sol:Context": {
        "src": "openzeppelin/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    }
  ]
}