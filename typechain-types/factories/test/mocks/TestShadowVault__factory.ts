/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestShadowVault,
  TestShadowVaultInterface,
} from "../../../test/mocks/TestShadowVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "decimalsX",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "decimalsY",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256",
      },
    ],
    name: "previewShares",
    outputs: [
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "effectiveX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "effectiveY",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalBalanceX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalBalanceY",
        type: "uint256",
      },
    ],
    name: "setTotalBalances",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "setTotalSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506040516104fb3803806104fb833981016040819052602c916086565b600080546001600160a01b039094166001600160a01b0319909416939093179092556004805460ff9384166101000261ffff19909116939092169290921717905560d1565b805160ff81168114608157600080fd5b919050565b600080600060608486031215609a57600080fd5b83516001600160a01b038116811460b057600080fd5b925060bc602085016071565b915060c8604085016071565b90509250925092565b61041b806100e06000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063026b1d5f146100675780632baf57d314610087578063534947ae146100a25780638d8d0d75146100d0578063c4e41b22146100eb578063f7ea7a3d146100fc575b600080fd5b6000546040516001600160a01b0390911681526020015b60405180910390f35b6002546003546040805192835260208301919091520161007e565b6100b56100b0366004610245565b61010f565b6040805193845260208401929092529082015260600161007e565b6100e96100de366004610245565b600291909155600355565b005b60015460405190815260200161007e565b6100e961010a366004610267565b600155565b600080808415801561011f575083155b15610132575060009150819050806101ff565b63773594006000610144828888610206565b90506001546000036101645761015d620f424082610296565b94506101f6565b600061017583600254600354610206565b9050806000036101d95760405162461bcd60e51b815260206004820152602560248201527f4469766973696f6e206279207a65726f3a20746f74616c2076616c7565206973604482015264207a65726f60d81b606482015260840160405180910390fd5b80600154836101e89190610296565b6101f291906102b3565b9550505b86935085925050505b9250925092565b600454600090819061021c9060ff16600a6103bc565b6102268686610296565b61023091906102b3565b905061023c83826103d2565b95945050505050565b6000806040838503121561025857600080fd5b50508035926020909101359150565b60006020828403121561027957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102ad576102ad610280565b92915050565b6000826102d057634e487b7160e01b600052601260045260246000fd5b500490565b6001815b6001841115610310578085048111156102f4576102f4610280565b600184161561030257908102905b60019390931c9280026102d9565b935093915050565b600082610327575060016102ad565b81610334575060006102ad565b816001811461034a576002811461035457610370565b60019150506102ad565b60ff84111561036557610365610280565b50506001821b6102ad565b5060208310610133831016604e8410600b8410161715610393575081810a6102ad565b6103a060001984846102d5565b80600019048211156103b4576103b4610280565b029392505050565b60006103cb60ff841683610318565b9392505050565b808201808211156102ad576102ad61028056fea2646970667358221220b13a7626f2741e978a3126f3a836929abccfe24f5e9eb85bf66cb8425e1520a064736f6c634300081a0033";

type TestShadowVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestShadowVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestShadowVault__factory extends ContractFactory {
  constructor(...args: TestShadowVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    pool: AddressLike,
    decimalsX: BigNumberish,
    decimalsY: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      pool,
      decimalsX,
      decimalsY,
      overrides || {}
    );
  }
  override deploy(
    pool: AddressLike,
    decimalsX: BigNumberish,
    decimalsY: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(pool, decimalsX, decimalsY, overrides || {}) as Promise<
      TestShadowVault & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestShadowVault__factory {
    return super.connect(runner) as TestShadowVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestShadowVaultInterface {
    return new Interface(_abi) as TestShadowVaultInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestShadowVault {
    return new Contract(address, _abi, runner) as unknown as TestShadowVault;
  }
}
