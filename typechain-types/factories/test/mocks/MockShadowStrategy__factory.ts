/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockShadowStrategy,
  MockShadowStrategyInterface,
} from "../../../test/mocks/MockShadowStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenX",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Strategy__InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__InvalidFee",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__InvalidReceiver",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__InvalidToken",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyDefaultOperator",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyFactory",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyOperators",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyTrusted",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyVault",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__RebalanceCoolDown",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__ZeroAmounts",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "AumAnnualFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBalanceX",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBalanceY",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeX",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeY",
        type: "uint256",
      },
    ],
    name: "AumFeeCollected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "OperatorSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "PendingAumAnnualFeeReset",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "PendingAumAnnualFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "coolDown",
        type: "uint256",
      },
    ],
    name: "RebalanceCoolDownSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "stepCount",
        type: "uint256",
      },
    ],
    name: "RebalanceStepCount",
    type: "event",
  },
  {
    inputs: [],
    name: "getAumAnnualFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract IVaultFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIdleBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRebalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPendingAumAnnualFee",
    outputs: [
      {
        internalType: "bool",
        name: "isSet",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "pendingAumAnnualFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRewardTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getStrategyType",
    outputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenX",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenY",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "harvestRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "hasExtraRewards",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "hasRewards",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "resetPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "pendingAumAnnualFee",
        type: "uint16",
      },
    ],
    name: "setPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "coolDown",
        type: "uint256",
      },
    ],
    name: "setRebalanceCoolDown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161084238038061084283398101604081905261002f916100af565b600080546001600160a01b03199081166001600160a01b039687161790915560028054821694861694909417909355600380548416928516929092179091556004805483169190931617909155600580543392169190911790556064600655610103565b80516001600160a01b03811681146100aa57600080fd5b919050565b600080600080608085870312156100c557600080fd5b6100ce85610093565b93506100dc60208601610093565b92506100ea60408601610093565b91506100f860608601610093565b905092959194509250565b610730806101126000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c80637942fd47116100b8578063b3ab15fb1161007c578063b3ab15fb1461027a578063c4f59f9b146102aa578063da10610c146102c3578063ddadbf85146102dd578063e7f43c6814610301578063ecf04e15146101b657600080fd5b80637942fd471461021c5780638129fc1c14610230578063853828b61461024757806388cc58e41461024f5780638d928af81461026057600080fd5b806314af68f61161010a57806314af68f6146101465780631c776443146101c55780632be11ae2146101d757806338acf5cc146101d957806342595248146102015780634feb29641461020957600080fd5b8062113e0814610146578063026b1d5f1461016857806305e8746d1461018d5780630eb9b15a146101a75780631216bb95146101b6575b600080fd5b61014e610312565b604080519283526020830191909152015b60405180910390f35b6004546001600160a01b03165b6040516001600160a01b03909116815260200161015f565b731111111111111111111111111111111111111111610175565b600260405161015f91906105de565b6040516000815260200161015f565b6006545b60405190815260200161015f565b005b6101ea60075460085460ff90911691565b60408051921515835260208301919091520161015f565b6009546101c9565b6101d7610217366004610606565b600a55565b6101d76007805460ff191690556000600855565b6101d7600180546001600160a01b03191633179055565b6101d76103f7565b6000546001600160a01b0316610175565b731234567890123456789012345678901234567890610175565b6101d761028836600461061f565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160008152602081019182905261015f9161064f565b732222222222222222222222222222222222222222610175565b6101d76102eb36600461069b565b6007805460ff1916600117905561ffff16600855565b6005546001600160a01b0316610175565b6002546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038391906106bf565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef91906106bf565b915091509091565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046491906106bf565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d691906106bf565b905081156105595760025460015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb906044016020604051808303816000875af1158015610533573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055791906106d8565b505b80156105da5760035460015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d891906106d8565b505b5050565b602081016003831061060057634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561061857600080fd5b5035919050565b60006020828403121561063157600080fd5b81356001600160a01b038116811461064857600080fd5b9392505050565b602080825282518282018190526000918401906040840190835b818110156106905783516001600160a01b0316835260209384019390920191600101610669565b509095945050505050565b6000602082840312156106ad57600080fd5b813561ffff8116811461064857600080fd5b6000602082840312156106d157600080fd5b5051919050565b6000602082840312156106ea57600080fd5b8151801515811461064857600080fdfea26469706673582212209d7a7b38df6479eb27ef1639fb93325e4427dd671097b7e5f5c3c614447a911364736f6c634300081a0033";

type MockShadowStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockShadowStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockShadowStrategy__factory extends ContractFactory {
  constructor(...args: MockShadowStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    factory: AddressLike,
    tokenX: AddressLike,
    tokenY: AddressLike,
    pool: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      factory,
      tokenX,
      tokenY,
      pool,
      overrides || {}
    );
  }
  override deploy(
    factory: AddressLike,
    tokenX: AddressLike,
    tokenY: AddressLike,
    pool: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      factory,
      tokenX,
      tokenY,
      pool,
      overrides || {}
    ) as Promise<
      MockShadowStrategy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockShadowStrategy__factory {
    return super.connect(runner) as MockShadowStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockShadowStrategyInterface {
    return new Interface(_abi) as MockShadowStrategyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockShadowStrategy {
    return new Contract(address, _abi, runner) as unknown as MockShadowStrategy;
  }
}
