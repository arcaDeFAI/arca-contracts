/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockVaultFactory,
  MockVaultFactoryInterface,
} from "../../../test/mocks/MockVaultFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getDefaultOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDepositToWithdrawCooldown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getFeeRecipientByVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isTransferIgnored",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600080546001600160a01b03191633179055610194806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063512582501161005b57806351258250146100dd578063719a08a3146101015780638da5cb5b1461011b578063b80ec4c7146100cc57600080fd5b80630216386314610082578063443bc7af146100965780634ccb20c0146100cc575b600080fd5b604051600081526020015b60405180910390f35b6100b46100a436600461012e565b506000546001600160a01b031690565b6040516001600160a01b03909116815260200161008d565b6000546001600160a01b03166100b4565b6100f16100eb36600461012e565b50600090565b604051901515815260200161008d565b73039e2fb66102314ce7b64ce5ce3e5183bc94ad386100b4565b6000546100b4906001600160a01b031681565b60006020828403121561014057600080fd5b81356001600160a01b038116811461015757600080fd5b939250505056fea264697066735822122092f5709f7f04145efd863c59d437e79f2a7afe50d931e00390fa9cb5a3aec47964736f6c634300081a0033";

type MockVaultFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVaultFactory__factory extends ContractFactory {
  constructor(...args: MockVaultFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockVaultFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockVaultFactory__factory {
    return super.connect(runner) as MockVaultFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultFactoryInterface {
    return new Interface(_abi) as MockVaultFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockVaultFactory {
    return new Contract(address, _abi, runner) as unknown as MockVaultFactory;
  }
}
