/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts-metropolis/src/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "initialHolder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461002e5761001d6100146101b3565b92919091610286565b604051610cc06106498239610cc090f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006a57604052565b610033565b9061008361007c60405190565b9283610049565b565b6001600160401b03811161006a57602090601f01601f19160190565b60005b8381106100b45750506000910152565b81810151838201526020016100a4565b909291926100d96100d482610085565b61006f565b938185528183011161002e576100839160208501906100a1565b9080601f8301121561002e57815161010d926020016100c4565b90565b60ff81165b0361002e57565b9050519061008382610110565b6001600160a01b031690565b6001600160a01b038116610115565b9050519061008382610135565b60808183031261002e5780516001600160401b03811161002e57826101779183016100f3565b60208201519093906001600160401b03811161002e5761019c8461010d9285016100f3565b9360606101ac826040870161011c565b9401610144565b6101d1611309803803806101c68161006f565b928339810190610151565b90919293565b9060ff905b9181191691161790565b6101f661010d61010d9260ff1690565b60ff1690565b9061020c61010d610213926101e6565b82546101d7565b9055565b61012961010d61010d9290565b61010d90610217565b61010d61010d61010d9260ff1690565b634e487b7160e01b600052601160045260246000fd5b604d811161026157600a0a90565b61023d565b61010d61010d61010d9290565b8181029291811591840414171561026157565b90610293919392936104ae565b61029e8260056101fc565b6102ab6101296000610224565b6001600160a01b038216036102be575050565b6102e76102d56102d06100839461022d565b610253565b6102e2633b9aca00610266565b610273565b9061058d565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610323575b602083101461031e57565b6102ed565b91607f1691610313565b9160001960089290920291821b911b6101dc565b919061035261010d61021393610266565b90835461032d565b61008391600091610341565b818110610371575050565b8061037f600060019361035a565b01610366565b9190601f811161039457505050565b6103a661008393600052602060002090565b906020601f8401819004830193106103c8575b6020601f909101040190610366565b90915081906103b9565b906103db815190565b906001600160401b03821161006a576103fe826103f88554610303565b85610385565b602090601f83116001146104395761021392916000918361042e575b5050600019600883021c1916906002021790565b01519050388061041a565b601f1983169161044e85600052602060002090565b9260005b81811061048c57509160029391856001969410610473575b50505002019055565b01516000196008601f8516021c1916905538808061046a565b91936020600181928787015181550195019201610452565b90610083916103d2565b906104bd6100839260036104a4565b60046104a4565b156104cb57565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b61010d9081565b61010d9054610510565b9190820180921161026157565b90600019906101dc565b9061054861010d61021392610266565b825461052e565b61010d90610129906001600160a01b031682565b61010d9061054f565b61010d90610563565b9061057f9061056c565b600052602052604060002090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61064361062c6106266105c16000610224565b6105df6001600160a01b0382166001600160a01b03881614156104c4565b6105fc6105f5886105f06002610517565b610521565b6002610538565b61062161060a876000610575565b61061b8961061783610517565b0190565b90610538565b61056c565b9361056c565b9361063660405190565b9182918290815260200190565b0390a356fe6080604052600436101561001257600080fd5b60003560e01c806306fdde03146100e2578063095ea7b3146100dd57806318160ddd146100d857806323b872dd146100d3578063313ce567146100ce57806339509351146100c957806340c10f19146100c457806370a08231146100bf57806395d89b41146100ba5780639dc29fac146100b5578063a457c2d7146100b0578063a9059cbb146100ab5763dd62ed3e036100f2576103ba565b61037b565b61035f565b610346565b61032b565b610310565b6102de565b6102c2565b610293565b610277565b610222565b6101f4565b610166565b60009103126100f257565b600080fd5b60005b83811061010a5750506000910152565b81810151838201526020016100fa565b61013b61014460209361014e9361012f815190565b80835293849260200190565b958691016100f7565b601f01601f191690565b0190565b60208082526101639291019061011a565b90565b346100f2576101763660046100e7565b61018d61018161050b565b60405191829182610152565b0390f35b6001600160a01b031690565b6001600160a01b0381165b036100f257565b905035906101bc8261019d565b565b806101a8565b905035906101bc826101be565b91906040838203126100f2576101639060206101ed82866101af565b94016101c4565b346100f25761018d61021061020a3660046101d1565b90610515565b60405191829182901515815260200190565b346100f2576102323660046100e7565b61018d61023d610536565b6040515b9182918290815260200190565b90916060828403126100f25761016361026784846101af565b9360406101ed82602087016101af565b346100f25761018d61021061028d36600461024e565b91610540565b346100f2576102a33660046100e7565b61018d6102ae610556565b6040519182918260ff909116815260200190565b346100f25761018d6102106102d83660046101d1565b90610587565b346100f2576102f76102f13660046101d1565b906105a6565b604051005b906020828203126100f257610163916101af565b346100f25761018d61023d6103263660046102fc565b6105ee565b346100f25761033b3660046100e7565b61018d61018161060a565b346100f2576102f76103593660046101d1565b90610614565b346100f25761018d6102106103753660046101d1565b90610678565b346100f25761018d6102106103913660046101d1565b9061069c565b91906040838203126100f2576101639060206103b382866101af565b94016101af565b346100f25761018d61023d6103d0366004610397565b906106a7565b634e487b7160e01b600052602260045260246000fd5b906001600283049216801561040c575b602083101461040757565b6103d6565b91607f16916103fc565b80546000939291610433610429836103ec565b8085529360200190565b9160018116908115610485575060011461044c57505050565b61045f9192939450600052602060002090565b916000925b8184106104715750500190565b805484840152602090930192600101610464565b92949550505060ff1916825215156020020190565b9061016391610416565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176104dc57604052565b6104a4565b906101bc6104fb926104f260405190565b9384809261049a565b03836104ba565b610163906104e1565b6101636003610502565b6105209190336107ad565b600190565b6101639081565b6101639054610525565b610163600261052c565b610520929190610551833383610895565b6109da565b60055460ff1690565b634e487b7160e01b600052601160045260246000fd5b9190820180921161058257565b61055f565b61052091906105a0339261059b83856106a7565b610575565b916107ad565b906101bc91610ad5565b61016390610191906001600160a01b031682565b610163906105b0565b610163906105c4565b906105e0906105cd565b600052602052604060002090565b610605610163916105fd600090565b5060006105d6565b61052c565b6101636004610502565b906101bc91610bfa565b1561062557565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b61052091906105a0339261068c83856106a7565b6106988282101561061e565b0390565b6105209190336109da565b610163916106c2610605926106ba600090565b5060016105d6565b6105d6565b6101916101636101639290565b610163906106c7565b156106e457565b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561073c57565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b6101636101636101639290565b906101636101636107a99261078c565b9055565b61084461083a6108347f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936108176108066107e860006106d4565b6101916001600160a01b0382166001600160a01b03861614156106dd565b6001600160a01b0388161415610735565b61082f8761082a886106c28560016105d6565b610799565b6105cd565b936105cd565b9361024160405190565b0390a3565b1561085057565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b906108a081836106a7565b60001981036108b0575b50505050565b6108c4936105a09161069882821015610849565b388080806108aa565b156108d457565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561092e57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561098657565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b61084461083a6108347fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9361082f610a76876000610a4c610a3b610a1d836106d4565b6101916001600160a01b0382166001600160a01b038a1614156108cd565b6001600160a01b0384161415610927565b6106c2610a6c8c610a6061060589866105d6565b6106988282101561097f565b61082a87846105d6565b610a838961014e8361052c565b90610799565b15610a9057565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61084461083a610834610b0960006106d4565b610b276001600160a01b0382166001600160a01b0388161415610a89565b610b3f610b388861059b600261052c565b6002610799565b61082f610a768760006105d6565b15610b5457565b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b15610baa57565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61084461083a610834600094610c79610c33876106d4565b96610c526001600160a01b0389166001600160a01b0385161415610b4d565b61082a83610c738b610c6761060584876105d6565b61069882821015610ba3565b926105d6565b61082f610b3888610698600261052c56fea2646970667358221220f7c9f466d54345adfaa6e2514c0c8f0b13c46400601f9563cbc1ce1c0fbb341864736f6c634300081c0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    initialHolder: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals_,
      initialHolder,
      overrides || {}
    );
  }
  override deploy(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    initialHolder: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name,
      symbol,
      decimals_,
      initialHolder,
      overrides || {}
    ) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
