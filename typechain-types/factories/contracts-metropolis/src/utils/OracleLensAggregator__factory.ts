/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  OracleLensAggregator,
  OracleLensAggregatorInterface,
} from "../../../../contracts-metropolis/src/utils/OracleLensAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceLens",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lens",
    outputs: [
      {
        internalType: "contract IPriceLens",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161067438038061067483398101604081905261002f916100bb565b6100383361004f565b6001600160a01b039182166080521660a0526100ee565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100b657600080fd5b919050565b600080604083850312156100ce57600080fd5b6100d78361009f565b91506100e56020840161009f565b90509250929050565b60805160a051610554610120600039600081816101d601526103a401526000818160b301526103d101526105546000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b146101505780639a6fc8f514610161578063f2fde38b146101ab578063f7a30806146101be578063fc0c546a146101d1578063feaf968c146101f857600080fd5b8063112666b7146100ae578063313ce567146100f257806354fd4d5014610101578063715018a6146101105780637284e4161461011a575b600080fd5b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b604051601281526020016100e9565b604051600181526020016100e9565b610118610200565b005b604080518082018252601481527327b930b1b632a632b739a0b3b3b932b3b0ba37b960611b602082015290516100e99190610442565b6000546001600160a01b03166100d5565b61017461016f366004610490565b610214565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e9565b6101186101b93660046104c3565b610239565b6101186101cc3660046104ec565b6102b7565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6101746102bf565b6102086102e3565b610212600061033d565b565b60008060008060008061022561038d565b909790965060009550429450859350915050565b6102416102e3565b6001600160a01b0381166102ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102b48161033d565b50565b6102b46102e3565b6000806000806000806102d061038d565b9096909550600094504293508492509050565b6000546001600160a01b031633146102125760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405163ad8dc75760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063ad8dc75790602401602060405180830381865afa158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043c9190610505565b92915050565b602081526000825180602084015260005b818110156104705760208186018101516040868401015201610453565b506000604082850101526040601f19601f83011684010191505092915050565b6000602082840312156104a257600080fd5b813569ffffffffffffffffffff811681146104bc57600080fd5b9392505050565b6000602082840312156104d557600080fd5b81356001600160a01b03811681146104bc57600080fd5b6000602082840312156104fe57600080fd5b5035919050565b60006020828403121561051757600080fd5b505191905056fea2646970667358221220a1836071b073221cca38b2974c4bbff93a9889f8dfd82374cade764bce73921964736f6c634300081a0033";

type OracleLensAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleLensAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleLensAggregator__factory extends ContractFactory {
  constructor(...args: OracleLensAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _priceLens: AddressLike,
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_priceLens, _token, overrides || {});
  }
  override deploy(
    _priceLens: AddressLike,
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_priceLens, _token, overrides || {}) as Promise<
      OracleLensAggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): OracleLensAggregator__factory {
    return super.connect(runner) as OracleLensAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleLensAggregatorInterface {
    return new Interface(_abi) as OracleLensAggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OracleLensAggregator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as OracleLensAggregator;
  }
}
