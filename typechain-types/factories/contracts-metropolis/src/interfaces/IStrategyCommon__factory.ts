/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IStrategyCommon,
  IStrategyCommonInterface,
} from "../../../../contracts-metropolis/src/interfaces/IStrategyCommon";

const _abi = [
  {
    inputs: [],
    name: "Strategy__InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__InvalidFee",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__InvalidReceiver",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__InvalidToken",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyDefaultOperator",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyFactory",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyOperators",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyTrusted",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__OnlyVault",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__RebalanceCoolDown",
    type: "error",
  },
  {
    inputs: [],
    name: "Strategy__ZeroAmounts",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "AumAnnualFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBalanceX",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBalanceY",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeX",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeY",
        type: "uint256",
      },
    ],
    name: "AumFeeCollected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "OperatorSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "PendingAumAnnualFeeReset",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "PendingAumAnnualFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "coolDown",
        type: "uint256",
      },
    ],
    name: "RebalanceCoolDownSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "stepCount",
        type: "uint256",
      },
    ],
    name: "RebalanceStepCount",
    type: "event",
  },
  {
    inputs: [],
    name: "getAumAnnualFee",
    outputs: [
      {
        internalType: "uint256",
        name: "aumAnnualFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract IVaultFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIdleBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRebalance",
    outputs: [
      {
        internalType: "uint256",
        name: "lastRebalance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPendingAumAnnualFee",
    outputs: [
      {
        internalType: "bool",
        name: "isSet",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "pendingAumAnnualFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRewardTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStrategyType",
    outputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenX",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenY",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "harvestRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "hasExtraRewards",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasRewards",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "resetPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "pendingAumAnnualFee",
        type: "uint16",
      },
    ],
    name: "setPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "coolDown",
        type: "uint256",
      },
    ],
    name: "setRebalanceCoolDown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IStrategyCommon__factory {
  static readonly abi = _abi;
  static createInterface(): IStrategyCommonInterface {
    return new Interface(_abi) as IStrategyCommonInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IStrategyCommon {
    return new Contract(address, _abi, runner) as unknown as IStrategyCommon;
  }
}
