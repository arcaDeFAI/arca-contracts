/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IVaultFactory,
  IVaultFactoryInterface,
} from "../../../../contracts-metropolis/src/interfaces/IVaultFactory";

const _abi = [
  {
    inputs: [],
    name: "VaultFactory__InvalidAumFee",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidCreationFee",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidDecimals",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidFeeRecipient",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidLength",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidOraclePrice",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidStrategy",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__InvalidType",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8",
      },
    ],
    name: "VaultFactory__StrategyImplementationNotSet",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__TwapInvalidOracleSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8",
      },
    ],
    name: "VaultFactory__VaultImplementationNotSet",
    type: "error",
  },
  {
    inputs: [],
    name: "VaultFactory__VaultNotWhitelisted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "creationFee",
        type: "uint256",
      },
    ],
    name: "CreationFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "defaultOperator",
        type: "address",
      },
    ],
    name: "DefaultOperatorSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "cooldown",
        type: "uint256",
      },
    ],
    name: "DepositToWithdrawCooldownSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256",
      },
    ],
    name: "DeviationThresholdUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
    ],
    name: "FeeRecipientSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "MetropolisStrategyCreatedAndLinked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "pairs",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isWhitelisted",
        type: "bool",
      },
    ],
    name: "PairWhitelistSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "RebalanceSettingSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ShadowStrategyCreatedAndLinked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "strategyIndex",
        type: "uint256",
      },
    ],
    name: "StrategyCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategyImplementation",
        type: "address",
      },
    ],
    name: "StrategyImplementationSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    name: "TransferIgnoreListSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "vaultIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenX",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenY",
        type: "address",
      },
    ],
    name: "VaultCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "vaultImplementation",
        type: "address",
      },
    ],
    name: "VaultImplementationSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleVault",
        type: "address",
      },
    ],
    name: "cancelShutdown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "aumFee",
        type: "uint16",
      },
    ],
    name: "createMarketMakerOracleVault",
    outputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "aumFee",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "twapInterval",
        type: "uint32",
      },
    ],
    name: "createMarketMakerShadowOracleRewardVault",
    outputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDefaultOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDepositToWithdrawCooldown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    name: "getFeeRecipientByVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8",
      },
    ],
    name: "getNumberOfStrategies",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8",
      },
    ],
    name: "getNumberOfVaults",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getShadowNonfungiblePositionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getShadowVoter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getStrategyAt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8",
      },
    ],
    name: "getStrategyImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "getStrategyType",
    outputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTransferIgnoreList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getVaultAt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8",
      },
    ],
    name: "getVaultImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    name: "getVaultType",
    outputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "isPairWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isTransferIgnored",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMinimalVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "linkVaultToStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMinimalVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMinimalVault",
        name: "vault",
        type: "address",
      },
    ],
    name: "resetPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "defaultOperator",
        type: "address",
      },
    ],
    name: "setDefaultOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAggregatorV3",
        name: "sequencerUptimeFeed",
        type: "address",
      },
    ],
    name: "setDefaultSequencerUptimeFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMinimalVault",
        name: "vault",
        type: "address",
      },
    ],
    name: "setEmergencyMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
    ],
    name: "setFeeRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IStrategyCommon",
        name: "strategy",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleVault",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPrice",
            type: "uint256",
          },
          {
            internalType: "uint24",
            name: "heartbeatX",
            type: "uint24",
          },
          {
            internalType: "uint24",
            name: "heartbeatY",
            type: "uint24",
          },
          {
            internalType: "uint256",
            name: "deviationThreshold",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "twapPriceCheckEnabled",
            type: "bool",
          },
          {
            internalType: "uint40",
            name: "twapInterval",
            type: "uint40",
          },
        ],
        internalType: "struct IOracleHelper.OracleParameters",
        name: "parameters",
        type: "tuple",
      },
    ],
    name: "setOracleParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "pairs",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "isWhitelisted",
        type: "bool",
      },
    ],
    name: "setPairWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMinimalVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "pendingAumAnnualFee",
        type: "uint16",
      },
    ],
    name: "setPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "strategy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "coolDown",
        type: "uint256",
      },
    ],
    name: "setRebalanceCoolDown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleVault",
        type: "address",
      },
      {
        internalType: "contract IAggregatorV3",
        name: "sequencerUptimeFeed",
        type: "address",
      },
    ],
    name: "setSequencerUptimeFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nonfungiblePositionManager",
        type: "address",
      },
    ],
    name: "setShadowNonfungiblePositionManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "setShadowVoter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "strategyImplementation",
        type: "address",
      },
    ],
    name: "setStrategyImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    name: "setTransferIgnoreList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "vaultImplementation",
        type: "address",
      },
    ],
    name: "setVaultImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IVaultFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IVaultFactoryInterface {
    return new Interface(_abi) as IVaultFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IVaultFactory {
    return new Contract(address, _abi, runner) as unknown as IVaultFactory;
  }
}
