/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IOracleHelper,
  IOracleHelperInterface,
} from "../../../../contracts-metropolis/src/interfaces/IOracleHelper";

const _abi = [
  {
    inputs: [],
    name: "OracleHelper__AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "OracleHelper__InvalidVault",
    type: "error",
  },
  {
    inputs: [],
    name: "OracleHelper__NotFactory",
    type: "error",
  },
  {
    inputs: [],
    name: "OracleHelper__NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "checkPriceInDeviation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataFeedX",
    outputs: [
      {
        internalType: "contract IAggregatorV3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataFeedY",
    outputs: [
      {
        internalType: "contract IAggregatorV3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOracleParameters",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "minPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPrice",
            type: "uint256",
          },
          {
            internalType: "uint24",
            name: "heartbeatX",
            type: "uint24",
          },
          {
            internalType: "uint24",
            name: "heartbeatY",
            type: "uint24",
          },
          {
            internalType: "uint256",
            name: "deviationThreshold",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "twapPriceCheckEnabled",
            type: "bool",
          },
          {
            internalType: "uint40",
            name: "twapInterval",
            type: "uint40",
          },
        ],
        internalType: "struct IOracleHelper.OracleParameters",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSequencerUptimeFeed",
    outputs: [
      {
        internalType: "contract IAggregatorV3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256",
      },
    ],
    name: "getValueInY",
    outputs: [
      {
        internalType: "uint256",
        name: "valueInY",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "heartbeatX",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "heartbeatY",
        type: "uint24",
      },
      {
        internalType: "uint256",
        name: "minPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxPrice",
        type: "uint256",
      },
      {
        internalType: "contract IAggregatorV3",
        name: "sequencerUptimeFeed",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "minPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPrice",
            type: "uint256",
          },
          {
            internalType: "uint24",
            name: "heartbeatX",
            type: "uint24",
          },
          {
            internalType: "uint24",
            name: "heartbeatY",
            type: "uint24",
          },
          {
            internalType: "uint256",
            name: "deviationThreshold",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "twapPriceCheckEnabled",
            type: "bool",
          },
          {
            internalType: "uint40",
            name: "twapInterval",
            type: "uint40",
          },
        ],
        internalType: "struct IOracleHelper.OracleParameters",
        name: "parameters",
        type: "tuple",
      },
    ],
    name: "setOracleParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAggregatorV3",
        name: "sequencerUptimeFeed",
        type: "address",
      },
    ],
    name: "setSequencerUptimeFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        internalType: "uint40",
        name: "interval",
        type: "uint40",
      },
      {
        internalType: "uint256",
        name: "deviationThreshold",
        type: "uint256",
      },
    ],
    name: "setTwapParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IOracleHelper__factory {
  static readonly abi = _abi;
  static createInterface(): IOracleHelperInterface {
    return new Interface(_abi) as IOracleHelperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IOracleHelper {
    return new Contract(address, _abi, runner) as unknown as IOracleHelper;
  }
}
