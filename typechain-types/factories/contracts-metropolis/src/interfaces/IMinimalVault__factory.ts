/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMinimalVault,
  IMinimalVaultInterface,
} from "../../../../contracts-metropolis/src/interfaces/IMinimalVault";

const _abi = [
  {
    inputs: [],
    name: "getStrategy",
    outputs: [
      {
        internalType: "contract IStrategyCommon",
        name: "strategy",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultType",
    outputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vaultType",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setEmergencyMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMinimalVault__factory {
  static readonly abi = _abi;
  static createInterface(): IMinimalVaultInterface {
    return new Interface(_abi) as IMinimalVaultInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMinimalVault {
    return new Contract(address, _abi, runner) as unknown as IMinimalVault;
  }
}
