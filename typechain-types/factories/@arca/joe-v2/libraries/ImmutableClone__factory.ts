/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ImmutableClone,
  ImmutableCloneInterface,
} from "../../../../@arca/joe-v2/libraries/ImmutableClone";

const _abi = [
  {
    inputs: [],
    name: "DeploymentFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "PackedDataTooBig",
    type: "error",
  },
] as const;

const _bytecode =
  "0x608060405234601a57604051603f6020823930815050603f90f35b600080fdfe6080604052600080fdfea26469706673582212209e52b192ae1895a087cf58fe3a09dd3bedcc9de8bca29367a3ab2befc61063f664736f6c634300081c0033";

type ImmutableCloneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImmutableCloneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImmutableClone__factory extends ContractFactory {
  constructor(...args: ImmutableCloneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ImmutableClone & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ImmutableClone__factory {
    return super.connect(runner) as ImmutableClone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImmutableCloneInterface {
    return new Interface(_abi) as ImmutableCloneInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ImmutableClone {
    return new Contract(address, _abi, runner) as unknown as ImmutableClone;
  }
}
