/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  LiquidityConfigurations,
  LiquidityConfigurationsInterface,
} from "../../../../../@arca/joe-v2/libraries/math/LiquidityConfigurations";

const _abi = [
  {
    inputs: [],
    name: "LiquidityConfigurations__InvalidConfig",
    type: "error",
  },
] as const;

const _bytecode =
  "0x608060405234601a57604051603f6020823930815050603f90f35b600080fdfe6080604052600080fdfea264697066735822122018c48118e1576f73757e3c2da8313a0185d975c74d7f3a1948b335ae97c9e33564736f6c634300081c0033";

type LiquidityConfigurationsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityConfigurationsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityConfigurations__factory extends ContractFactory {
  constructor(...args: LiquidityConfigurationsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LiquidityConfigurations & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): LiquidityConfigurations__factory {
    return super.connect(runner) as LiquidityConfigurations__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityConfigurationsInterface {
    return new Interface(_abi) as LiquidityConfigurationsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LiquidityConfigurations {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LiquidityConfigurations;
  }
}
