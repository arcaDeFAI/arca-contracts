/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Uint128x128Math,
  Uint128x128MathInterface,
} from "../../../../../@arca/joe-v2/libraries/math/Uint128x128Math";

const _abi = [
  {
    inputs: [],
    name: "Uint128x128Math__LogUnderflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error",
  },
] as const;

const _bytecode =
  "0x608060405234601a57604051603f6020823930815050603f90f35b600080fdfe6080604052600080fdfea2646970667358221220116344da478c18ce2be2421389ae83fa460bfe1ba3ebc83c8ce328766f94167664736f6c634300081c0033";

type Uint128x128MathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Uint128x128MathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Uint128x128Math__factory extends ContractFactory {
  constructor(...args: Uint128x128MathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Uint128x128Math & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Uint128x128Math__factory {
    return super.connect(runner) as Uint128x128Math__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Uint128x128MathInterface {
    return new Interface(_abi) as Uint128x128MathInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Uint128x128Math {
    return new Contract(address, _abi, runner) as unknown as Uint128x128Math;
  }
}
