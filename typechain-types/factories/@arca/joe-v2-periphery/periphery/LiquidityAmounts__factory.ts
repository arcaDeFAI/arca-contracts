/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  LiquidityAmounts,
  LiquidityAmountsInterface,
} from "../../../../@arca/joe-v2-periphery/periphery/LiquidityAmounts";

const _abi = [
  {
    inputs: [],
    name: "LiquidityAmounts__LengthMismatch",
    type: "error",
  },
] as const;

const _bytecode =
  "0x608060405234601a57604051603f6020823930815050603f90f35b600080fdfe6080604052600080fdfea2646970667358221220f4744e67621f8677e4039ad3d54416ec00afe43e34ed02e28d07b6fd2adc6c6464736f6c634300081c0033";

type LiquidityAmountsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityAmountsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityAmounts__factory extends ContractFactory {
  constructor(...args: LiquidityAmountsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LiquidityAmounts & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LiquidityAmounts__factory {
    return super.connect(runner) as LiquidityAmounts__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityAmountsInterface {
    return new Interface(_abi) as LiquidityAmountsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LiquidityAmounts {
    return new Contract(address, _abi, runner) as unknown as LiquidityAmounts;
  }
}
