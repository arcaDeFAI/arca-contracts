/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TestShadowVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPool"
      | "getTotalBalances"
      | "getTotalSupply"
      | "previewShares"
      | "setTotalBalances"
      | "setTotalSupply"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalBalances",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSupply",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSupply",
    data: BytesLike
  ): Result;
}

export interface TestShadowVault extends BaseContract {
  connect(runner?: ContractRunner | null): TestShadowVault;
  waitForDeployment(): Promise<this>;

  interface: TestShadowVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPool: TypedContractMethod<[], [string], "view">;

  getTotalBalances: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getTotalSupply: TypedContractMethod<[], [bigint], "view">;

  previewShares: TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "view"
  >;

  setTotalBalances: TypedContractMethod<
    [totalBalanceX: BigNumberish, totalBalanceY: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalSupply: TypedContractMethod<
    [totalSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalBalances"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewShares"
  ): TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setTotalBalances"
  ): TypedContractMethod<
    [totalBalanceX: BigNumberish, totalBalanceY: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTotalSupply"
  ): TypedContractMethod<[totalSupply: BigNumberish], [void], "nonpayable">;

  filters: {};
}
