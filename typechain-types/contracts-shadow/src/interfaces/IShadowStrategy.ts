/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IShadowStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAumAnnualFee"
      | "getBalances"
      | "getFactory"
      | "getIdleBalances"
      | "getLastRebalance"
      | "getNpmLiquidity"
      | "getOperator"
      | "getPendingAumAnnualFee"
      | "getPool"
      | "getPosition"
      | "getRange"
      | "getRewardTokens"
      | "getShadowNonfungiblePositionManager"
      | "getStrategyType"
      | "getTokenX"
      | "getTokenY"
      | "getVault"
      | "harvestRewards"
      | "hasExtraRewards"
      | "hasRewards"
      | "initialize"
      | "rebalance"
      | "resetPendingAumAnnualFee"
      | "setOperator"
      | "setPendingAumAnnualFee"
      | "setRebalanceCoolDown"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AumAnnualFeeSet"
      | "AumFeeCollected"
      | "OperatorSet"
      | "PendingAumAnnualFeeReset"
      | "PendingAumAnnualFeeSet"
      | "PositionBurned"
      | "PositionMinted"
      | "RebalanceCoolDownSet"
      | "RebalanceStepCount"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAumAnnualFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdleBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRebalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNpmLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAumAnnualFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRange", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShadowNonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTokenX", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTokenY", values?: undefined): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasExtraRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resetPendingAumAnnualFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAumAnnualFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceCoolDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdleBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNpmLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShadowNonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasExtraRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace AumAnnualFeeSetEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AumFeeCollectedEvent {
  export type InputTuple = [
    sender: AddressLike,
    totalBalanceX: BigNumberish,
    totalBalanceY: BigNumberish,
    feeX: BigNumberish,
    feeY: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    totalBalanceX: bigint,
    totalBalanceY: bigint,
    feeX: bigint,
    feeY: bigint
  ];
  export interface OutputObject {
    sender: string;
    totalBalanceX: bigint;
    totalBalanceY: bigint;
    feeX: bigint;
    feeY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSetEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingAumAnnualFeeResetEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingAumAnnualFeeSetEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionBurnedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceCoolDownSetEvent {
  export type InputTuple = [coolDown: BigNumberish];
  export type OutputTuple = [coolDown: bigint];
  export interface OutputObject {
    coolDown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceStepCountEvent {
  export type InputTuple = [stepCount: BigNumberish];
  export type OutputTuple = [stepCount: bigint];
  export interface OutputObject {
    stepCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IShadowStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): IShadowStrategy;
  waitForDeployment(): Promise<this>;

  interface: IShadowStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAumAnnualFee: TypedContractMethod<[], [bigint], "view">;

  getBalances: TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;

  getFactory: TypedContractMethod<[], [string], "view">;

  getIdleBalances: TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;

  getLastRebalance: TypedContractMethod<[], [bigint], "view">;

  getNpmLiquidity: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        tokensOwed0: bigint;
        tokensOwed1: bigint;
      }
    ],
    "view"
  >;

  getOperator: TypedContractMethod<[], [string], "view">;

  getPendingAumAnnualFee: TypedContractMethod<
    [],
    [[boolean, bigint] & { isSet: boolean; pendingAumAnnualFee: bigint }],
    "view"
  >;

  getPool: TypedContractMethod<[], [string], "view">;

  getPosition: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
      }
    ],
    "view"
  >;

  getRange: TypedContractMethod<
    [],
    [[bigint, bigint] & { low: bigint; upper: bigint }],
    "view"
  >;

  getRewardTokens: TypedContractMethod<[], [string[]], "view">;

  getShadowNonfungiblePositionManager: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  getStrategyType: TypedContractMethod<[], [bigint], "view">;

  getTokenX: TypedContractMethod<[], [string], "view">;

  getTokenY: TypedContractMethod<[], [string], "view">;

  getVault: TypedContractMethod<[], [string], "view">;

  harvestRewards: TypedContractMethod<[], [void], "nonpayable">;

  hasExtraRewards: TypedContractMethod<[], [boolean], "view">;

  hasRewards: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  rebalance: TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      desiredTick: BigNumberish,
      slippageTick: BigNumberish,
      amountX: BigNumberish,
      amountY: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  resetPendingAumAnnualFee: TypedContractMethod<[], [void], "nonpayable">;

  setOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  setPendingAumAnnualFee: TypedContractMethod<
    [pendingAumAnnualFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRebalanceCoolDown: TypedContractMethod<
    [coolDown: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAumAnnualFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIdleBalances"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastRebalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNpmLiquidity"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        tokensOwed0: bigint;
        tokensOwed1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingAumAnnualFee"
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { isSet: boolean; pendingAumAnnualFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRange"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { low: bigint; upper: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getShadowNonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "harvestRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasExtraRewards"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRewards"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      desiredTick: BigNumberish,
      slippageTick: BigNumberish,
      amountX: BigNumberish,
      amountY: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetPendingAumAnnualFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPendingAumAnnualFee"
  ): TypedContractMethod<
    [pendingAumAnnualFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRebalanceCoolDown"
  ): TypedContractMethod<[coolDown: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AumAnnualFeeSet"
  ): TypedContractEvent<
    AumAnnualFeeSetEvent.InputTuple,
    AumAnnualFeeSetEvent.OutputTuple,
    AumAnnualFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "AumFeeCollected"
  ): TypedContractEvent<
    AumFeeCollectedEvent.InputTuple,
    AumFeeCollectedEvent.OutputTuple,
    AumFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSet"
  ): TypedContractEvent<
    OperatorSetEvent.InputTuple,
    OperatorSetEvent.OutputTuple,
    OperatorSetEvent.OutputObject
  >;
  getEvent(
    key: "PendingAumAnnualFeeReset"
  ): TypedContractEvent<
    PendingAumAnnualFeeResetEvent.InputTuple,
    PendingAumAnnualFeeResetEvent.OutputTuple,
    PendingAumAnnualFeeResetEvent.OutputObject
  >;
  getEvent(
    key: "PendingAumAnnualFeeSet"
  ): TypedContractEvent<
    PendingAumAnnualFeeSetEvent.InputTuple,
    PendingAumAnnualFeeSetEvent.OutputTuple,
    PendingAumAnnualFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "PositionBurned"
  ): TypedContractEvent<
    PositionBurnedEvent.InputTuple,
    PositionBurnedEvent.OutputTuple,
    PositionBurnedEvent.OutputObject
  >;
  getEvent(
    key: "PositionMinted"
  ): TypedContractEvent<
    PositionMintedEvent.InputTuple,
    PositionMintedEvent.OutputTuple,
    PositionMintedEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceCoolDownSet"
  ): TypedContractEvent<
    RebalanceCoolDownSetEvent.InputTuple,
    RebalanceCoolDownSetEvent.OutputTuple,
    RebalanceCoolDownSetEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceStepCount"
  ): TypedContractEvent<
    RebalanceStepCountEvent.InputTuple,
    RebalanceStepCountEvent.OutputTuple,
    RebalanceStepCountEvent.OutputObject
  >;

  filters: {
    "AumAnnualFeeSet(uint256)": TypedContractEvent<
      AumAnnualFeeSetEvent.InputTuple,
      AumAnnualFeeSetEvent.OutputTuple,
      AumAnnualFeeSetEvent.OutputObject
    >;
    AumAnnualFeeSet: TypedContractEvent<
      AumAnnualFeeSetEvent.InputTuple,
      AumAnnualFeeSetEvent.OutputTuple,
      AumAnnualFeeSetEvent.OutputObject
    >;

    "AumFeeCollected(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AumFeeCollectedEvent.InputTuple,
      AumFeeCollectedEvent.OutputTuple,
      AumFeeCollectedEvent.OutputObject
    >;
    AumFeeCollected: TypedContractEvent<
      AumFeeCollectedEvent.InputTuple,
      AumFeeCollectedEvent.OutputTuple,
      AumFeeCollectedEvent.OutputObject
    >;

    "OperatorSet(address)": TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
    OperatorSet: TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;

    "PendingAumAnnualFeeReset()": TypedContractEvent<
      PendingAumAnnualFeeResetEvent.InputTuple,
      PendingAumAnnualFeeResetEvent.OutputTuple,
      PendingAumAnnualFeeResetEvent.OutputObject
    >;
    PendingAumAnnualFeeReset: TypedContractEvent<
      PendingAumAnnualFeeResetEvent.InputTuple,
      PendingAumAnnualFeeResetEvent.OutputTuple,
      PendingAumAnnualFeeResetEvent.OutputObject
    >;

    "PendingAumAnnualFeeSet(uint256)": TypedContractEvent<
      PendingAumAnnualFeeSetEvent.InputTuple,
      PendingAumAnnualFeeSetEvent.OutputTuple,
      PendingAumAnnualFeeSetEvent.OutputObject
    >;
    PendingAumAnnualFeeSet: TypedContractEvent<
      PendingAumAnnualFeeSetEvent.InputTuple,
      PendingAumAnnualFeeSetEvent.OutputTuple,
      PendingAumAnnualFeeSetEvent.OutputObject
    >;

    "PositionBurned(uint256)": TypedContractEvent<
      PositionBurnedEvent.InputTuple,
      PositionBurnedEvent.OutputTuple,
      PositionBurnedEvent.OutputObject
    >;
    PositionBurned: TypedContractEvent<
      PositionBurnedEvent.InputTuple,
      PositionBurnedEvent.OutputTuple,
      PositionBurnedEvent.OutputObject
    >;

    "PositionMinted(uint256,int24,int24,uint128)": TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;
    PositionMinted: TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;

    "RebalanceCoolDownSet(uint256)": TypedContractEvent<
      RebalanceCoolDownSetEvent.InputTuple,
      RebalanceCoolDownSetEvent.OutputTuple,
      RebalanceCoolDownSetEvent.OutputObject
    >;
    RebalanceCoolDownSet: TypedContractEvent<
      RebalanceCoolDownSetEvent.InputTuple,
      RebalanceCoolDownSetEvent.OutputTuple,
      RebalanceCoolDownSetEvent.OutputObject
    >;

    "RebalanceStepCount(uint256)": TypedContractEvent<
      RebalanceStepCountEvent.InputTuple,
      RebalanceStepCountEvent.OutputTuple,
      RebalanceStepCountEvent.OutputObject
    >;
    RebalanceStepCount: TypedContractEvent<
      RebalanceStepCountEvent.InputTuple,
      RebalanceStepCountEvent.OutputTuple,
      RebalanceStepCountEvent.OutputObject
    >;
  };
}
