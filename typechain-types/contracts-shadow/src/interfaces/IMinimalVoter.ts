/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IMinimalVoterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimClGaugeRewards"
      | "claimClGaugeRewardsAndExit"
      | "claimIncentives"
      | "claimLegacyIncentives"
      | "claimLegacyRewardsAndExit"
      | "claimRewards"
      | "gaugeForPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimClGaugeRewards",
    values: [AddressLike[], AddressLike[][], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimClGaugeRewardsAndExit",
    values: [AddressLike[], AddressLike[][], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimIncentives",
    values: [AddressLike, AddressLike[], AddressLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLegacyIncentives",
    values: [AddressLike, AddressLike[], AddressLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLegacyRewardsAndExit",
    values: [AddressLike[], AddressLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike[], AddressLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "gaugeForPool",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimClGaugeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimClGaugeRewardsAndExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLegacyIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLegacyRewardsAndExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaugeForPool",
    data: BytesLike
  ): Result;
}

export interface IMinimalVoter extends BaseContract {
  connect(runner?: ContractRunner | null): IMinimalVoter;
  waitForDeployment(): Promise<this>;

  interface: IMinimalVoterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimClGaugeRewards: TypedContractMethod<
    [
      _gauges: AddressLike[],
      _tokens: AddressLike[][],
      _nfpTokenIds: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;

  claimClGaugeRewardsAndExit: TypedContractMethod<
    [
      _gauges: AddressLike[],
      _tokens: AddressLike[][],
      _nfpTokenIds: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;

  claimIncentives: TypedContractMethod<
    [
      owner: AddressLike,
      _feeDistributors: AddressLike[],
      _tokens: AddressLike[][]
    ],
    [void],
    "nonpayable"
  >;

  claimLegacyIncentives: TypedContractMethod<
    [
      owner: AddressLike,
      _feeDistributors: AddressLike[],
      _tokens: AddressLike[][]
    ],
    [void],
    "nonpayable"
  >;

  claimLegacyRewardsAndExit: TypedContractMethod<
    [_gauges: AddressLike[], _tokens: AddressLike[][]],
    [void],
    "nonpayable"
  >;

  claimRewards: TypedContractMethod<
    [_gauges: AddressLike[], _tokens: AddressLike[][]],
    [void],
    "nonpayable"
  >;

  gaugeForPool: TypedContractMethod<[pool: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimClGaugeRewards"
  ): TypedContractMethod<
    [
      _gauges: AddressLike[],
      _tokens: AddressLike[][],
      _nfpTokenIds: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimClGaugeRewardsAndExit"
  ): TypedContractMethod<
    [
      _gauges: AddressLike[],
      _tokens: AddressLike[][],
      _nfpTokenIds: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimIncentives"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      _feeDistributors: AddressLike[],
      _tokens: AddressLike[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimLegacyIncentives"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      _feeDistributors: AddressLike[],
      _tokens: AddressLike[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimLegacyRewardsAndExit"
  ): TypedContractMethod<
    [_gauges: AddressLike[], _tokens: AddressLike[][]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [_gauges: AddressLike[], _tokens: AddressLike[][]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gaugeForPool"
  ): TypedContractMethod<[pool: AddressLike], [string], "view">;

  filters: {};
}
