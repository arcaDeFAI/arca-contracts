/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ShadowStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_processWithdrawalsInternal"
      | "enterPositionExternal"
      | "exitPositionExternal"
      | "getAumAnnualFee"
      | "getBalances"
      | "getFactory"
      | "getIdleBalances"
      | "getLastRebalance"
      | "getMaxRange"
      | "getNpmLiquidity"
      | "getOperator"
      | "getPendingAumAnnualFee"
      | "getPool"
      | "getPosition"
      | "getRange"
      | "getRewardStatus"
      | "getRewardTokens"
      | "getShadowNonfungiblePositionManager"
      | "getStrategyType"
      | "getTokenX"
      | "getTokenY"
      | "getVault"
      | "harvestRewards"
      | "hasExtraRewards"
      | "hasRewards"
      | "initialize"
      | "processWithdrawalsExternal"
      | "rebalance"
      | "resetPendingAumAnnualFee"
      | "setOperator"
      | "setPendingAumAnnualFee"
      | "setRebalanceCoolDown"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdditionalTokensCollected"
      | "AumAnnualFeeSet"
      | "AumFeeCollected"
      | "CollectFailed"
      | "Initialized"
      | "InsufficientBalance"
      | "LiquidityDecreaseFailed"
      | "LiquidityDecreased"
      | "NftBurnFailure"
      | "NoRewardAvailableToClaim"
      | "NpmSweepTokenFailure"
      | "NpmSweepTokenSuccess"
      | "OperatorSet"
      | "PendingAumAnnualFeeReset"
      | "PendingAumAnnualFeeSet"
      | "PositionBurned"
      | "PositionExitFailed"
      | "PositionMinted"
      | "PositionNotReadyForBurn"
      | "RebalanceAborted"
      | "RebalanceCheckFailed"
      | "RebalanceCompleted"
      | "RebalanceCoolDownSet"
      | "RebalanceStarted"
      | "RebalanceStepCount"
      | "RebalanceStepFailed"
      | "RebalanceStepSuccess"
      | "RewardClaimed"
      | "RewardDiscoveryFailed"
      | "RewardEarned"
      | "RewardForwarded"
      | "RewardHarvestFailed"
      | "RewardTokensDiscovered"
      | "SlippageCheckFailed"
      | "TickValidationFailed"
      | "TokensCollected"
      | "VaultAccountingUpdateFailed"
      | "WithdrawalProcessingFailed"
      | "XShadowConversionFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_processWithdrawalsInternal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterPositionExternal",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionExternal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAumAnnualFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdleBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRebalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNpmLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAumAnnualFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRange", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShadowNonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTokenX", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTokenY", values?: undefined): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasExtraRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawalsExternal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resetPendingAumAnnualFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAumAnnualFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceCoolDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_processWithdrawalsInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPositionExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdleBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNpmLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShadowNonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasExtraRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawalsExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace AdditionalTokensCollectedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, amount0: bigint, amount1: bigint];
  export interface OutputObject {
    tokenId: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AumAnnualFeeSetEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AumFeeCollectedEvent {
  export type InputTuple = [
    sender: AddressLike,
    totalBalanceX: BigNumberish,
    totalBalanceY: BigNumberish,
    feeX: BigNumberish,
    feeY: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    totalBalanceX: bigint,
    totalBalanceY: bigint,
    feeX: bigint,
    feeY: bigint
  ];
  export interface OutputObject {
    sender: string;
    totalBalanceX: bigint;
    totalBalanceY: bigint;
    feeX: bigint;
    feeY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectFailedEvent {
  export type InputTuple = [tokenId: BigNumberish, reason: string];
  export type OutputTuple = [tokenId: bigint, reason: string];
  export interface OutputObject {
    tokenId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsufficientBalanceEvent {
  export type InputTuple = [
    requestedX: BigNumberish,
    requestedY: BigNumberish,
    availableX: BigNumberish,
    availableY: BigNumberish
  ];
  export type OutputTuple = [
    requestedX: bigint,
    requestedY: bigint,
    availableX: bigint,
    availableY: bigint
  ];
  export interface OutputObject {
    requestedX: bigint;
    requestedY: bigint;
    availableX: bigint;
    availableY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityDecreaseFailedEvent {
  export type InputTuple = [tokenId: BigNumberish, reason: string];
  export type OutputTuple = [tokenId: bigint, reason: string];
  export interface OutputObject {
    tokenId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityDecreasedEvent {
  export type InputTuple = [tokenId: BigNumberish, liquidity: BigNumberish];
  export type OutputTuple = [tokenId: bigint, liquidity: bigint];
  export interface OutputObject {
    tokenId: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NftBurnFailureEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NoRewardAvailableToClaimEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NpmSweepTokenFailureEvent {
  export type InputTuple = [token: AddressLike, reason: string];
  export type OutputTuple = [token: string, reason: string];
  export interface OutputObject {
    token: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NpmSweepTokenSuccessEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSetEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingAumAnnualFeeResetEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingAumAnnualFeeSetEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionBurnedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionExitFailedEvent {
  export type InputTuple = [tokenId: BigNumberish, reason: string];
  export type OutputTuple = [tokenId: bigint, reason: string];
  export interface OutputObject {
    tokenId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionNotReadyForBurnEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    liquidity: BigNumberish,
    tokensOwed0: BigNumberish,
    tokensOwed1: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    liquidity: bigint,
    tokensOwed0: bigint,
    tokensOwed1: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    liquidity: bigint;
    tokensOwed0: bigint;
    tokensOwed1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceAbortedEvent {
  export type InputTuple = [reason: string, step: BigNumberish];
  export type OutputTuple = [reason: string, step: bigint];
  export interface OutputObject {
    reason: string;
    step: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceCheckFailedEvent {
  export type InputTuple = [reason: string, timestamp: BigNumberish];
  export type OutputTuple = [reason: string, timestamp: bigint];
  export interface OutputObject {
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceCompletedEvent {
  export type InputTuple = [
    newTokenId: BigNumberish,
    depositedX: BigNumberish,
    depositedY: BigNumberish
  ];
  export type OutputTuple = [
    newTokenId: bigint,
    depositedX: bigint,
    depositedY: bigint
  ];
  export interface OutputObject {
    newTokenId: bigint;
    depositedX: bigint;
    depositedY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceCoolDownSetEvent {
  export type InputTuple = [coolDown: BigNumberish];
  export type OutputTuple = [coolDown: bigint];
  export interface OutputObject {
    coolDown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceStartedEvent {
  export type InputTuple = [
    operator: AddressLike,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amountX: BigNumberish,
    amountY: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    tickLower: bigint,
    tickUpper: bigint,
    amountX: bigint,
    amountY: bigint
  ];
  export interface OutputObject {
    operator: string;
    tickLower: bigint;
    tickUpper: bigint;
    amountX: bigint;
    amountY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceStepCountEvent {
  export type InputTuple = [stepCount: BigNumberish];
  export type OutputTuple = [stepCount: bigint];
  export interface OutputObject {
    stepCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceStepFailedEvent {
  export type InputTuple = [step: BigNumberish, reason: string];
  export type OutputTuple = [step: bigint, reason: string];
  export interface OutputObject {
    step: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceStepSuccessEvent {
  export type InputTuple = [step: BigNumberish, data: BytesLike];
  export type OutputTuple = [step: bigint, data: string];
  export interface OutputObject {
    step: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDiscoveryFailedEvent {
  export type InputTuple = [gauge: AddressLike];
  export type OutputTuple = [gauge: string];
  export interface OutputObject {
    gauge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardEarnedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardForwardedEvent {
  export type InputTuple = [
    token: AddressLike,
    vault: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, vault: string, amount: bigint];
  export interface OutputObject {
    token: string;
    vault: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardHarvestFailedEvent {
  export type InputTuple = [gauge: AddressLike, reason: string];
  export type OutputTuple = [gauge: string, reason: string];
  export interface OutputObject {
    gauge: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardTokensDiscoveredEvent {
  export type InputTuple = [tokens: AddressLike[]];
  export type OutputTuple = [tokens: string[]];
  export interface OutputObject {
    tokens: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippageCheckFailedEvent {
  export type InputTuple = [
    currentTick: BigNumberish,
    desiredTick: BigNumberish,
    slippageTick: BigNumberish
  ];
  export type OutputTuple = [
    currentTick: bigint,
    desiredTick: bigint,
    slippageTick: bigint
  ];
  export interface OutputObject {
    currentTick: bigint;
    desiredTick: bigint;
    slippageTick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TickValidationFailedEvent {
  export type InputTuple = [
    reason: string,
    value1: BigNumberish,
    value2: BigNumberish
  ];
  export type OutputTuple = [reason: string, value1: bigint, value2: bigint];
  export interface OutputObject {
    reason: string;
    value1: bigint;
    value2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensCollectedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, amount0: bigint, amount1: bigint];
  export interface OutputObject {
    tokenId: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAccountingUpdateFailedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalProcessingFailedEvent {
  export type InputTuple = [queuedShares: BigNumberish, reason: string];
  export type OutputTuple = [queuedShares: bigint, reason: string];
  export interface OutputObject {
    queuedShares: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XShadowConversionFailedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShadowStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): ShadowStrategy;
  waitForDeployment(): Promise<this>;

  interface: ShadowStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _processWithdrawalsInternal: TypedContractMethod<[], [void], "nonpayable">;

  enterPositionExternal: TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  exitPositionExternal: TypedContractMethod<[], [boolean], "nonpayable">;

  getAumAnnualFee: TypedContractMethod<[], [bigint], "view">;

  getBalances: TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;

  getFactory: TypedContractMethod<[], [string], "view">;

  getIdleBalances: TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;

  getLastRebalance: TypedContractMethod<[], [bigint], "view">;

  getMaxRange: TypedContractMethod<[], [bigint], "view">;

  getNpmLiquidity: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        tokensOwed0: bigint;
        tokensOwed1: bigint;
      }
    ],
    "view"
  >;

  getOperator: TypedContractMethod<[], [string], "view">;

  getPendingAumAnnualFee: TypedContractMethod<
    [],
    [[boolean, bigint] & { isSet: boolean; pendingAumAnnualFee: bigint }],
    "view"
  >;

  getPool: TypedContractMethod<[], [string], "view">;

  getPosition: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
      }
    ],
    "view"
  >;

  getRange: TypedContractMethod<
    [],
    [[bigint, bigint] & { lower: bigint; upper: bigint }],
    "view"
  >;

  getRewardStatus: TypedContractMethod<
    [],
    [
      [string[], bigint[], string, boolean] & {
        tokens: string[];
        earned: bigint[];
        gaugeAddress: string;
        hasActivePosition: boolean;
      }
    ],
    "nonpayable"
  >;

  getRewardTokens: TypedContractMethod<[], [string[]], "view">;

  getShadowNonfungiblePositionManager: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  getStrategyType: TypedContractMethod<[], [bigint], "view">;

  getTokenX: TypedContractMethod<[], [string], "view">;

  getTokenY: TypedContractMethod<[], [string], "view">;

  getVault: TypedContractMethod<[], [string], "view">;

  harvestRewards: TypedContractMethod<[], [void], "nonpayable">;

  hasExtraRewards: TypedContractMethod<[], [boolean], "view">;

  hasRewards: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  processWithdrawalsExternal: TypedContractMethod<[], [boolean], "nonpayable">;

  rebalance: TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      desiredTick: BigNumberish,
      slippageTick: BigNumberish,
      amountX: BigNumberish,
      amountY: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  resetPendingAumAnnualFee: TypedContractMethod<[], [void], "nonpayable">;

  setOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  setPendingAumAnnualFee: TypedContractMethod<
    [pendingAumAnnualFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRebalanceCoolDown: TypedContractMethod<
    [coolDown: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_processWithdrawalsInternal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enterPositionExternal"
  ): TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitPositionExternal"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getAumAnnualFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIdleBalances"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastRebalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxRange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNpmLiquidity"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        tokensOwed0: bigint;
        tokensOwed1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingAumAnnualFee"
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { isSet: boolean; pendingAumAnnualFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRange"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { lower: bigint; upper: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardStatus"
  ): TypedContractMethod<
    [],
    [
      [string[], bigint[], string, boolean] & {
        tokens: string[];
        earned: bigint[];
        gaugeAddress: string;
        hasActivePosition: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRewardTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getShadowNonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "harvestRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasExtraRewards"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRewards"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "processWithdrawalsExternal"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      desiredTick: BigNumberish,
      slippageTick: BigNumberish,
      amountX: BigNumberish,
      amountY: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetPendingAumAnnualFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPendingAumAnnualFee"
  ): TypedContractMethod<
    [pendingAumAnnualFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRebalanceCoolDown"
  ): TypedContractMethod<[coolDown: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AdditionalTokensCollected"
  ): TypedContractEvent<
    AdditionalTokensCollectedEvent.InputTuple,
    AdditionalTokensCollectedEvent.OutputTuple,
    AdditionalTokensCollectedEvent.OutputObject
  >;
  getEvent(
    key: "AumAnnualFeeSet"
  ): TypedContractEvent<
    AumAnnualFeeSetEvent.InputTuple,
    AumAnnualFeeSetEvent.OutputTuple,
    AumAnnualFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "AumFeeCollected"
  ): TypedContractEvent<
    AumFeeCollectedEvent.InputTuple,
    AumFeeCollectedEvent.OutputTuple,
    AumFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "CollectFailed"
  ): TypedContractEvent<
    CollectFailedEvent.InputTuple,
    CollectFailedEvent.OutputTuple,
    CollectFailedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InsufficientBalance"
  ): TypedContractEvent<
    InsufficientBalanceEvent.InputTuple,
    InsufficientBalanceEvent.OutputTuple,
    InsufficientBalanceEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityDecreaseFailed"
  ): TypedContractEvent<
    LiquidityDecreaseFailedEvent.InputTuple,
    LiquidityDecreaseFailedEvent.OutputTuple,
    LiquidityDecreaseFailedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityDecreased"
  ): TypedContractEvent<
    LiquidityDecreasedEvent.InputTuple,
    LiquidityDecreasedEvent.OutputTuple,
    LiquidityDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "NftBurnFailure"
  ): TypedContractEvent<
    NftBurnFailureEvent.InputTuple,
    NftBurnFailureEvent.OutputTuple,
    NftBurnFailureEvent.OutputObject
  >;
  getEvent(
    key: "NoRewardAvailableToClaim"
  ): TypedContractEvent<
    NoRewardAvailableToClaimEvent.InputTuple,
    NoRewardAvailableToClaimEvent.OutputTuple,
    NoRewardAvailableToClaimEvent.OutputObject
  >;
  getEvent(
    key: "NpmSweepTokenFailure"
  ): TypedContractEvent<
    NpmSweepTokenFailureEvent.InputTuple,
    NpmSweepTokenFailureEvent.OutputTuple,
    NpmSweepTokenFailureEvent.OutputObject
  >;
  getEvent(
    key: "NpmSweepTokenSuccess"
  ): TypedContractEvent<
    NpmSweepTokenSuccessEvent.InputTuple,
    NpmSweepTokenSuccessEvent.OutputTuple,
    NpmSweepTokenSuccessEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSet"
  ): TypedContractEvent<
    OperatorSetEvent.InputTuple,
    OperatorSetEvent.OutputTuple,
    OperatorSetEvent.OutputObject
  >;
  getEvent(
    key: "PendingAumAnnualFeeReset"
  ): TypedContractEvent<
    PendingAumAnnualFeeResetEvent.InputTuple,
    PendingAumAnnualFeeResetEvent.OutputTuple,
    PendingAumAnnualFeeResetEvent.OutputObject
  >;
  getEvent(
    key: "PendingAumAnnualFeeSet"
  ): TypedContractEvent<
    PendingAumAnnualFeeSetEvent.InputTuple,
    PendingAumAnnualFeeSetEvent.OutputTuple,
    PendingAumAnnualFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "PositionBurned"
  ): TypedContractEvent<
    PositionBurnedEvent.InputTuple,
    PositionBurnedEvent.OutputTuple,
    PositionBurnedEvent.OutputObject
  >;
  getEvent(
    key: "PositionExitFailed"
  ): TypedContractEvent<
    PositionExitFailedEvent.InputTuple,
    PositionExitFailedEvent.OutputTuple,
    PositionExitFailedEvent.OutputObject
  >;
  getEvent(
    key: "PositionMinted"
  ): TypedContractEvent<
    PositionMintedEvent.InputTuple,
    PositionMintedEvent.OutputTuple,
    PositionMintedEvent.OutputObject
  >;
  getEvent(
    key: "PositionNotReadyForBurn"
  ): TypedContractEvent<
    PositionNotReadyForBurnEvent.InputTuple,
    PositionNotReadyForBurnEvent.OutputTuple,
    PositionNotReadyForBurnEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceAborted"
  ): TypedContractEvent<
    RebalanceAbortedEvent.InputTuple,
    RebalanceAbortedEvent.OutputTuple,
    RebalanceAbortedEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceCheckFailed"
  ): TypedContractEvent<
    RebalanceCheckFailedEvent.InputTuple,
    RebalanceCheckFailedEvent.OutputTuple,
    RebalanceCheckFailedEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceCompleted"
  ): TypedContractEvent<
    RebalanceCompletedEvent.InputTuple,
    RebalanceCompletedEvent.OutputTuple,
    RebalanceCompletedEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceCoolDownSet"
  ): TypedContractEvent<
    RebalanceCoolDownSetEvent.InputTuple,
    RebalanceCoolDownSetEvent.OutputTuple,
    RebalanceCoolDownSetEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceStarted"
  ): TypedContractEvent<
    RebalanceStartedEvent.InputTuple,
    RebalanceStartedEvent.OutputTuple,
    RebalanceStartedEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceStepCount"
  ): TypedContractEvent<
    RebalanceStepCountEvent.InputTuple,
    RebalanceStepCountEvent.OutputTuple,
    RebalanceStepCountEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceStepFailed"
  ): TypedContractEvent<
    RebalanceStepFailedEvent.InputTuple,
    RebalanceStepFailedEvent.OutputTuple,
    RebalanceStepFailedEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceStepSuccess"
  ): TypedContractEvent<
    RebalanceStepSuccessEvent.InputTuple,
    RebalanceStepSuccessEvent.OutputTuple,
    RebalanceStepSuccessEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardDiscoveryFailed"
  ): TypedContractEvent<
    RewardDiscoveryFailedEvent.InputTuple,
    RewardDiscoveryFailedEvent.OutputTuple,
    RewardDiscoveryFailedEvent.OutputObject
  >;
  getEvent(
    key: "RewardEarned"
  ): TypedContractEvent<
    RewardEarnedEvent.InputTuple,
    RewardEarnedEvent.OutputTuple,
    RewardEarnedEvent.OutputObject
  >;
  getEvent(
    key: "RewardForwarded"
  ): TypedContractEvent<
    RewardForwardedEvent.InputTuple,
    RewardForwardedEvent.OutputTuple,
    RewardForwardedEvent.OutputObject
  >;
  getEvent(
    key: "RewardHarvestFailed"
  ): TypedContractEvent<
    RewardHarvestFailedEvent.InputTuple,
    RewardHarvestFailedEvent.OutputTuple,
    RewardHarvestFailedEvent.OutputObject
  >;
  getEvent(
    key: "RewardTokensDiscovered"
  ): TypedContractEvent<
    RewardTokensDiscoveredEvent.InputTuple,
    RewardTokensDiscoveredEvent.OutputTuple,
    RewardTokensDiscoveredEvent.OutputObject
  >;
  getEvent(
    key: "SlippageCheckFailed"
  ): TypedContractEvent<
    SlippageCheckFailedEvent.InputTuple,
    SlippageCheckFailedEvent.OutputTuple,
    SlippageCheckFailedEvent.OutputObject
  >;
  getEvent(
    key: "TickValidationFailed"
  ): TypedContractEvent<
    TickValidationFailedEvent.InputTuple,
    TickValidationFailedEvent.OutputTuple,
    TickValidationFailedEvent.OutputObject
  >;
  getEvent(
    key: "TokensCollected"
  ): TypedContractEvent<
    TokensCollectedEvent.InputTuple,
    TokensCollectedEvent.OutputTuple,
    TokensCollectedEvent.OutputObject
  >;
  getEvent(
    key: "VaultAccountingUpdateFailed"
  ): TypedContractEvent<
    VaultAccountingUpdateFailedEvent.InputTuple,
    VaultAccountingUpdateFailedEvent.OutputTuple,
    VaultAccountingUpdateFailedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalProcessingFailed"
  ): TypedContractEvent<
    WithdrawalProcessingFailedEvent.InputTuple,
    WithdrawalProcessingFailedEvent.OutputTuple,
    WithdrawalProcessingFailedEvent.OutputObject
  >;
  getEvent(
    key: "XShadowConversionFailed"
  ): TypedContractEvent<
    XShadowConversionFailedEvent.InputTuple,
    XShadowConversionFailedEvent.OutputTuple,
    XShadowConversionFailedEvent.OutputObject
  >;

  filters: {
    "AdditionalTokensCollected(uint256,uint256,uint256)": TypedContractEvent<
      AdditionalTokensCollectedEvent.InputTuple,
      AdditionalTokensCollectedEvent.OutputTuple,
      AdditionalTokensCollectedEvent.OutputObject
    >;
    AdditionalTokensCollected: TypedContractEvent<
      AdditionalTokensCollectedEvent.InputTuple,
      AdditionalTokensCollectedEvent.OutputTuple,
      AdditionalTokensCollectedEvent.OutputObject
    >;

    "AumAnnualFeeSet(uint256)": TypedContractEvent<
      AumAnnualFeeSetEvent.InputTuple,
      AumAnnualFeeSetEvent.OutputTuple,
      AumAnnualFeeSetEvent.OutputObject
    >;
    AumAnnualFeeSet: TypedContractEvent<
      AumAnnualFeeSetEvent.InputTuple,
      AumAnnualFeeSetEvent.OutputTuple,
      AumAnnualFeeSetEvent.OutputObject
    >;

    "AumFeeCollected(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AumFeeCollectedEvent.InputTuple,
      AumFeeCollectedEvent.OutputTuple,
      AumFeeCollectedEvent.OutputObject
    >;
    AumFeeCollected: TypedContractEvent<
      AumFeeCollectedEvent.InputTuple,
      AumFeeCollectedEvent.OutputTuple,
      AumFeeCollectedEvent.OutputObject
    >;

    "CollectFailed(uint256,string)": TypedContractEvent<
      CollectFailedEvent.InputTuple,
      CollectFailedEvent.OutputTuple,
      CollectFailedEvent.OutputObject
    >;
    CollectFailed: TypedContractEvent<
      CollectFailedEvent.InputTuple,
      CollectFailedEvent.OutputTuple,
      CollectFailedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InsufficientBalance(uint256,uint256,uint256,uint256)": TypedContractEvent<
      InsufficientBalanceEvent.InputTuple,
      InsufficientBalanceEvent.OutputTuple,
      InsufficientBalanceEvent.OutputObject
    >;
    InsufficientBalance: TypedContractEvent<
      InsufficientBalanceEvent.InputTuple,
      InsufficientBalanceEvent.OutputTuple,
      InsufficientBalanceEvent.OutputObject
    >;

    "LiquidityDecreaseFailed(uint256,string)": TypedContractEvent<
      LiquidityDecreaseFailedEvent.InputTuple,
      LiquidityDecreaseFailedEvent.OutputTuple,
      LiquidityDecreaseFailedEvent.OutputObject
    >;
    LiquidityDecreaseFailed: TypedContractEvent<
      LiquidityDecreaseFailedEvent.InputTuple,
      LiquidityDecreaseFailedEvent.OutputTuple,
      LiquidityDecreaseFailedEvent.OutputObject
    >;

    "LiquidityDecreased(uint256,uint128)": TypedContractEvent<
      LiquidityDecreasedEvent.InputTuple,
      LiquidityDecreasedEvent.OutputTuple,
      LiquidityDecreasedEvent.OutputObject
    >;
    LiquidityDecreased: TypedContractEvent<
      LiquidityDecreasedEvent.InputTuple,
      LiquidityDecreasedEvent.OutputTuple,
      LiquidityDecreasedEvent.OutputObject
    >;

    "NftBurnFailure(uint256)": TypedContractEvent<
      NftBurnFailureEvent.InputTuple,
      NftBurnFailureEvent.OutputTuple,
      NftBurnFailureEvent.OutputObject
    >;
    NftBurnFailure: TypedContractEvent<
      NftBurnFailureEvent.InputTuple,
      NftBurnFailureEvent.OutputTuple,
      NftBurnFailureEvent.OutputObject
    >;

    "NoRewardAvailableToClaim(address)": TypedContractEvent<
      NoRewardAvailableToClaimEvent.InputTuple,
      NoRewardAvailableToClaimEvent.OutputTuple,
      NoRewardAvailableToClaimEvent.OutputObject
    >;
    NoRewardAvailableToClaim: TypedContractEvent<
      NoRewardAvailableToClaimEvent.InputTuple,
      NoRewardAvailableToClaimEvent.OutputTuple,
      NoRewardAvailableToClaimEvent.OutputObject
    >;

    "NpmSweepTokenFailure(address,string)": TypedContractEvent<
      NpmSweepTokenFailureEvent.InputTuple,
      NpmSweepTokenFailureEvent.OutputTuple,
      NpmSweepTokenFailureEvent.OutputObject
    >;
    NpmSweepTokenFailure: TypedContractEvent<
      NpmSweepTokenFailureEvent.InputTuple,
      NpmSweepTokenFailureEvent.OutputTuple,
      NpmSweepTokenFailureEvent.OutputObject
    >;

    "NpmSweepTokenSuccess(address)": TypedContractEvent<
      NpmSweepTokenSuccessEvent.InputTuple,
      NpmSweepTokenSuccessEvent.OutputTuple,
      NpmSweepTokenSuccessEvent.OutputObject
    >;
    NpmSweepTokenSuccess: TypedContractEvent<
      NpmSweepTokenSuccessEvent.InputTuple,
      NpmSweepTokenSuccessEvent.OutputTuple,
      NpmSweepTokenSuccessEvent.OutputObject
    >;

    "OperatorSet(address)": TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
    OperatorSet: TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;

    "PendingAumAnnualFeeReset()": TypedContractEvent<
      PendingAumAnnualFeeResetEvent.InputTuple,
      PendingAumAnnualFeeResetEvent.OutputTuple,
      PendingAumAnnualFeeResetEvent.OutputObject
    >;
    PendingAumAnnualFeeReset: TypedContractEvent<
      PendingAumAnnualFeeResetEvent.InputTuple,
      PendingAumAnnualFeeResetEvent.OutputTuple,
      PendingAumAnnualFeeResetEvent.OutputObject
    >;

    "PendingAumAnnualFeeSet(uint256)": TypedContractEvent<
      PendingAumAnnualFeeSetEvent.InputTuple,
      PendingAumAnnualFeeSetEvent.OutputTuple,
      PendingAumAnnualFeeSetEvent.OutputObject
    >;
    PendingAumAnnualFeeSet: TypedContractEvent<
      PendingAumAnnualFeeSetEvent.InputTuple,
      PendingAumAnnualFeeSetEvent.OutputTuple,
      PendingAumAnnualFeeSetEvent.OutputObject
    >;

    "PositionBurned(uint256)": TypedContractEvent<
      PositionBurnedEvent.InputTuple,
      PositionBurnedEvent.OutputTuple,
      PositionBurnedEvent.OutputObject
    >;
    PositionBurned: TypedContractEvent<
      PositionBurnedEvent.InputTuple,
      PositionBurnedEvent.OutputTuple,
      PositionBurnedEvent.OutputObject
    >;

    "PositionExitFailed(uint256,string)": TypedContractEvent<
      PositionExitFailedEvent.InputTuple,
      PositionExitFailedEvent.OutputTuple,
      PositionExitFailedEvent.OutputObject
    >;
    PositionExitFailed: TypedContractEvent<
      PositionExitFailedEvent.InputTuple,
      PositionExitFailedEvent.OutputTuple,
      PositionExitFailedEvent.OutputObject
    >;

    "PositionMinted(uint256,int24,int24,uint128)": TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;
    PositionMinted: TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;

    "PositionNotReadyForBurn(uint256,uint128,uint128,uint128)": TypedContractEvent<
      PositionNotReadyForBurnEvent.InputTuple,
      PositionNotReadyForBurnEvent.OutputTuple,
      PositionNotReadyForBurnEvent.OutputObject
    >;
    PositionNotReadyForBurn: TypedContractEvent<
      PositionNotReadyForBurnEvent.InputTuple,
      PositionNotReadyForBurnEvent.OutputTuple,
      PositionNotReadyForBurnEvent.OutputObject
    >;

    "RebalanceAborted(string,uint8)": TypedContractEvent<
      RebalanceAbortedEvent.InputTuple,
      RebalanceAbortedEvent.OutputTuple,
      RebalanceAbortedEvent.OutputObject
    >;
    RebalanceAborted: TypedContractEvent<
      RebalanceAbortedEvent.InputTuple,
      RebalanceAbortedEvent.OutputTuple,
      RebalanceAbortedEvent.OutputObject
    >;

    "RebalanceCheckFailed(string,uint256)": TypedContractEvent<
      RebalanceCheckFailedEvent.InputTuple,
      RebalanceCheckFailedEvent.OutputTuple,
      RebalanceCheckFailedEvent.OutputObject
    >;
    RebalanceCheckFailed: TypedContractEvent<
      RebalanceCheckFailedEvent.InputTuple,
      RebalanceCheckFailedEvent.OutputTuple,
      RebalanceCheckFailedEvent.OutputObject
    >;

    "RebalanceCompleted(uint256,uint256,uint256)": TypedContractEvent<
      RebalanceCompletedEvent.InputTuple,
      RebalanceCompletedEvent.OutputTuple,
      RebalanceCompletedEvent.OutputObject
    >;
    RebalanceCompleted: TypedContractEvent<
      RebalanceCompletedEvent.InputTuple,
      RebalanceCompletedEvent.OutputTuple,
      RebalanceCompletedEvent.OutputObject
    >;

    "RebalanceCoolDownSet(uint256)": TypedContractEvent<
      RebalanceCoolDownSetEvent.InputTuple,
      RebalanceCoolDownSetEvent.OutputTuple,
      RebalanceCoolDownSetEvent.OutputObject
    >;
    RebalanceCoolDownSet: TypedContractEvent<
      RebalanceCoolDownSetEvent.InputTuple,
      RebalanceCoolDownSetEvent.OutputTuple,
      RebalanceCoolDownSetEvent.OutputObject
    >;

    "RebalanceStarted(address,int24,int24,uint256,uint256)": TypedContractEvent<
      RebalanceStartedEvent.InputTuple,
      RebalanceStartedEvent.OutputTuple,
      RebalanceStartedEvent.OutputObject
    >;
    RebalanceStarted: TypedContractEvent<
      RebalanceStartedEvent.InputTuple,
      RebalanceStartedEvent.OutputTuple,
      RebalanceStartedEvent.OutputObject
    >;

    "RebalanceStepCount(uint256)": TypedContractEvent<
      RebalanceStepCountEvent.InputTuple,
      RebalanceStepCountEvent.OutputTuple,
      RebalanceStepCountEvent.OutputObject
    >;
    RebalanceStepCount: TypedContractEvent<
      RebalanceStepCountEvent.InputTuple,
      RebalanceStepCountEvent.OutputTuple,
      RebalanceStepCountEvent.OutputObject
    >;

    "RebalanceStepFailed(uint8,string)": TypedContractEvent<
      RebalanceStepFailedEvent.InputTuple,
      RebalanceStepFailedEvent.OutputTuple,
      RebalanceStepFailedEvent.OutputObject
    >;
    RebalanceStepFailed: TypedContractEvent<
      RebalanceStepFailedEvent.InputTuple,
      RebalanceStepFailedEvent.OutputTuple,
      RebalanceStepFailedEvent.OutputObject
    >;

    "RebalanceStepSuccess(uint8,bytes32)": TypedContractEvent<
      RebalanceStepSuccessEvent.InputTuple,
      RebalanceStepSuccessEvent.OutputTuple,
      RebalanceStepSuccessEvent.OutputObject
    >;
    RebalanceStepSuccess: TypedContractEvent<
      RebalanceStepSuccessEvent.InputTuple,
      RebalanceStepSuccessEvent.OutputTuple,
      RebalanceStepSuccessEvent.OutputObject
    >;

    "RewardClaimed(address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RewardDiscoveryFailed(address)": TypedContractEvent<
      RewardDiscoveryFailedEvent.InputTuple,
      RewardDiscoveryFailedEvent.OutputTuple,
      RewardDiscoveryFailedEvent.OutputObject
    >;
    RewardDiscoveryFailed: TypedContractEvent<
      RewardDiscoveryFailedEvent.InputTuple,
      RewardDiscoveryFailedEvent.OutputTuple,
      RewardDiscoveryFailedEvent.OutputObject
    >;

    "RewardEarned(address,uint256)": TypedContractEvent<
      RewardEarnedEvent.InputTuple,
      RewardEarnedEvent.OutputTuple,
      RewardEarnedEvent.OutputObject
    >;
    RewardEarned: TypedContractEvent<
      RewardEarnedEvent.InputTuple,
      RewardEarnedEvent.OutputTuple,
      RewardEarnedEvent.OutputObject
    >;

    "RewardForwarded(address,address,uint256)": TypedContractEvent<
      RewardForwardedEvent.InputTuple,
      RewardForwardedEvent.OutputTuple,
      RewardForwardedEvent.OutputObject
    >;
    RewardForwarded: TypedContractEvent<
      RewardForwardedEvent.InputTuple,
      RewardForwardedEvent.OutputTuple,
      RewardForwardedEvent.OutputObject
    >;

    "RewardHarvestFailed(address,string)": TypedContractEvent<
      RewardHarvestFailedEvent.InputTuple,
      RewardHarvestFailedEvent.OutputTuple,
      RewardHarvestFailedEvent.OutputObject
    >;
    RewardHarvestFailed: TypedContractEvent<
      RewardHarvestFailedEvent.InputTuple,
      RewardHarvestFailedEvent.OutputTuple,
      RewardHarvestFailedEvent.OutputObject
    >;

    "RewardTokensDiscovered(address[])": TypedContractEvent<
      RewardTokensDiscoveredEvent.InputTuple,
      RewardTokensDiscoveredEvent.OutputTuple,
      RewardTokensDiscoveredEvent.OutputObject
    >;
    RewardTokensDiscovered: TypedContractEvent<
      RewardTokensDiscoveredEvent.InputTuple,
      RewardTokensDiscoveredEvent.OutputTuple,
      RewardTokensDiscoveredEvent.OutputObject
    >;

    "SlippageCheckFailed(int24,int24,int24)": TypedContractEvent<
      SlippageCheckFailedEvent.InputTuple,
      SlippageCheckFailedEvent.OutputTuple,
      SlippageCheckFailedEvent.OutputObject
    >;
    SlippageCheckFailed: TypedContractEvent<
      SlippageCheckFailedEvent.InputTuple,
      SlippageCheckFailedEvent.OutputTuple,
      SlippageCheckFailedEvent.OutputObject
    >;

    "TickValidationFailed(string,int24,int24)": TypedContractEvent<
      TickValidationFailedEvent.InputTuple,
      TickValidationFailedEvent.OutputTuple,
      TickValidationFailedEvent.OutputObject
    >;
    TickValidationFailed: TypedContractEvent<
      TickValidationFailedEvent.InputTuple,
      TickValidationFailedEvent.OutputTuple,
      TickValidationFailedEvent.OutputObject
    >;

    "TokensCollected(uint256,uint256,uint256)": TypedContractEvent<
      TokensCollectedEvent.InputTuple,
      TokensCollectedEvent.OutputTuple,
      TokensCollectedEvent.OutputObject
    >;
    TokensCollected: TypedContractEvent<
      TokensCollectedEvent.InputTuple,
      TokensCollectedEvent.OutputTuple,
      TokensCollectedEvent.OutputObject
    >;

    "VaultAccountingUpdateFailed(address)": TypedContractEvent<
      VaultAccountingUpdateFailedEvent.InputTuple,
      VaultAccountingUpdateFailedEvent.OutputTuple,
      VaultAccountingUpdateFailedEvent.OutputObject
    >;
    VaultAccountingUpdateFailed: TypedContractEvent<
      VaultAccountingUpdateFailedEvent.InputTuple,
      VaultAccountingUpdateFailedEvent.OutputTuple,
      VaultAccountingUpdateFailedEvent.OutputObject
    >;

    "WithdrawalProcessingFailed(uint256,string)": TypedContractEvent<
      WithdrawalProcessingFailedEvent.InputTuple,
      WithdrawalProcessingFailedEvent.OutputTuple,
      WithdrawalProcessingFailedEvent.OutputObject
    >;
    WithdrawalProcessingFailed: TypedContractEvent<
      WithdrawalProcessingFailedEvent.InputTuple,
      WithdrawalProcessingFailedEvent.OutputTuple,
      WithdrawalProcessingFailedEvent.OutputObject
    >;

    "XShadowConversionFailed(address)": TypedContractEvent<
      XShadowConversionFailedEvent.InputTuple,
      XShadowConversionFailedEvent.OutputTuple,
      XShadowConversionFailedEvent.OutputObject
    >;
    XShadowConversionFailed: TypedContractEvent<
      XShadowConversionFailedEvent.InputTuple,
      XShadowConversionFailedEvent.OutputTuple,
      XShadowConversionFailedEvent.OutputObject
    >;
  };
}
