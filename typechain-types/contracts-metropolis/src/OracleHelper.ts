/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IOracleHelper {
  export type OracleParametersStruct = {
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
    heartbeatX: BigNumberish;
    heartbeatY: BigNumberish;
    deviationThreshold: BigNumberish;
    twapPriceCheckEnabled: boolean;
    twapInterval: BigNumberish;
  };

  export type OracleParametersStructOutput = [
    minPrice: bigint,
    maxPrice: bigint,
    heartbeatX: bigint,
    heartbeatY: bigint,
    deviationThreshold: bigint,
    twapPriceCheckEnabled: boolean,
    twapInterval: bigint
  ] & {
    minPrice: bigint;
    maxPrice: bigint;
    heartbeatX: bigint;
    heartbeatY: bigint;
    deviationThreshold: bigint;
    twapPriceCheckEnabled: boolean;
    twapInterval: bigint;
  };
}

export interface OracleHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkPriceInDeviation"
      | "getDataFeedX"
      | "getDataFeedY"
      | "getOracleParameters"
      | "getPrice"
      | "getSequencerUptimeFeed"
      | "getValueInY"
      | "initialize"
      | "setOracleParameters"
      | "setSequencerUptimeFeed"
      | "setTwapParams"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkPriceInDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataFeedX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataFeedY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleParameters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSequencerUptimeFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValueInY",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleParameters",
    values: [IOracleHelper.OracleParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSequencerUptimeFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapParams",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkPriceInDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataFeedX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataFeedY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueInY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapParams",
    data: BytesLike
  ): Result;
}

export interface OracleHelper extends BaseContract {
  connect(runner?: ContractRunner | null): OracleHelper;
  waitForDeployment(): Promise<this>;

  interface: OracleHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkPriceInDeviation: TypedContractMethod<[], [boolean], "view">;

  getDataFeedX: TypedContractMethod<[], [string], "view">;

  getDataFeedY: TypedContractMethod<[], [string], "view">;

  getOracleParameters: TypedContractMethod<
    [],
    [IOracleHelper.OracleParametersStructOutput],
    "view"
  >;

  getPrice: TypedContractMethod<[], [bigint], "view">;

  getSequencerUptimeFeed: TypedContractMethod<[], [string], "view">;

  getValueInY: TypedContractMethod<
    [price: BigNumberish, amountX: BigNumberish, amountY: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      vault: AddressLike,
      heartbeatX: BigNumberish,
      heartbeatY: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      sequencerUptimeFeed: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setOracleParameters: TypedContractMethod<
    [parameters: IOracleHelper.OracleParametersStruct],
    [void],
    "nonpayable"
  >;

  setSequencerUptimeFeed: TypedContractMethod<
    [sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setTwapParams: TypedContractMethod<
    [
      enabled: boolean,
      interval: BigNumberish,
      deviationThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkPriceInDeviation"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDataFeedX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDataFeedY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOracleParameters"
  ): TypedContractMethod<
    [],
    [IOracleHelper.OracleParametersStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSequencerUptimeFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getValueInY"
  ): TypedContractMethod<
    [price: BigNumberish, amountX: BigNumberish, amountY: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      vault: AddressLike,
      heartbeatX: BigNumberish,
      heartbeatY: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      sequencerUptimeFeed: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracleParameters"
  ): TypedContractMethod<
    [parameters: IOracleHelper.OracleParametersStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSequencerUptimeFeed"
  ): TypedContractMethod<
    [sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTwapParams"
  ): TypedContractMethod<
    [
      enabled: boolean,
      interval: BigNumberish,
      deviationThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
