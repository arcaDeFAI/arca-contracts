/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IOracleHelper {
  export type OracleParametersStruct = {
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
    heartbeatX: BigNumberish;
    heartbeatY: BigNumberish;
    deviationThreshold: BigNumberish;
    twapPriceCheckEnabled: boolean;
    twapInterval: BigNumberish;
  };

  export type OracleParametersStructOutput = [
    minPrice: bigint,
    maxPrice: bigint,
    heartbeatX: bigint,
    heartbeatY: bigint,
    deviationThreshold: bigint,
    twapPriceCheckEnabled: boolean,
    twapInterval: bigint
  ] & {
    minPrice: bigint;
    maxPrice: bigint;
    heartbeatX: bigint;
    heartbeatY: bigint;
    deviationThreshold: bigint;
    twapPriceCheckEnabled: boolean;
    twapInterval: bigint;
  };
}

export interface IVaultFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelShutdown"
      | "createMarketMakerOracleVault"
      | "createMarketMakerShadowOracleRewardVault"
      | "getDefaultOperator"
      | "getDepositToWithdrawCooldown"
      | "getFeeRecipient"
      | "getFeeRecipientByVault"
      | "getNumberOfStrategies"
      | "getNumberOfVaults"
      | "getShadowNonfungiblePositionManager"
      | "getShadowVoter"
      | "getStrategyAt"
      | "getStrategyImplementation"
      | "getStrategyType"
      | "getTransferIgnoreList"
      | "getVaultAt"
      | "getVaultImplementation"
      | "getVaultType"
      | "getWNative"
      | "isPairWhitelisted"
      | "isTransferIgnored"
      | "linkVaultToStrategy"
      | "recoverERC20"
      | "resetPendingAumAnnualFee"
      | "setDefaultOperator"
      | "setDefaultSequencerUptimeFeed"
      | "setEmergencyMode"
      | "setFeeRecipient"
      | "setOperator"
      | "setOracleParameters"
      | "setPairWhitelist"
      | "setPendingAumAnnualFee"
      | "setRebalanceCoolDown"
      | "setSequencerUptimeFeed"
      | "setShadowNonfungiblePositionManager"
      | "setShadowVoter"
      | "setStrategyImplementation"
      | "setTransferIgnoreList"
      | "setVaultImplementation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreationFeeSet"
      | "DefaultOperatorSet"
      | "DepositToWithdrawCooldownSet"
      | "DeviationThresholdUpdated"
      | "FeeRecipientSet"
      | "MetropolisStrategyCreatedAndLinked"
      | "PairWhitelistSet"
      | "RebalanceSettingSet"
      | "ShadowStrategyCreatedAndLinked"
      | "StrategyCreated"
      | "StrategyImplementationSet"
      | "TransferIgnoreListSet"
      | "VaultCreated"
      | "VaultImplementationSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelShutdown",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketMakerOracleVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketMakerShadowOracleRewardVault",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositToWithdrawCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipientByVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfStrategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShadowNonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShadowVoter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyImplementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferIgnoreList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultImplementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPairWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferIgnored",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkVaultToStrategy",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetPendingAumAnnualFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultSequencerUptimeFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyMode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleParameters",
    values: [AddressLike, IOracleHelper.OracleParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairWhitelist",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAumAnnualFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceCoolDown",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSequencerUptimeFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShadowNonfungiblePositionManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShadowVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyImplementation",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferIgnoreList",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultImplementation",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketMakerOracleVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketMakerShadowOracleRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositToWithdrawCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipientByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShadowNonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShadowVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferIgnoreList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaultAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPairWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferIgnored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkVaultToStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultSequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShadowNonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShadowVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferIgnoreList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultImplementation",
    data: BytesLike
  ): Result;
}

export namespace CreationFeeSetEvent {
  export type InputTuple = [sender: AddressLike, creationFee: BigNumberish];
  export type OutputTuple = [sender: string, creationFee: bigint];
  export interface OutputObject {
    sender: string;
    creationFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultOperatorSetEvent {
  export type InputTuple = [sender: AddressLike, defaultOperator: AddressLike];
  export type OutputTuple = [sender: string, defaultOperator: string];
  export interface OutputObject {
    sender: string;
    defaultOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositToWithdrawCooldownSetEvent {
  export type InputTuple = [cooldown: BigNumberish];
  export type OutputTuple = [cooldown: bigint];
  export interface OutputObject {
    cooldown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeviationThresholdUpdatedEvent {
  export type InputTuple = [vault: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [vault: string, threshold: bigint];
  export interface OutputObject {
    vault: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientSetEvent {
  export type InputTuple = [sender: AddressLike, feeRecipient: AddressLike];
  export type OutputTuple = [sender: string, feeRecipient: string];
  export interface OutputObject {
    sender: string;
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetropolisStrategyCreatedAndLinkedEvent {
  export type InputTuple = [
    vault: AddressLike,
    strategy: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [vault: string, strategy: string, operator: string];
  export interface OutputObject {
    vault: string;
    strategy: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairWhitelistSetEvent {
  export type InputTuple = [pairs: AddressLike[], isWhitelisted: boolean];
  export type OutputTuple = [pairs: string[], isWhitelisted: boolean];
  export interface OutputObject {
    pairs: string[];
    isWhitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceSettingSetEvent {
  export type InputTuple = [vault: AddressLike, user: AddressLike];
  export type OutputTuple = [vault: string, user: string];
  export interface OutputObject {
    vault: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShadowStrategyCreatedAndLinkedEvent {
  export type InputTuple = [
    vault: AddressLike,
    strategy: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [vault: string, strategy: string, operator: string];
  export interface OutputObject {
    vault: string;
    strategy: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyCreatedEvent {
  export type InputTuple = [
    sType: BigNumberish,
    strategy: AddressLike,
    vault: AddressLike,
    lbPair: AddressLike,
    strategyIndex: BigNumberish
  ];
  export type OutputTuple = [
    sType: bigint,
    strategy: string,
    vault: string,
    lbPair: string,
    strategyIndex: bigint
  ];
  export interface OutputObject {
    sType: bigint;
    strategy: string;
    vault: string;
    lbPair: string;
    strategyIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyImplementationSetEvent {
  export type InputTuple = [
    sType: BigNumberish,
    strategyImplementation: AddressLike
  ];
  export type OutputTuple = [sType: bigint, strategyImplementation: string];
  export interface OutputObject {
    sType: bigint;
    strategyImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferIgnoreListSetEvent {
  export type InputTuple = [addresses: AddressLike[]];
  export type OutputTuple = [addresses: string[]];
  export interface OutputObject {
    addresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [
    vType: BigNumberish,
    vault: AddressLike,
    lbPair: AddressLike,
    vaultIndex: BigNumberish,
    tokenX: AddressLike,
    tokenY: AddressLike
  ];
  export type OutputTuple = [
    vType: bigint,
    vault: string,
    lbPair: string,
    vaultIndex: bigint,
    tokenX: string,
    tokenY: string
  ];
  export interface OutputObject {
    vType: bigint;
    vault: string;
    lbPair: string;
    vaultIndex: bigint;
    tokenX: string;
    tokenY: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultImplementationSetEvent {
  export type InputTuple = [
    vType: BigNumberish,
    vaultImplementation: AddressLike
  ];
  export type OutputTuple = [vType: bigint, vaultImplementation: string];
  export interface OutputObject {
    vType: bigint;
    vaultImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVaultFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IVaultFactory;
  waitForDeployment(): Promise<this>;

  interface: IVaultFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelShutdown: TypedContractMethod<
    [oracleVault: AddressLike],
    [void],
    "nonpayable"
  >;

  createMarketMakerOracleVault: TypedContractMethod<
    [lbPair: AddressLike, aumFee: BigNumberish],
    [[string, string] & { vault: string; strategy: string }],
    "payable"
  >;

  createMarketMakerShadowOracleRewardVault: TypedContractMethod<
    [pool: AddressLike, aumFee: BigNumberish, twapInterval: BigNumberish],
    [[string, string] & { vault: string; strategy: string }],
    "payable"
  >;

  getDefaultOperator: TypedContractMethod<[], [string], "view">;

  getDepositToWithdrawCooldown: TypedContractMethod<[], [bigint], "view">;

  getFeeRecipient: TypedContractMethod<[], [string], "view">;

  getFeeRecipientByVault: TypedContractMethod<
    [vault: AddressLike],
    [string],
    "view"
  >;

  getNumberOfStrategies: TypedContractMethod<
    [sType: BigNumberish],
    [bigint],
    "view"
  >;

  getNumberOfVaults: TypedContractMethod<
    [vType: BigNumberish],
    [bigint],
    "view"
  >;

  getShadowNonfungiblePositionManager: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  getShadowVoter: TypedContractMethod<[], [string], "view">;

  getStrategyAt: TypedContractMethod<
    [sType: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;

  getStrategyImplementation: TypedContractMethod<
    [sType: BigNumberish],
    [string],
    "view"
  >;

  getStrategyType: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  getTransferIgnoreList: TypedContractMethod<[], [string[]], "view">;

  getVaultAt: TypedContractMethod<
    [vType: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;

  getVaultImplementation: TypedContractMethod<
    [vType: BigNumberish],
    [string],
    "view"
  >;

  getVaultType: TypedContractMethod<[vault: AddressLike], [bigint], "view">;

  getWNative: TypedContractMethod<[], [string], "view">;

  isPairWhitelisted: TypedContractMethod<
    [pair: AddressLike],
    [boolean],
    "view"
  >;

  isTransferIgnored: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  linkVaultToStrategy: TypedContractMethod<
    [vault: AddressLike, strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverERC20: TypedContractMethod<
    [
      vault: AddressLike,
      token: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  resetPendingAumAnnualFee: TypedContractMethod<
    [vault: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultOperator: TypedContractMethod<
    [defaultOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultSequencerUptimeFeed: TypedContractMethod<
    [sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setEmergencyMode: TypedContractMethod<
    [vault: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperator: TypedContractMethod<
    [strategy: AddressLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;

  setOracleParameters: TypedContractMethod<
    [
      oracleVault: AddressLike,
      parameters: IOracleHelper.OracleParametersStruct
    ],
    [void],
    "nonpayable"
  >;

  setPairWhitelist: TypedContractMethod<
    [pairs: AddressLike[], isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;

  setPendingAumAnnualFee: TypedContractMethod<
    [vault: AddressLike, pendingAumAnnualFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRebalanceCoolDown: TypedContractMethod<
    [strategy: AddressLike, coolDown: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSequencerUptimeFeed: TypedContractMethod<
    [oracleVault: AddressLike, sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setShadowNonfungiblePositionManager: TypedContractMethod<
    [nonfungiblePositionManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setShadowVoter: TypedContractMethod<
    [voter: AddressLike],
    [void],
    "nonpayable"
  >;

  setStrategyImplementation: TypedContractMethod<
    [sType: BigNumberish, strategyImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  setTransferIgnoreList: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setVaultImplementation: TypedContractMethod<
    [vType: BigNumberish, vaultImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelShutdown"
  ): TypedContractMethod<[oracleVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createMarketMakerOracleVault"
  ): TypedContractMethod<
    [lbPair: AddressLike, aumFee: BigNumberish],
    [[string, string] & { vault: string; strategy: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createMarketMakerShadowOracleRewardVault"
  ): TypedContractMethod<
    [pool: AddressLike, aumFee: BigNumberish, twapInterval: BigNumberish],
    [[string, string] & { vault: string; strategy: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getDefaultOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDepositToWithdrawCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeRecipientByVault"
  ): TypedContractMethod<[vault: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getNumberOfStrategies"
  ): TypedContractMethod<[sType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfVaults"
  ): TypedContractMethod<[vType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getShadowNonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getShadowVoter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyAt"
  ): TypedContractMethod<
    [sType: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStrategyImplementation"
  ): TypedContractMethod<[sType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyType"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransferIgnoreList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVaultAt"
  ): TypedContractMethod<
    [vType: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultImplementation"
  ): TypedContractMethod<[vType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultType"
  ): TypedContractMethod<[vault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWNative"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isPairWhitelisted"
  ): TypedContractMethod<[pair: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTransferIgnored"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "linkVaultToStrategy"
  ): TypedContractMethod<
    [vault: AddressLike, strategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [
      vault: AddressLike,
      token: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetPendingAumAnnualFee"
  ): TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultOperator"
  ): TypedContractMethod<[defaultOperator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultSequencerUptimeFeed"
  ): TypedContractMethod<
    [sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyMode"
  ): TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [strategy: AddressLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracleParameters"
  ): TypedContractMethod<
    [
      oracleVault: AddressLike,
      parameters: IOracleHelper.OracleParametersStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPairWhitelist"
  ): TypedContractMethod<
    [pairs: AddressLike[], isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPendingAumAnnualFee"
  ): TypedContractMethod<
    [vault: AddressLike, pendingAumAnnualFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRebalanceCoolDown"
  ): TypedContractMethod<
    [strategy: AddressLike, coolDown: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSequencerUptimeFeed"
  ): TypedContractMethod<
    [oracleVault: AddressLike, sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShadowNonfungiblePositionManager"
  ): TypedContractMethod<
    [nonfungiblePositionManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShadowVoter"
  ): TypedContractMethod<[voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrategyImplementation"
  ): TypedContractMethod<
    [sType: BigNumberish, strategyImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferIgnoreList"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVaultImplementation"
  ): TypedContractMethod<
    [vType: BigNumberish, vaultImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CreationFeeSet"
  ): TypedContractEvent<
    CreationFeeSetEvent.InputTuple,
    CreationFeeSetEvent.OutputTuple,
    CreationFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "DefaultOperatorSet"
  ): TypedContractEvent<
    DefaultOperatorSetEvent.InputTuple,
    DefaultOperatorSetEvent.OutputTuple,
    DefaultOperatorSetEvent.OutputObject
  >;
  getEvent(
    key: "DepositToWithdrawCooldownSet"
  ): TypedContractEvent<
    DepositToWithdrawCooldownSetEvent.InputTuple,
    DepositToWithdrawCooldownSetEvent.OutputTuple,
    DepositToWithdrawCooldownSetEvent.OutputObject
  >;
  getEvent(
    key: "DeviationThresholdUpdated"
  ): TypedContractEvent<
    DeviationThresholdUpdatedEvent.InputTuple,
    DeviationThresholdUpdatedEvent.OutputTuple,
    DeviationThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientSet"
  ): TypedContractEvent<
    FeeRecipientSetEvent.InputTuple,
    FeeRecipientSetEvent.OutputTuple,
    FeeRecipientSetEvent.OutputObject
  >;
  getEvent(
    key: "MetropolisStrategyCreatedAndLinked"
  ): TypedContractEvent<
    MetropolisStrategyCreatedAndLinkedEvent.InputTuple,
    MetropolisStrategyCreatedAndLinkedEvent.OutputTuple,
    MetropolisStrategyCreatedAndLinkedEvent.OutputObject
  >;
  getEvent(
    key: "PairWhitelistSet"
  ): TypedContractEvent<
    PairWhitelistSetEvent.InputTuple,
    PairWhitelistSetEvent.OutputTuple,
    PairWhitelistSetEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceSettingSet"
  ): TypedContractEvent<
    RebalanceSettingSetEvent.InputTuple,
    RebalanceSettingSetEvent.OutputTuple,
    RebalanceSettingSetEvent.OutputObject
  >;
  getEvent(
    key: "ShadowStrategyCreatedAndLinked"
  ): TypedContractEvent<
    ShadowStrategyCreatedAndLinkedEvent.InputTuple,
    ShadowStrategyCreatedAndLinkedEvent.OutputTuple,
    ShadowStrategyCreatedAndLinkedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyCreated"
  ): TypedContractEvent<
    StrategyCreatedEvent.InputTuple,
    StrategyCreatedEvent.OutputTuple,
    StrategyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyImplementationSet"
  ): TypedContractEvent<
    StrategyImplementationSetEvent.InputTuple,
    StrategyImplementationSetEvent.OutputTuple,
    StrategyImplementationSetEvent.OutputObject
  >;
  getEvent(
    key: "TransferIgnoreListSet"
  ): TypedContractEvent<
    TransferIgnoreListSetEvent.InputTuple,
    TransferIgnoreListSetEvent.OutputTuple,
    TransferIgnoreListSetEvent.OutputObject
  >;
  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultImplementationSet"
  ): TypedContractEvent<
    VaultImplementationSetEvent.InputTuple,
    VaultImplementationSetEvent.OutputTuple,
    VaultImplementationSetEvent.OutputObject
  >;

  filters: {
    "CreationFeeSet(address,uint256)": TypedContractEvent<
      CreationFeeSetEvent.InputTuple,
      CreationFeeSetEvent.OutputTuple,
      CreationFeeSetEvent.OutputObject
    >;
    CreationFeeSet: TypedContractEvent<
      CreationFeeSetEvent.InputTuple,
      CreationFeeSetEvent.OutputTuple,
      CreationFeeSetEvent.OutputObject
    >;

    "DefaultOperatorSet(address,address)": TypedContractEvent<
      DefaultOperatorSetEvent.InputTuple,
      DefaultOperatorSetEvent.OutputTuple,
      DefaultOperatorSetEvent.OutputObject
    >;
    DefaultOperatorSet: TypedContractEvent<
      DefaultOperatorSetEvent.InputTuple,
      DefaultOperatorSetEvent.OutputTuple,
      DefaultOperatorSetEvent.OutputObject
    >;

    "DepositToWithdrawCooldownSet(uint256)": TypedContractEvent<
      DepositToWithdrawCooldownSetEvent.InputTuple,
      DepositToWithdrawCooldownSetEvent.OutputTuple,
      DepositToWithdrawCooldownSetEvent.OutputObject
    >;
    DepositToWithdrawCooldownSet: TypedContractEvent<
      DepositToWithdrawCooldownSetEvent.InputTuple,
      DepositToWithdrawCooldownSetEvent.OutputTuple,
      DepositToWithdrawCooldownSetEvent.OutputObject
    >;

    "DeviationThresholdUpdated(address,uint256)": TypedContractEvent<
      DeviationThresholdUpdatedEvent.InputTuple,
      DeviationThresholdUpdatedEvent.OutputTuple,
      DeviationThresholdUpdatedEvent.OutputObject
    >;
    DeviationThresholdUpdated: TypedContractEvent<
      DeviationThresholdUpdatedEvent.InputTuple,
      DeviationThresholdUpdatedEvent.OutputTuple,
      DeviationThresholdUpdatedEvent.OutputObject
    >;

    "FeeRecipientSet(address,address)": TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;
    FeeRecipientSet: TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;

    "MetropolisStrategyCreatedAndLinked(address,address,address)": TypedContractEvent<
      MetropolisStrategyCreatedAndLinkedEvent.InputTuple,
      MetropolisStrategyCreatedAndLinkedEvent.OutputTuple,
      MetropolisStrategyCreatedAndLinkedEvent.OutputObject
    >;
    MetropolisStrategyCreatedAndLinked: TypedContractEvent<
      MetropolisStrategyCreatedAndLinkedEvent.InputTuple,
      MetropolisStrategyCreatedAndLinkedEvent.OutputTuple,
      MetropolisStrategyCreatedAndLinkedEvent.OutputObject
    >;

    "PairWhitelistSet(address[],bool)": TypedContractEvent<
      PairWhitelistSetEvent.InputTuple,
      PairWhitelistSetEvent.OutputTuple,
      PairWhitelistSetEvent.OutputObject
    >;
    PairWhitelistSet: TypedContractEvent<
      PairWhitelistSetEvent.InputTuple,
      PairWhitelistSetEvent.OutputTuple,
      PairWhitelistSetEvent.OutputObject
    >;

    "RebalanceSettingSet(address,address)": TypedContractEvent<
      RebalanceSettingSetEvent.InputTuple,
      RebalanceSettingSetEvent.OutputTuple,
      RebalanceSettingSetEvent.OutputObject
    >;
    RebalanceSettingSet: TypedContractEvent<
      RebalanceSettingSetEvent.InputTuple,
      RebalanceSettingSetEvent.OutputTuple,
      RebalanceSettingSetEvent.OutputObject
    >;

    "ShadowStrategyCreatedAndLinked(address,address,address)": TypedContractEvent<
      ShadowStrategyCreatedAndLinkedEvent.InputTuple,
      ShadowStrategyCreatedAndLinkedEvent.OutputTuple,
      ShadowStrategyCreatedAndLinkedEvent.OutputObject
    >;
    ShadowStrategyCreatedAndLinked: TypedContractEvent<
      ShadowStrategyCreatedAndLinkedEvent.InputTuple,
      ShadowStrategyCreatedAndLinkedEvent.OutputTuple,
      ShadowStrategyCreatedAndLinkedEvent.OutputObject
    >;

    "StrategyCreated(uint8,address,address,address,uint256)": TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;
    StrategyCreated: TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;

    "StrategyImplementationSet(uint8,address)": TypedContractEvent<
      StrategyImplementationSetEvent.InputTuple,
      StrategyImplementationSetEvent.OutputTuple,
      StrategyImplementationSetEvent.OutputObject
    >;
    StrategyImplementationSet: TypedContractEvent<
      StrategyImplementationSetEvent.InputTuple,
      StrategyImplementationSetEvent.OutputTuple,
      StrategyImplementationSetEvent.OutputObject
    >;

    "TransferIgnoreListSet(address[])": TypedContractEvent<
      TransferIgnoreListSetEvent.InputTuple,
      TransferIgnoreListSetEvent.OutputTuple,
      TransferIgnoreListSetEvent.OutputObject
    >;
    TransferIgnoreListSet: TypedContractEvent<
      TransferIgnoreListSetEvent.InputTuple,
      TransferIgnoreListSetEvent.OutputTuple,
      TransferIgnoreListSetEvent.OutputObject
    >;

    "VaultCreated(uint8,address,address,uint256,address,address)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    "VaultImplementationSet(uint8,address)": TypedContractEvent<
      VaultImplementationSetEvent.InputTuple,
      VaultImplementationSetEvent.OutputTuple,
      VaultImplementationSetEvent.OutputObject
    >;
    VaultImplementationSet: TypedContractEvent<
      VaultImplementationSetEvent.InputTuple,
      VaultImplementationSetEvent.OutputTuple,
      VaultImplementationSetEvent.OutputObject
    >;
  };
}
