/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IOracleHelper {
  export type OracleParametersStruct = {
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
    heartbeatX: BigNumberish;
    heartbeatY: BigNumberish;
    deviationThreshold: BigNumberish;
    twapPriceCheckEnabled: boolean;
    twapInterval: BigNumberish;
  };

  export type OracleParametersStructOutput = [
    minPrice: bigint,
    maxPrice: bigint,
    heartbeatX: bigint,
    heartbeatY: bigint,
    deviationThreshold: bigint,
    twapPriceCheckEnabled: boolean,
    twapInterval: bigint
  ] & {
    minPrice: bigint;
    maxPrice: bigint;
    heartbeatX: bigint;
    heartbeatY: bigint;
    deviationThreshold: bigint;
    twapPriceCheckEnabled: boolean;
    twapInterval: bigint;
  };
}

export interface IOracleVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "cancelQueuedWithdrawal"
      | "cancelShutdown"
      | "checkPriceInDeviation"
      | "deposit"
      | "depositNative"
      | "emergencyWithdraw"
      | "executeQueuedWithdrawals"
      | "getAumAnnualFee"
      | "getBalances"
      | "getCurrentRound"
      | "getCurrentTotalQueuedWithdrawal"
      | "getFactory"
      | "getOperators"
      | "getOracleHelper"
      | "getOracleParameters"
      | "getPair"
      | "getPrice"
      | "getQueuedWithdrawal"
      | "getRange"
      | "getRedeemableAmounts"
      | "getStrategy"
      | "getTokenX"
      | "getTokenY"
      | "getTotalQueuedWithdrawal"
      | "getVaultType"
      | "initialize"
      | "isDepositsPaused"
      | "isFlaggedForShutdown"
      | "pauseDeposits"
      | "previewAmounts"
      | "previewShares"
      | "queueWithdrawal"
      | "recoverERC20"
      | "redeemQueuedWithdrawal"
      | "redeemQueuedWithdrawalNative"
      | "resumeDeposits"
      | "setEmergencyMode"
      | "setStrategy"
      | "submitShutdown"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Deposited"
      | "DepositsPaused"
      | "DepositsResumed"
      | "EmergencyMode"
      | "EmergencyWithdrawal"
      | "Recovered"
      | "ShutdownCancelled"
      | "ShutdownSubmitted"
      | "StrategySet"
      | "Transfer"
      | "WithdrawalCancelled"
      | "WithdrawalExecuted"
      | "WithdrawalQueued"
      | "WithdrawalRedeemed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelQueuedWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkPriceInDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeQueuedWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAumAnnualFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTotalQueuedWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleParameters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getQueuedWithdrawal",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getRange", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRedeemableAmounts",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTokenX", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTokenY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalQueuedWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositsPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFlaggedForShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queueWithdrawal",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemQueuedWithdrawal",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemQueuedWithdrawalNative",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceInDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAumAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTotalQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemableAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDepositsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFlaggedForShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemQueuedWithdrawalNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    amountX: BigNumberish,
    amountY: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amountX: bigint,
    amountY: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    user: string;
    amountX: bigint;
    amountY: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsPausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsResumedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyModeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawalEvent {
  export type InputTuple = [
    sender: AddressLike,
    shares: BigNumberish,
    amountX: BigNumberish,
    amountY: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    shares: bigint,
    amountX: bigint,
    amountY: bigint
  ];
  export interface OutputObject {
    sender: string;
    shares: bigint;
    amountX: bigint;
    amountY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredEvent {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, recipient: string, amount: bigint];
  export interface OutputObject {
    token: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShutdownCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShutdownSubmittedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategySetEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalCancelledEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    round: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    round: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    round: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalExecutedEvent {
  export type InputTuple = [
    round: BigNumberish,
    totalQueuedQhares: BigNumberish,
    amountX: BigNumberish,
    amountY: BigNumberish
  ];
  export type OutputTuple = [
    round: bigint,
    totalQueuedQhares: bigint,
    amountX: bigint,
    amountY: bigint
  ];
  export interface OutputObject {
    round: bigint;
    totalQueuedQhares: bigint;
    amountX: bigint;
    amountY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalQueuedEvent {
  export type InputTuple = [
    sender: AddressLike,
    user: AddressLike,
    round: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    user: string,
    round: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    user: string;
    round: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalRedeemedEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    round: BigNumberish,
    shares: BigNumberish,
    amountX: BigNumberish,
    amountY: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    round: bigint,
    shares: bigint,
    amountX: bigint,
    amountY: bigint
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    round: bigint;
    shares: bigint;
    amountX: bigint;
    amountY: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOracleVault extends BaseContract {
  connect(runner?: ContractRunner | null): IOracleVault;
  waitForDeployment(): Promise<this>;

  interface: IOracleVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  cancelQueuedWithdrawal: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  cancelShutdown: TypedContractMethod<[], [void], "nonpayable">;

  checkPriceInDeviation: TypedContractMethod<[], [boolean], "view">;

  deposit: TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish, minShares: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "nonpayable"
  >;

  depositNative: TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish, minShares: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  executeQueuedWithdrawals: TypedContractMethod<[], [void], "nonpayable">;

  getAumAnnualFee: TypedContractMethod<[], [bigint], "view">;

  getBalances: TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;

  getCurrentRound: TypedContractMethod<[], [bigint], "view">;

  getCurrentTotalQueuedWithdrawal: TypedContractMethod<[], [bigint], "view">;

  getFactory: TypedContractMethod<[], [string], "view">;

  getOperators: TypedContractMethod<
    [],
    [[string, string] & { defaultOperator: string; operator: string }],
    "view"
  >;

  getOracleHelper: TypedContractMethod<[], [string], "view">;

  getOracleParameters: TypedContractMethod<
    [],
    [IOracleHelper.OracleParametersStructOutput],
    "view"
  >;

  getPair: TypedContractMethod<[], [string], "view">;

  getPrice: TypedContractMethod<[], [bigint], "view">;

  getQueuedWithdrawal: TypedContractMethod<
    [round: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  getRange: TypedContractMethod<
    [],
    [[bigint, bigint] & { low: bigint; upper: bigint }],
    "view"
  >;

  getRedeemableAmounts: TypedContractMethod<
    [round: BigNumberish, user: AddressLike],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;

  getStrategy: TypedContractMethod<[], [string], "view">;

  getTokenX: TypedContractMethod<[], [string], "view">;

  getTokenY: TypedContractMethod<[], [string], "view">;

  getTotalQueuedWithdrawal: TypedContractMethod<
    [round: BigNumberish],
    [bigint],
    "view"
  >;

  getVaultType: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "nonpayable"
  >;

  isDepositsPaused: TypedContractMethod<[], [boolean], "view">;

  isFlaggedForShutdown: TypedContractMethod<[], [boolean], "view">;

  pauseDeposits: TypedContractMethod<[], [void], "nonpayable">;

  previewAmounts: TypedContractMethod<
    [shares: BigNumberish],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;

  previewShares: TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "view"
  >;

  queueWithdrawal: TypedContractMethod<
    [shares: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  recoverERC20: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemQueuedWithdrawal: TypedContractMethod<
    [round: BigNumberish, recipient: AddressLike],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "nonpayable"
  >;

  redeemQueuedWithdrawalNative: TypedContractMethod<
    [round: BigNumberish, recipient: AddressLike],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "nonpayable"
  >;

  resumeDeposits: TypedContractMethod<[], [void], "nonpayable">;

  setEmergencyMode: TypedContractMethod<[], [void], "nonpayable">;

  setStrategy: TypedContractMethod<
    [newStrategy: AddressLike],
    [void],
    "nonpayable"
  >;

  submitShutdown: TypedContractMethod<[], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelQueuedWithdrawal"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelShutdown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkPriceInDeviation"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish, minShares: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositNative"
  ): TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish, minShares: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeQueuedWithdrawals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAumAnnualFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentTotalQueuedWithdrawal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOperators"
  ): TypedContractMethod<
    [],
    [[string, string] & { defaultOperator: string; operator: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOracleHelper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOracleParameters"
  ): TypedContractMethod<
    [],
    [IOracleHelper.OracleParametersStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQueuedWithdrawal"
  ): TypedContractMethod<
    [round: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRange"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { low: bigint; upper: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRedeemableAmounts"
  ): TypedContractMethod<
    [round: BigNumberish, user: AddressLike],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStrategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalQueuedWithdrawal"
  ): TypedContractMethod<[round: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[name: string, symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isDepositsPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFlaggedForShutdown"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pauseDeposits"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "previewAmounts"
  ): TypedContractMethod<
    [shares: BigNumberish],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewShares"
  ): TypedContractMethod<
    [amountX: BigNumberish, amountY: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        effectiveX: bigint;
        effectiveY: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "queueWithdrawal"
  ): TypedContractMethod<
    [shares: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemQueuedWithdrawal"
  ): TypedContractMethod<
    [round: BigNumberish, recipient: AddressLike],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemQueuedWithdrawalNative"
  ): TypedContractMethod<
    [round: BigNumberish, recipient: AddressLike],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resumeDeposits"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrategy"
  ): TypedContractMethod<[newStrategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitShutdown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "DepositsPaused"
  ): TypedContractEvent<
    DepositsPausedEvent.InputTuple,
    DepositsPausedEvent.OutputTuple,
    DepositsPausedEvent.OutputObject
  >;
  getEvent(
    key: "DepositsResumed"
  ): TypedContractEvent<
    DepositsResumedEvent.InputTuple,
    DepositsResumedEvent.OutputTuple,
    DepositsResumedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyMode"
  ): TypedContractEvent<
    EmergencyModeEvent.InputTuple,
    EmergencyModeEvent.OutputTuple,
    EmergencyModeEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawal"
  ): TypedContractEvent<
    EmergencyWithdrawalEvent.InputTuple,
    EmergencyWithdrawalEvent.OutputTuple,
    EmergencyWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "Recovered"
  ): TypedContractEvent<
    RecoveredEvent.InputTuple,
    RecoveredEvent.OutputTuple,
    RecoveredEvent.OutputObject
  >;
  getEvent(
    key: "ShutdownCancelled"
  ): TypedContractEvent<
    ShutdownCancelledEvent.InputTuple,
    ShutdownCancelledEvent.OutputTuple,
    ShutdownCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ShutdownSubmitted"
  ): TypedContractEvent<
    ShutdownSubmittedEvent.InputTuple,
    ShutdownSubmittedEvent.OutputTuple,
    ShutdownSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "StrategySet"
  ): TypedContractEvent<
    StrategySetEvent.InputTuple,
    StrategySetEvent.OutputTuple,
    StrategySetEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalCancelled"
  ): TypedContractEvent<
    WithdrawalCancelledEvent.InputTuple,
    WithdrawalCancelledEvent.OutputTuple,
    WithdrawalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalExecuted"
  ): TypedContractEvent<
    WithdrawalExecutedEvent.InputTuple,
    WithdrawalExecutedEvent.OutputTuple,
    WithdrawalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalQueued"
  ): TypedContractEvent<
    WithdrawalQueuedEvent.InputTuple,
    WithdrawalQueuedEvent.OutputTuple,
    WithdrawalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalRedeemed"
  ): TypedContractEvent<
    WithdrawalRedeemedEvent.InputTuple,
    WithdrawalRedeemedEvent.OutputTuple,
    WithdrawalRedeemedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Deposited(address,uint256,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "DepositsPaused()": TypedContractEvent<
      DepositsPausedEvent.InputTuple,
      DepositsPausedEvent.OutputTuple,
      DepositsPausedEvent.OutputObject
    >;
    DepositsPaused: TypedContractEvent<
      DepositsPausedEvent.InputTuple,
      DepositsPausedEvent.OutputTuple,
      DepositsPausedEvent.OutputObject
    >;

    "DepositsResumed()": TypedContractEvent<
      DepositsResumedEvent.InputTuple,
      DepositsResumedEvent.OutputTuple,
      DepositsResumedEvent.OutputObject
    >;
    DepositsResumed: TypedContractEvent<
      DepositsResumedEvent.InputTuple,
      DepositsResumedEvent.OutputTuple,
      DepositsResumedEvent.OutputObject
    >;

    "EmergencyMode()": TypedContractEvent<
      EmergencyModeEvent.InputTuple,
      EmergencyModeEvent.OutputTuple,
      EmergencyModeEvent.OutputObject
    >;
    EmergencyMode: TypedContractEvent<
      EmergencyModeEvent.InputTuple,
      EmergencyModeEvent.OutputTuple,
      EmergencyModeEvent.OutputObject
    >;

    "EmergencyWithdrawal(address,uint256,uint256,uint256)": TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;
    EmergencyWithdrawal: TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;

    "Recovered(address,address,uint256)": TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;
    Recovered: TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;

    "ShutdownCancelled()": TypedContractEvent<
      ShutdownCancelledEvent.InputTuple,
      ShutdownCancelledEvent.OutputTuple,
      ShutdownCancelledEvent.OutputObject
    >;
    ShutdownCancelled: TypedContractEvent<
      ShutdownCancelledEvent.InputTuple,
      ShutdownCancelledEvent.OutputTuple,
      ShutdownCancelledEvent.OutputObject
    >;

    "ShutdownSubmitted()": TypedContractEvent<
      ShutdownSubmittedEvent.InputTuple,
      ShutdownSubmittedEvent.OutputTuple,
      ShutdownSubmittedEvent.OutputObject
    >;
    ShutdownSubmitted: TypedContractEvent<
      ShutdownSubmittedEvent.InputTuple,
      ShutdownSubmittedEvent.OutputTuple,
      ShutdownSubmittedEvent.OutputObject
    >;

    "StrategySet(address)": TypedContractEvent<
      StrategySetEvent.InputTuple,
      StrategySetEvent.OutputTuple,
      StrategySetEvent.OutputObject
    >;
    StrategySet: TypedContractEvent<
      StrategySetEvent.InputTuple,
      StrategySetEvent.OutputTuple,
      StrategySetEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WithdrawalCancelled(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawalCancelledEvent.InputTuple,
      WithdrawalCancelledEvent.OutputTuple,
      WithdrawalCancelledEvent.OutputObject
    >;
    WithdrawalCancelled: TypedContractEvent<
      WithdrawalCancelledEvent.InputTuple,
      WithdrawalCancelledEvent.OutputTuple,
      WithdrawalCancelledEvent.OutputObject
    >;

    "WithdrawalExecuted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawalExecutedEvent.InputTuple,
      WithdrawalExecutedEvent.OutputTuple,
      WithdrawalExecutedEvent.OutputObject
    >;
    WithdrawalExecuted: TypedContractEvent<
      WithdrawalExecutedEvent.InputTuple,
      WithdrawalExecutedEvent.OutputTuple,
      WithdrawalExecutedEvent.OutputObject
    >;

    "WithdrawalQueued(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawalQueuedEvent.InputTuple,
      WithdrawalQueuedEvent.OutputTuple,
      WithdrawalQueuedEvent.OutputObject
    >;
    WithdrawalQueued: TypedContractEvent<
      WithdrawalQueuedEvent.InputTuple,
      WithdrawalQueuedEvent.OutputTuple,
      WithdrawalQueuedEvent.OutputObject
    >;

    "WithdrawalRedeemed(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawalRedeemedEvent.InputTuple,
      WithdrawalRedeemedEvent.OutputTuple,
      WithdrawalRedeemedEvent.OutputObject
    >;
    WithdrawalRedeemed: TypedContractEvent<
      WithdrawalRedeemedEvent.InputTuple,
      WithdrawalRedeemedEvent.OutputTuple,
      WithdrawalRedeemedEvent.OutputObject
    >;
  };
}
