/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IHooksRewarderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "getExtraHooksParameters"
      | "getLBHooksManager"
      | "getPendingRewards"
      | "getRewardToken"
      | "getRewardedRange"
      | "isStopped"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtraHooksParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLBHooksManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardedRange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isStopped", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExtraHooksParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLBHooksManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardedRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStopped", data: BytesLike): Result;
}

export interface IHooksRewarder extends BaseContract {
  connect(runner?: ContractRunner | null): IHooksRewarder;
  waitForDeployment(): Promise<this>;

  interface: IHooksRewarderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [user: AddressLike, ids: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getExtraHooksParameters: TypedContractMethod<[], [string], "view">;

  getLBHooksManager: TypedContractMethod<[], [string], "view">;

  getPendingRewards: TypedContractMethod<
    [user: AddressLike, ids: BigNumberish[]],
    [bigint],
    "view"
  >;

  getRewardToken: TypedContractMethod<[], [string], "view">;

  getRewardedRange: TypedContractMethod<
    [],
    [[bigint, bigint] & { binStart: bigint; binEnd: bigint }],
    "view"
  >;

  isStopped: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [user: AddressLike, ids: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getExtraHooksParameters"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLBHooksManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingRewards"
  ): TypedContractMethod<
    [user: AddressLike, ids: BigNumberish[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRewardedRange"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { binStart: bigint; binEnd: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isStopped"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
