/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace HybridPriceLens {
  export type PriceFeedStruct = {
    externalFeed: AddressLike;
    lbPair: AddressLike;
    referenceToken: AddressLike;
    maxStaleness: BigNumberish;
    oracleType: BigNumberish;
    useExternal: boolean;
    isTokenX: boolean;
  };

  export type PriceFeedStructOutput = [
    externalFeed: string,
    lbPair: string,
    referenceToken: string,
    maxStaleness: bigint,
    oracleType: bigint,
    useExternal: boolean,
    isTokenX: boolean
  ] & {
    externalFeed: string;
    lbPair: string;
    referenceToken: string;
    maxStaleness: bigint;
    oracleType: bigint;
    useExternal: boolean;
    isTokenX: boolean;
  };
}

export interface HybridPriceLensInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "defaultMaxStaleness"
      | "getPriceFeed"
      | "getTokenPriceNative"
      | "isReferenceToken"
      | "owner"
      | "priceFeeds"
      | "removePriceFeed"
      | "renounceOwnership"
      | "setDefaultMaxStaleness"
      | "setExternalOracle"
      | "setLBPairRoute"
      | "setReferenceToken"
      | "transferOwnership"
      | "wnative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PriceFeedConfigured"
      | "ReferenceTokenSet"
      | "StalenessPeriodUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "defaultMaxStaleness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceNative",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReferenceToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removePriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMaxStaleness",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalOracle",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLBPairRoute",
    values: [AddressLike, AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferenceToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "wnative", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "defaultMaxStaleness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReferenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMaxStaleness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLBPairRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wnative", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedConfiguredEvent {
  export type InputTuple = [
    token: AddressLike,
    useExternal: boolean,
    feed: AddressLike
  ];
  export type OutputTuple = [token: string, useExternal: boolean, feed: string];
  export interface OutputObject {
    token: string;
    useExternal: boolean;
    feed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferenceTokenSetEvent {
  export type InputTuple = [token: AddressLike, isReference: boolean];
  export type OutputTuple = [token: string, isReference: boolean];
  export interface OutputObject {
    token: string;
    isReference: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StalenessPeriodUpdatedEvent {
  export type InputTuple = [newPeriod: BigNumberish];
  export type OutputTuple = [newPeriod: bigint];
  export interface OutputObject {
    newPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HybridPriceLens extends BaseContract {
  connect(runner?: ContractRunner | null): HybridPriceLens;
  waitForDeployment(): Promise<this>;

  interface: HybridPriceLensInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  defaultMaxStaleness: TypedContractMethod<[], [bigint], "view">;

  getPriceFeed: TypedContractMethod<
    [token: AddressLike],
    [HybridPriceLens.PriceFeedStructOutput],
    "view"
  >;

  getTokenPriceNative: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    "view"
  >;

  isReferenceToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  priceFeeds: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        externalFeed: string;
        lbPair: string;
        referenceToken: string;
        maxStaleness: bigint;
        oracleType: bigint;
        useExternal: boolean;
        isTokenX: boolean;
      }
    ],
    "view"
  >;

  removePriceFeed: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDefaultMaxStaleness: TypedContractMethod<
    [newPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExternalOracle: TypedContractMethod<
    [
      token: AddressLike,
      oracleFeed: AddressLike,
      oracleType: BigNumberish,
      maxStaleness: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setLBPairRoute: TypedContractMethod<
    [
      token: AddressLike,
      lbPair: AddressLike,
      referenceToken: AddressLike,
      isTokenX: boolean
    ],
    [void],
    "nonpayable"
  >;

  setReferenceToken: TypedContractMethod<
    [token: AddressLike, isReference: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  wnative: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "defaultMaxStaleness"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceFeed"
  ): TypedContractMethod<
    [token: AddressLike],
    [HybridPriceLens.PriceFeedStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenPriceNative"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isReferenceToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        externalFeed: string;
        lbPair: string;
        referenceToken: string;
        maxStaleness: bigint;
        oracleType: bigint;
        useExternal: boolean;
        isTokenX: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removePriceFeed"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultMaxStaleness"
  ): TypedContractMethod<[newPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExternalOracle"
  ): TypedContractMethod<
    [
      token: AddressLike,
      oracleFeed: AddressLike,
      oracleType: BigNumberish,
      maxStaleness: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLBPairRoute"
  ): TypedContractMethod<
    [
      token: AddressLike,
      lbPair: AddressLike,
      referenceToken: AddressLike,
      isTokenX: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferenceToken"
  ): TypedContractMethod<
    [token: AddressLike, isReference: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wnative"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedConfigured"
  ): TypedContractEvent<
    PriceFeedConfiguredEvent.InputTuple,
    PriceFeedConfiguredEvent.OutputTuple,
    PriceFeedConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "ReferenceTokenSet"
  ): TypedContractEvent<
    ReferenceTokenSetEvent.InputTuple,
    ReferenceTokenSetEvent.OutputTuple,
    ReferenceTokenSetEvent.OutputObject
  >;
  getEvent(
    key: "StalenessPeriodUpdated"
  ): TypedContractEvent<
    StalenessPeriodUpdatedEvent.InputTuple,
    StalenessPeriodUpdatedEvent.OutputTuple,
    StalenessPeriodUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceFeedConfigured(address,bool,address)": TypedContractEvent<
      PriceFeedConfiguredEvent.InputTuple,
      PriceFeedConfiguredEvent.OutputTuple,
      PriceFeedConfiguredEvent.OutputObject
    >;
    PriceFeedConfigured: TypedContractEvent<
      PriceFeedConfiguredEvent.InputTuple,
      PriceFeedConfiguredEvent.OutputTuple,
      PriceFeedConfiguredEvent.OutputObject
    >;

    "ReferenceTokenSet(address,bool)": TypedContractEvent<
      ReferenceTokenSetEvent.InputTuple,
      ReferenceTokenSetEvent.OutputTuple,
      ReferenceTokenSetEvent.OutputObject
    >;
    ReferenceTokenSet: TypedContractEvent<
      ReferenceTokenSetEvent.InputTuple,
      ReferenceTokenSetEvent.OutputTuple,
      ReferenceTokenSetEvent.OutputObject
    >;

    "StalenessPeriodUpdated(uint32)": TypedContractEvent<
      StalenessPeriodUpdatedEvent.InputTuple,
      StalenessPeriodUpdatedEvent.OutputTuple,
      StalenessPeriodUpdatedEvent.OutputObject
    >;
    StalenessPeriodUpdated: TypedContractEvent<
      StalenessPeriodUpdatedEvent.InputTuple,
      StalenessPeriodUpdatedEvent.OutputTuple,
      StalenessPeriodUpdatedEvent.OutputObject
    >;
  };
}
