/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "LiquidityAmounts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityAmounts__factory>;
    getContractFactory(
      name: "ILBFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBFactory__factory>;
    getContractFactory(
      name: "ILBFlashLoanCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBFlashLoanCallback__factory>;
    getContractFactory(
      name: "ILBPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBPair__factory>;
    getContractFactory(
      name: "ILBToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBToken__factory>;
    getContractFactory(
      name: "IPendingOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPendingOwnable__factory>;
    getContractFactory(
      name: "ImmutableClone",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableClone__factory>;
    getContractFactory(
      name: "LiquidityConfigurations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityConfigurations__factory>;
    getContractFactory(
      name: "PackedUint128Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PackedUint128Math__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Uint128x128Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uint128x128Math__factory>;
    getContractFactory(
      name: "Uint256x256Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uint256x256Math__factory>;
    getContractFactory(
      name: "Ownable2StepUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2StepUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BaseVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseVault__factory>;
    getContractFactory(
      name: "HybridPriceLens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HybridPriceLens__factory>;
    getContractFactory(
      name: "IAggregatorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregatorV3__factory>;
    getContractFactory(
      name: "IBaseVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseVault__factory>;
    getContractFactory(
      name: "IHooksRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHooksRewarder__factory>;
    getContractFactory(
      name: "ILBPairHooks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBPairHooks__factory>;
    getContractFactory(
      name: "IMetropolisStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetropolisStrategy__factory>;
    getContractFactory(
      name: "IMinimalVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinimalVault__factory>;
    getContractFactory(
      name: "IOneInchRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOneInchRouter__factory>;
    getContractFactory(
      name: "IOracleHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleHelper__factory>;
    getContractFactory(
      name: "IOracleHelperFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleHelperFactory__factory>;
    getContractFactory(
      name: "IOracleRewardVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleRewardVault__factory>;
    getContractFactory(
      name: "IOracleVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleVault__factory>;
    getContractFactory(
      name: "IPriceLens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceLens__factory>;
    getContractFactory(
      name: "IStrategyCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategyCommon__factory>;
    getContractFactory(
      name: "IVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultFactory__factory>;
    getContractFactory(
      name: "IWNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWNative__factory>;
    getContractFactory(
      name: "Hooks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hooks__factory>;
    getContractFactory(
      name: "TokenHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenHelper__factory>;
    getContractFactory(
      name: "MetropolisStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetropolisStrategy__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "OracleHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleHelper__factory>;
    getContractFactory(
      name: "OracleHelperFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleHelperFactory__factory>;
    getContractFactory(
      name: "OracleRewardVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleRewardVault__factory>;
    getContractFactory(
      name: "OracleVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleVault__factory>;
    getContractFactory(
      name: "OracleLensAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleLensAggregator__factory>;
    getContractFactory(
      name: "VaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultFactory__factory>;
    getContractFactory(
      name: "IRamsesV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3Pool__factory>;
    getContractFactory(
      name: "IRamsesV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3PoolActions__factory>;
    getContractFactory(
      name: "IRamsesV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IRamsesV3PoolErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3PoolErrors__factory>;
    getContractFactory(
      name: "IRamsesV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3PoolEvents__factory>;
    getContractFactory(
      name: "IRamsesV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3PoolImmutables__factory>;
    getContractFactory(
      name: "IRamsesV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IRamsesV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRamsesV3PoolState__factory>;
    getContractFactory(
      name: "TickMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TickMath__factory>;
    getContractFactory(
      name: "INonfungiblePositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonfungiblePositionManager__factory>;
    getContractFactory(
      name: "IPeripheryErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeripheryErrors__factory>;
    getContractFactory(
      name: "IPeripheryImmutableState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeripheryImmutableState__factory>;
    getContractFactory(
      name: "IPeripheryPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeripheryPayments__factory>;
    getContractFactory(
      name: "IPoolInitializer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolInitializer__factory>;
    getContractFactory(
      name: "IMinimalGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinimalGauge__factory>;
    getContractFactory(
      name: "IMinimalVoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinimalVoter__factory>;
    getContractFactory(
      name: "IOracleRewardShadowVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleRewardShadowVault__factory>;
    getContractFactory(
      name: "IShadowStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IShadowStrategy__factory>;
    getContractFactory(
      name: "IShadowVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IShadowVault__factory>;
    getContractFactory(
      name: "ShadowPriceHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShadowPriceHelper__factory>;
    getContractFactory(
      name: "OracleRewardShadowVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleRewardShadowVault__factory>;
    getContractFactory(
      name: "ShadowPriceHelperWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShadowPriceHelperWrapper__factory>;
    getContractFactory(
      name: "ShadowStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShadowStrategy__factory>;
    getContractFactory(
      name: "MockMetropolisStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMetropolisStrategy__factory>;
    getContractFactory(
      name: "MockOracleHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracleHelper__factory>;
    getContractFactory(
      name: "MockShadowStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockShadowStrategy__factory>;
    getContractFactory(
      name: "MockVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVaultFactory__factory>;
    getContractFactory(
      name: "SimpleMockPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleMockPool__factory>;
    getContractFactory(
      name: "TestOracleVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOracleVault__factory>;
    getContractFactory(
      name: "TestShadowVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestShadowVault__factory>;

    getContractAt(
      name: "LiquidityAmounts",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityAmounts>;
    getContractAt(
      name: "ILBFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBFactory>;
    getContractAt(
      name: "ILBFlashLoanCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBFlashLoanCallback>;
    getContractAt(
      name: "ILBPair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBPair>;
    getContractAt(
      name: "ILBToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBToken>;
    getContractAt(
      name: "IPendingOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPendingOwnable>;
    getContractAt(
      name: "ImmutableClone",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableClone>;
    getContractAt(
      name: "LiquidityConfigurations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityConfigurations>;
    getContractAt(
      name: "PackedUint128Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PackedUint128Math>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Uint128x128Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Uint128x128Math>;
    getContractAt(
      name: "Uint256x256Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Uint256x256Math>;
    getContractAt(
      name: "Ownable2StepUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2StepUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "ITransparentUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BaseVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseVault>;
    getContractAt(
      name: "HybridPriceLens",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HybridPriceLens>;
    getContractAt(
      name: "IAggregatorV3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregatorV3>;
    getContractAt(
      name: "IBaseVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseVault>;
    getContractAt(
      name: "IHooksRewarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHooksRewarder>;
    getContractAt(
      name: "ILBPairHooks",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBPairHooks>;
    getContractAt(
      name: "IMetropolisStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetropolisStrategy>;
    getContractAt(
      name: "IMinimalVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinimalVault>;
    getContractAt(
      name: "IOneInchRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOneInchRouter>;
    getContractAt(
      name: "IOracleHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleHelper>;
    getContractAt(
      name: "IOracleHelperFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleHelperFactory>;
    getContractAt(
      name: "IOracleRewardVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleRewardVault>;
    getContractAt(
      name: "IOracleVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleVault>;
    getContractAt(
      name: "IPriceLens",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceLens>;
    getContractAt(
      name: "IStrategyCommon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategyCommon>;
    getContractAt(
      name: "IVaultFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultFactory>;
    getContractAt(
      name: "IWNative",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWNative>;
    getContractAt(
      name: "Hooks",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Hooks>;
    getContractAt(
      name: "TokenHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenHelper>;
    getContractAt(
      name: "MetropolisStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MetropolisStrategy>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "OracleHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleHelper>;
    getContractAt(
      name: "OracleHelperFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleHelperFactory>;
    getContractAt(
      name: "OracleRewardVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleRewardVault>;
    getContractAt(
      name: "OracleVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleVault>;
    getContractAt(
      name: "OracleLensAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleLensAggregator>;
    getContractAt(
      name: "VaultFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultFactory>;
    getContractAt(
      name: "IRamsesV3Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3Pool>;
    getContractAt(
      name: "IRamsesV3PoolActions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3PoolActions>;
    getContractAt(
      name: "IRamsesV3PoolDerivedState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3PoolDerivedState>;
    getContractAt(
      name: "IRamsesV3PoolErrors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3PoolErrors>;
    getContractAt(
      name: "IRamsesV3PoolEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3PoolEvents>;
    getContractAt(
      name: "IRamsesV3PoolImmutables",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3PoolImmutables>;
    getContractAt(
      name: "IRamsesV3PoolOwnerActions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3PoolOwnerActions>;
    getContractAt(
      name: "IRamsesV3PoolState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRamsesV3PoolState>;
    getContractAt(
      name: "TickMath",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TickMath>;
    getContractAt(
      name: "INonfungiblePositionManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INonfungiblePositionManager>;
    getContractAt(
      name: "IPeripheryErrors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeripheryErrors>;
    getContractAt(
      name: "IPeripheryImmutableState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeripheryImmutableState>;
    getContractAt(
      name: "IPeripheryPayments",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeripheryPayments>;
    getContractAt(
      name: "IPoolInitializer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolInitializer>;
    getContractAt(
      name: "IMinimalGauge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinimalGauge>;
    getContractAt(
      name: "IMinimalVoter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinimalVoter>;
    getContractAt(
      name: "IOracleRewardShadowVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleRewardShadowVault>;
    getContractAt(
      name: "IShadowStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IShadowStrategy>;
    getContractAt(
      name: "IShadowVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IShadowVault>;
    getContractAt(
      name: "ShadowPriceHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShadowPriceHelper>;
    getContractAt(
      name: "OracleRewardShadowVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleRewardShadowVault>;
    getContractAt(
      name: "ShadowPriceHelperWrapper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShadowPriceHelperWrapper>;
    getContractAt(
      name: "ShadowStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShadowStrategy>;
    getContractAt(
      name: "MockMetropolisStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockMetropolisStrategy>;
    getContractAt(
      name: "MockOracleHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracleHelper>;
    getContractAt(
      name: "MockShadowStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockShadowStrategy>;
    getContractAt(
      name: "MockVaultFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVaultFactory>;
    getContractAt(
      name: "SimpleMockPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleMockPool>;
    getContractAt(
      name: "TestOracleVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOracleVault>;
    getContractAt(
      name: "TestShadowVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestShadowVault>;

    deployContract(
      name: "LiquidityAmounts",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityAmounts>;
    deployContract(
      name: "ILBFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBFactory>;
    deployContract(
      name: "ILBFlashLoanCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBFlashLoanCallback>;
    deployContract(
      name: "ILBPair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBPair>;
    deployContract(
      name: "ILBToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBToken>;
    deployContract(
      name: "IPendingOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPendingOwnable>;
    deployContract(
      name: "ImmutableClone",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableClone>;
    deployContract(
      name: "LiquidityConfigurations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityConfigurations>;
    deployContract(
      name: "PackedUint128Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PackedUint128Math>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Uint128x128Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Uint128x128Math>;
    deployContract(
      name: "Uint256x256Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Uint256x256Math>;
    deployContract(
      name: "Ownable2StepUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2StepUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyAdmin>;
    deployContract(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BaseVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseVault>;
    deployContract(
      name: "HybridPriceLens",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HybridPriceLens>;
    deployContract(
      name: "IAggregatorV3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregatorV3>;
    deployContract(
      name: "IBaseVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseVault>;
    deployContract(
      name: "IHooksRewarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHooksRewarder>;
    deployContract(
      name: "ILBPairHooks",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBPairHooks>;
    deployContract(
      name: "IMetropolisStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetropolisStrategy>;
    deployContract(
      name: "IMinimalVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalVault>;
    deployContract(
      name: "IOneInchRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOneInchRouter>;
    deployContract(
      name: "IOracleHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleHelper>;
    deployContract(
      name: "IOracleHelperFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleHelperFactory>;
    deployContract(
      name: "IOracleRewardVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleRewardVault>;
    deployContract(
      name: "IOracleVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleVault>;
    deployContract(
      name: "IPriceLens",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceLens>;
    deployContract(
      name: "IStrategyCommon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyCommon>;
    deployContract(
      name: "IVaultFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVaultFactory>;
    deployContract(
      name: "IWNative",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNative>;
    deployContract(
      name: "Hooks",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hooks>;
    deployContract(
      name: "TokenHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenHelper>;
    deployContract(
      name: "MetropolisStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MetropolisStrategy>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "OracleHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleHelper>;
    deployContract(
      name: "OracleHelperFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleHelperFactory>;
    deployContract(
      name: "OracleRewardVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleRewardVault>;
    deployContract(
      name: "OracleVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleVault>;
    deployContract(
      name: "OracleLensAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleLensAggregator>;
    deployContract(
      name: "VaultFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultFactory>;
    deployContract(
      name: "IRamsesV3Pool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3Pool>;
    deployContract(
      name: "IRamsesV3PoolActions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolActions>;
    deployContract(
      name: "IRamsesV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolDerivedState>;
    deployContract(
      name: "IRamsesV3PoolErrors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolErrors>;
    deployContract(
      name: "IRamsesV3PoolEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolEvents>;
    deployContract(
      name: "IRamsesV3PoolImmutables",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolImmutables>;
    deployContract(
      name: "IRamsesV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolOwnerActions>;
    deployContract(
      name: "IRamsesV3PoolState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolState>;
    deployContract(
      name: "TickMath",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TickMath>;
    deployContract(
      name: "INonfungiblePositionManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INonfungiblePositionManager>;
    deployContract(
      name: "IPeripheryErrors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPeripheryErrors>;
    deployContract(
      name: "IPeripheryImmutableState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPeripheryImmutableState>;
    deployContract(
      name: "IPeripheryPayments",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPeripheryPayments>;
    deployContract(
      name: "IPoolInitializer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolInitializer>;
    deployContract(
      name: "IMinimalGauge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalGauge>;
    deployContract(
      name: "IMinimalVoter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalVoter>;
    deployContract(
      name: "IOracleRewardShadowVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleRewardShadowVault>;
    deployContract(
      name: "IShadowStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IShadowStrategy>;
    deployContract(
      name: "IShadowVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IShadowVault>;
    deployContract(
      name: "ShadowPriceHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShadowPriceHelper>;
    deployContract(
      name: "OracleRewardShadowVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleRewardShadowVault>;
    deployContract(
      name: "ShadowPriceHelperWrapper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShadowPriceHelperWrapper>;
    deployContract(
      name: "ShadowStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShadowStrategy>;
    deployContract(
      name: "MockMetropolisStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockMetropolisStrategy>;
    deployContract(
      name: "MockOracleHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOracleHelper>;
    deployContract(
      name: "MockShadowStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockShadowStrategy>;
    deployContract(
      name: "MockVaultFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVaultFactory>;
    deployContract(
      name: "SimpleMockPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleMockPool>;
    deployContract(
      name: "TestOracleVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestOracleVault>;
    deployContract(
      name: "TestShadowVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestShadowVault>;

    deployContract(
      name: "LiquidityAmounts",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityAmounts>;
    deployContract(
      name: "ILBFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBFactory>;
    deployContract(
      name: "ILBFlashLoanCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBFlashLoanCallback>;
    deployContract(
      name: "ILBPair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBPair>;
    deployContract(
      name: "ILBToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBToken>;
    deployContract(
      name: "IPendingOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPendingOwnable>;
    deployContract(
      name: "ImmutableClone",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableClone>;
    deployContract(
      name: "LiquidityConfigurations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityConfigurations>;
    deployContract(
      name: "PackedUint128Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PackedUint128Math>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Uint128x128Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Uint128x128Math>;
    deployContract(
      name: "Uint256x256Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Uint256x256Math>;
    deployContract(
      name: "Ownable2StepUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2StepUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20PermitUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1967",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Upgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ProxyAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyAdmin>;
    deployContract(
      name: "ITransparentUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BaseVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseVault>;
    deployContract(
      name: "HybridPriceLens",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HybridPriceLens>;
    deployContract(
      name: "IAggregatorV3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregatorV3>;
    deployContract(
      name: "IBaseVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseVault>;
    deployContract(
      name: "IHooksRewarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHooksRewarder>;
    deployContract(
      name: "ILBPairHooks",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILBPairHooks>;
    deployContract(
      name: "IMetropolisStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetropolisStrategy>;
    deployContract(
      name: "IMinimalVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalVault>;
    deployContract(
      name: "IOneInchRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOneInchRouter>;
    deployContract(
      name: "IOracleHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleHelper>;
    deployContract(
      name: "IOracleHelperFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleHelperFactory>;
    deployContract(
      name: "IOracleRewardVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleRewardVault>;
    deployContract(
      name: "IOracleVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleVault>;
    deployContract(
      name: "IPriceLens",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceLens>;
    deployContract(
      name: "IStrategyCommon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyCommon>;
    deployContract(
      name: "IVaultFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVaultFactory>;
    deployContract(
      name: "IWNative",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNative>;
    deployContract(
      name: "Hooks",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hooks>;
    deployContract(
      name: "TokenHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenHelper>;
    deployContract(
      name: "MetropolisStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MetropolisStrategy>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "OracleHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleHelper>;
    deployContract(
      name: "OracleHelperFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleHelperFactory>;
    deployContract(
      name: "OracleRewardVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleRewardVault>;
    deployContract(
      name: "OracleVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleVault>;
    deployContract(
      name: "OracleLensAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleLensAggregator>;
    deployContract(
      name: "VaultFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultFactory>;
    deployContract(
      name: "IRamsesV3Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3Pool>;
    deployContract(
      name: "IRamsesV3PoolActions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolActions>;
    deployContract(
      name: "IRamsesV3PoolDerivedState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolDerivedState>;
    deployContract(
      name: "IRamsesV3PoolErrors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolErrors>;
    deployContract(
      name: "IRamsesV3PoolEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolEvents>;
    deployContract(
      name: "IRamsesV3PoolImmutables",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolImmutables>;
    deployContract(
      name: "IRamsesV3PoolOwnerActions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolOwnerActions>;
    deployContract(
      name: "IRamsesV3PoolState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRamsesV3PoolState>;
    deployContract(
      name: "TickMath",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TickMath>;
    deployContract(
      name: "INonfungiblePositionManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INonfungiblePositionManager>;
    deployContract(
      name: "IPeripheryErrors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPeripheryErrors>;
    deployContract(
      name: "IPeripheryImmutableState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPeripheryImmutableState>;
    deployContract(
      name: "IPeripheryPayments",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPeripheryPayments>;
    deployContract(
      name: "IPoolInitializer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolInitializer>;
    deployContract(
      name: "IMinimalGauge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalGauge>;
    deployContract(
      name: "IMinimalVoter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalVoter>;
    deployContract(
      name: "IOracleRewardShadowVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleRewardShadowVault>;
    deployContract(
      name: "IShadowStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IShadowStrategy>;
    deployContract(
      name: "IShadowVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IShadowVault>;
    deployContract(
      name: "ShadowPriceHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShadowPriceHelper>;
    deployContract(
      name: "OracleRewardShadowVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleRewardShadowVault>;
    deployContract(
      name: "ShadowPriceHelperWrapper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShadowPriceHelperWrapper>;
    deployContract(
      name: "ShadowStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShadowStrategy>;
    deployContract(
      name: "MockMetropolisStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockMetropolisStrategy>;
    deployContract(
      name: "MockOracleHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOracleHelper>;
    deployContract(
      name: "MockShadowStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockShadowStrategy>;
    deployContract(
      name: "MockVaultFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVaultFactory>;
    deployContract(
      name: "SimpleMockPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleMockPool>;
    deployContract(
      name: "TestOracleVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestOracleVault>;
    deployContract(
      name: "TestShadowVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestShadowVault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
